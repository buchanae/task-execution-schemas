syntax = "proto3";

package tes;

// Import HTTP RESTful annotations.
import "google/api/annotations.proto";

// CreateTaskRequest describes a task to be created and run.
message CreateTaskRequest {

  // Task name.
  //
  // OPTIONAL.
  string name = 1;

  // Project task is associated with.
  //
  // Commonly used for billing on cloud providers (AWS, Google Cloud, etc).
  //
  // OPTIONAL.
  string project = 2;

  // Task description
  //
  // OPTIONAL.
  string description = 3;

  // Input files
  //
  // Inputs will be downloaded and mounted into the executor container.
  //
  // OPTIONAL.
  repeated TaskParameter inputs = 4;

  // Output files
  //
  // Outputs will be uploaded from the executor container to long-term storage.
  //
  // OPTIONAL.
  repeated TaskParameter outputs = 5;

  // Requested resources
  //
  // Request that the task be run with these resources.
  //
  // OPTIONAL.
  Resources resources = 6;

  // Executors
  //
  // A list of executors to be run, sequentially.
  //
  // REQUIRED.
  repeated Executor executors = 8;

  // A map of arbitrary tags.
  //
  // OPTIONAL.
  map<string, string> tags = 9;
}

enum FileType {
  FILE = 0;
  DIRECTORY = 1;
}

// TaskParameter describes input and output files for a Task.
message TaskParameter {

  // OPTIONAL.
  string name = 1;

  // OPTIONAL.
  string description = 2;

  // URL in long term storage, for example:
  // s3://my-object-store/file1
  // gs://my-bucket/file2
  // file:///path/to/my/file
  // /path/to/my/file
  // etc...
  //
  // REQUIRED.
  string url = 3;

  // Path of the file inside the container.
  //
  // REQUIRED.
  string path = 4;

  // Type of the file, FILE or DIRECTORY
  //
  // REQUIRED.
  FileType type = 5;

  // If true, this path will be created before the task starts running.
  // This helps tasks create output directories which the task will
  // write to.
  //
  // OPTIONAL.
  bool create = 6;

  // File contents literal. 
  // Implementations should support a minimum of 128 KiB in this field and may define its own maximum.
  // UTF-8 encoded
  //
  // OPTIONAL.
  string contents = 7;
}

// Ports describes the port mapping between the container and host.
message Ports {

  // Port number opened inside the container.
  //
  // REQUIRED.
  uint32 container = 1;

  // Port number opened on the host. Must be greater than 1024.
  // Defaults to 0, which assigns a random port on the host.
  //
  // OPTIONAL.
  uint32 host = 2;
}

// Executor describes a command to run, and its environment.
message Executor {

  // Name of the container image, for example:
  // ubuntu
  // quay.io/aptible/ubuntu
  // gcr.io/my-org/my-image
  // etc...
  //
  // REQUIRED.
  string image_name = 1;

  // The command to be executed.
  //
  // REQUIRED.
  repeated string cmd = 2;

  // The working directory that the command will be executed in.
  // Defaults to the directory set by the container image.
  //
  // OPTIONAL.
  string workdir = 3;

  // Path inside the container to a file which will be piped
  // to the command's stdin.
  //
  // OPTIONAL.
  string stdin = 6;

  // Path inside the container to a file where the command's
  // stdout will be written to.
  //
  // OPTIONAL.
  string stdout = 4;

  // Path inside the container to a file where the command's
  // stderr will be written to.
  //
  // OPTIONAL.
  string stderr = 5;

  // Port to expose from within the container, blank if none.
  //
  // OPTIONAL.
  repeated Ports ports = 7;

  // Enviromental variables to set within the container.
  //
  // OPTIONAL.
  map<string,string> environ = 8;
}

// Volume describes a volume (i.e. directory) which will be
// mounted into an executor/container.
message Volume {

  // OPTIONAL.
  string name = 1;

  // Requested disk size in gigabytes (GB).
  //
  // REQUIRED.
  double size_gb = 2;

  // Path inside the container that the volume will be mounted to.
  //
  // REQUIRED.
  string mount_point = 6;
}

// Resources describes the resources requested by a task.
message Resources {

  // Requested number of CPUs
  //
  // OPTIONAL.
  uint32 cpu_cores = 1;

  // Is the task allowed to run on preemptible compute instances (e.g. AWS Spot)?
  //
  // OPTIONAL.
  bool preemptible = 2;

  // Requested RAM required in gigabytes (GB)
  //
  // OPTIONAL.
  double ram_gb = 3;

  // Volumes to be mounted into the container.
  //
  // OPTIONAL.
  repeated Volume volumes = 4;

  // Request that the task be run in these compute zones.
  //
  // OPTIONAL.
  repeated string zones = 5;
}

// GetTaskRequest describes a request to the GetTask endpoint.
message GetTaskRequest {

  // Task identifier.
  //
  // REQUIRED.
  string id = 1;
}

// Task
//
// Task describes an instance of a task.
//
// OUTPUT ONLY.
message Task {

  // Task identifier.
  //
  // REQUIRED.
  string id = 1;

  // REQUIRED.
  map<string,string> metadata = 2;

  // REQUIRED.
  CreateTaskRequest request = 3;

  // REQUIRED.
  State state = 4;

  // Task logging information.
  // Normally, this will contain only one entry, but in the case where
  // a task fails and is retried, an entry will be appended to this list.
  //
  // REQUIRED.
  repeated TaskLog logs = 5;

  // Information about all output files. Directory outputs are
  // flattened into separate items.
  //
  // REQUIRED.
  repeated OutputFileLog outputs = 6;
}

// TaskLog describes logging information related to a Task.
//
// OUTPUT ONLY.
message TaskLog {

  // Logs for each executor
  //
  // REQUIRED.
  repeated ExecutorLog logs = 1;

  // Arbitrary logging metadata included by the implementation.
  //
  // OPTIONAL.
  map<string, string> metadata = 2;

  // When the task started, in RFC 3339 format.
  //
  // REQUIRED.
  string start_time = 3;

  // When the task ended, in RFC 3339 format.
  //
  // REQUIRED.
  string end_time = 4;
}

// ExecutorLog describes logging information related to an Executor.
//
// OUTPUT ONLY.
message ExecutorLog {

  // Time the executor started, in RFC 3339 format.
  //
  // OPTIONAL.
  string start_time = 2;

  // Time the executor ended, in RFC 3339 format.
  //
  // OPTIONAL.
  string end_time = 3;

  // Stdout tail.
  // This is not guaranteed to be the entire log.
  // Implementations determine the maximum size.
  //
  // OPTIONAL.
  string stdout = 4;

  // Stderr tail.
  // This is not guaranteed to be the entire log.
  // Implementations determine the maximum size.
  //
  // OPTIONAL.
  string stderr = 5;

  // Exit code.
  //
  // REQUIRED.
  int32 exit_code = 6;

  // IP address of host.
  //
  // OPTIONAL.
  string host_ip = 7;

  // Ports mapped between the container and host.
  //
  // OPTIONAL.
  repeated Ports ports = 8;
}

// OutputFileLog describes a single output file. This describes
// file details after the task has completed successfully,
// for logging purposes.
//
// OUTPUT ONLY.
message OutputFileLog {

  // URL of the file in storage, e.g. s3://bucket/file.txt
  //
  // REQUIRED.
  string url = 1;

  // Path of the file inside the container.
  //
  // REQUIRED.
  string path = 2;

  // Size of the file in bytes.
  //
  // REQUIRED.
  int64 size_bytes = 3;
}

// Task states.
//
// OUTPUT ONLY.
enum State {
  UNKNOWN = 0;
  QUEUED = 1;
  INITIALIZING = 2;
  RUNNING = 3;
  // An implementation *may* have the ability to pause a task,
  // but this is not required.
  PAUSED = 4;
  COMPLETE = 5;
  ERROR = 6;
  SYSTEM_ERROR = 7;
  CANCELED = 8;
}

// ListTasksRequest describes a request to the ListTasks service endpoint.
message ListTasksRequest {

  // Filter the task list to include tasks in this project.
  //
  // OPTIONAL.
  string project = 1;

  // Filter the list to include tasks where the name matches this prefix.
  // If unspecified, no task name filtering is done.
  //
  // OPTIONAL.
  string name_prefix	= 2;

  // Number of tasks to return in one page.
  // Must be less than 2048. Defaults to 256.
  //
  // OPTIONAL.
  uint32 page_size = 3;

  // Page token is used to retrieve the next page of results.
  // If unspecified, returns the first page of results.
  // See ListTasksResponse.next_page_token
  //
  // OPTIONAL.
  string page_token = 4;
}

// ListTasksResponse describes a response from the ListTasks endpoint.
//
// OUTPUT ONLY
message ListTasksResponse {

  // List of lightweight task descriptions.
  //
  // REQUIRED.
  repeated TaskDesc tasks = 1;

  // Token used to return the next page of results.
  // See TaskListRequest.next_page_token
  //
  // OPTIONAL.
  string next_page_token = 2;
}

// TaskDesc is a lightweight description of a task, which is returned
// by the ListTasks endpoint.
//
// OUTPUT ONLY
message TaskDesc {

  // Task identifier.
  //
  // REQUIRED.
  string id = 1;

  // REQUIRED.
  State state = 2;
}

// CancelTaskRequest describes a request to the CancelTask endpoint.
message CancelTaskRequest {
  // Task identifier.
  //
  // REQUIRED.
  string id = 1;
}

// CancelTaskResponse describes a response from the CancelTask endpoint.
//
// OUTPUT ONLY.
message CancelTaskResponse {}

// ServiceInfoRequest describes a request to the ServiceInfo endpoint.
message ServiceInfoRequest {}

// ServiceInfo describes information about the service,
// such as storage details, resource availability,
// and other documentation.
//
// OUTPUT ONLY.
message ServiceInfo {

  // System specific key/value pairs
  // Example for a shared file system based storage system:
  // storageType=sharedFile, baseDir=/path/to/shared/directory
  //
  // OPTIONAL.
  map<string,string> storage_config = 1;
}

// TaskService describes the HTTP/gRPC service API provided by TES
// services to create, list, get, update tasks.
service TaskService {

  // GetServiceInfo provides information about the service,
  // such as storage details, resource availability, and 
  // other documentation.
  rpc GetServiceInfo(ServiceInfoRequest) returns (ServiceInfo) {
    option (google.api.http) = {
      get: "/v1/tasks/service-info"
    };
  }

  // Create a new task.
  rpc CreateTask(CreateTaskRequest) returns (Task) {
    option (google.api.http) = {
      post: "/v1/tasks"
      body: "*"
    };
  }

  // List tasks.
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {
    option (google.api.http) = {
      get: "/v1/tasks"
    };
  }

  // Get a task.
  rpc GetTask(GetTaskRequest) returns (Task) {
      option (google.api.http) = {
        get: "/v1/tasks/{id}"
      };
  }

  // Cancel a task.
  rpc CancelTask(CancelTaskRequest) returns (CancelTaskResponse) {
    option (google.api.http) = {
      post: "/v1/tasks/{id}:cancel"
      body: "*"
    };
  }

}
