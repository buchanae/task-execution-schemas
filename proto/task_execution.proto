

syntax = "proto3";

package ga4gh_task_exec;

// Import HTTP RESTful annotations
import "google/api/annotations.proto";

//Parameters for Task
message TaskParameter {
  //name of the parameter
  string name = 1;
  //optional text description
  string description = 2;
  //location in long term storage, is a url specific to the implementing 
  //system. For example s3://my-object-store/file1 or gs://my-bucket/file2 or
  //file:///path/to/my/file
  string location = 3;
  //path in the machine file system. Note, this MUST be a path that exists
  //within one of the defined volumes
  string path = 4;
  //Type of data, "File" or "Directory"
  //if used for an output all the files in the directory
  //will be copied to the storage location
  string class = 5;
  //if the parameter is an output, should the element be created before executing
  //the command. For example if saving the working directory as an output,
  //the directory needs to exist before the command is called. If false, it is
  //assumed that the user will create the element as a part of the operation
  bool   create = 6;
}

//A command line to be executed and the container to run it
message Container {
  // Image name
  string imageName = 1;
  //The command to be executed
  repeated string cmd = 2;
  //The working directory that the command will be executed in
  string workdir = 3;
  //Path for supplying input to stdin, blank if none
  string stdin = 6;
  //Path for stdout recording, blank if not storing to file
  string stdout = 4;
  //Path for stderr recording, blank if not storing to file
  string stderr = 5;
}

//Attached volume request.
message Volume {
  //Name of attached volume
  string name = 1;
  //Minimum size
  uint32 sizeGb = 2;
  //Source volume, this would refer to an existing volume the execution engine
  //could identify. Leave blank if is to be a newly created volume
  //Volumes loaded from a source will be mounted as read only
  string source = 3;
  //mount point for volume inside the container
  string mountPoint = 6;
}

message Resources {
  //Minimum number of CPUs
  uint32 minimumCpuCores = 1;
  //Can schedule on resource that resource that can be preempted, like AWS Spot Instances
  bool preemptible = 2;
  //Minimum RAM required
  uint32 minimumRamGb = 3;
  //Volumes to be mounted into the container
  repeated Volume volumes = 4;
  //optional scheduling information for systems where multiple compute zones are avalible
  repeated string zones = 5;
}

//The description of a task to be run
message Task {
  //user name for task
  string name = 1;
  //parameter for execution engine to define/store group information
  string projectID = 2;
  //free text description of task
  string description = 3;
  //Files to be copied into system before tasks
  repeated TaskParameter inputs = 4;
  //Files to be copied out of the system after tasks
  repeated TaskParameter outputs = 5;
  //Define required system resources to run job
  Resources resources = 6;
  //System defined identifier of task
  string taskID = 7;
  //An array of containers that will be run sequentially
  repeated Container containers = 8;
}

message TaskListRequest {
  //Required. The name of the project to search for pipelines. Caller must have READ access to this project.
  string projectID = 1;
  //Pipelines with names that match this prefix should be returned. If unspecified, all pipelines in the project, up to pageSize, will be returned.
  string namePrefix	= 2;
  //Number of pipelines to return at once. Defaults to 256, and max is 2048.
  uint32 pageSize = 3;
  //Token to use to indicate where to start getting results. If unspecified, returns the first page of results.
  string pageToken = 4;
}

message TaskListResponse {
  repeated Task tasks  = 1;
  string nextPageToken = 2;
}

message JobListRequest {
  //Required. The name of the project to search for pipelines. Caller must have READ access to this project.
  string projectID = 1;
  //Pipelines with names that match this prefix should be returned. If unspecified, all pipelines in the project, up to pageSize, will be returned.
  string namePrefix	= 2;
  //Number of pipelines to return at once. Defaults to 256, and max is 2048.
  uint32 pageSize = 3;
  //Token to use to indicate where to start getting results. If unspecified, returns the first page of results.
  string pageToken = 4;
}

message JobListResponse {
  repeated Job jobs  = 1;
  string nextPageToken = 2;
}

//ID of a Task description
message TaskID {
  string value = 1;
}

//ID of an instance of a Task
message JobID {
  string value = 1;
}

enum State {
  Unknown = 0;
  Queued = 1;
  Running = 2;
  Paused = 3;
  Complete = 4;
  Error = 5;
  SystemError = 6;
  Canceled = 7;
}

message JobLog {
  //The command line that was run
  repeated string cmd = 1;
  //When the command was executed
  string startTime = 2;
  //When the command completed
  string endTime = 3;
  //Sample of stdout (not guaranteed to be entire log)
  string stdout = 4;
  //Sample of stderr (not guaranteed to be entire log)
  string stderr = 5;
  //Exit code of the program
  int32  exitCode = 6;
}

//The description of the running instance of a task
message Job {
  string jobID = 1;
  map<string,string> metadata = 2;
  Task task = 3;
  State state = 4;
  repeated JobLog logs = 5;
}

//Blank request message for service request
message ServiceInfoRequest {}

//Information about Task Execution Service
//May include information related (but not limited to)
//resource availability and storage system information
message ServiceInfo {
  //System specific key/value pairs
  //Example for a shared file system based storage system:
  //storageType=sharedFile, baseDir=/path/to/shared/directory
  map<string,string> storageConfig = 1;
}

//Web service to get, create, list and delete Tasks
service TaskService {

  //Get Service Info
  rpc GetServiceInfo(ServiceInfoRequest) returns (ServiceInfo) {
    option (google.api.http) = {
      get: "/v1/jobs-service"
    };
  }

  //Run a task
  rpc RunTask(Task) returns (JobID) {
    option (google.api.http) = {
      post: "/v1/jobs"
      body: "*"
    };
  }

  //List the TaskOps
  rpc ListJobs(JobListRequest) returns (JobListResponse) {
    option (google.api.http) = {
      get: "/v1/jobs"
    };
  }

  //Get info about a running task
  rpc GetJob(JobID) returns (Job) {
      option (google.api.http) = {
        get: "/v1/jobs/{value}"
      };
  }

  //Cancel a running task
  rpc CancelJob(JobID) returns (JobID) {
    option (google.api.http) = {
      delete: "/v1/jobs/{value}"
    };
  }

}
