// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/task_execution.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DockerExecutor;
@class FileLog;
@class JobDesc;
@class JobLog;
@class Ports;
@class Resources;
@class Task;
@class TaskParameter;
@class Volume;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum State

typedef GPB_ENUM(State) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  State_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  State_Unknown = 0,
  State_Queued = 1,
  State_Running = 2,
  State_Paused = 3,
  State_Complete = 4,
  State_Error = 5,
  State_SystemError = 6,
  State_Canceled = 7,
  State_Initializing = 8,
};

GPBEnumDescriptor *State_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL State_IsValidValue(int32_t value);

#pragma mark - TaskExecutionRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface TaskExecutionRoot : GPBRootObject
@end

#pragma mark - TaskParameter

typedef GPB_ENUM(TaskParameter_FieldNumber) {
  TaskParameter_FieldNumber_Name = 1,
  TaskParameter_FieldNumber_Description_p = 2,
  TaskParameter_FieldNumber_Location = 3,
  TaskParameter_FieldNumber_Path = 4,
  TaskParameter_FieldNumber_Class_p = 5,
  TaskParameter_FieldNumber_Create = 6,
};

/**
 * Parameters for Task
 **/
@interface TaskParameter : GPBMessage

/**
 * OPTIONAL
 * name of the parameter
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/**
 * OPTIONAL
 * Text description
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/**
 * REQUIRED
 * location in long term storage, is a url specific to the implementing
 * system. For example s3://my-object-store/file1 or gs://my-bucket/file2 or
 * file:///path/to/my/file
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *location;

/**
 * REQUIRED
 * path in the machine file system. Note, this MUST be a path that exists
 * within one of the defined volumes
 * If the file is mounted in a volume that is mounted read/write the file must
 * be accessable to processes in the container. Optimizations, suc as hard linking
 * to a source file, or providing a streaming input from a FUSE mount should only
 * be done if the volume is mounted as read only
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *path;

/**
 * REQUIRED
 * Type of data, "File" or "Directory"
 * if used for an output all the files in the directory
 * will be copied to the storage location
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *class_p;

/**
 * OPTIONAL: default false
 * if the parameter is an output, should the element be created before executing
 * the command. For example if saving the working directory as an output,
 * the directory needs to exist before the command is called. If false, it is
 * assumed that the user will create the element as a part of the operation
 **/
@property(nonatomic, readwrite) BOOL create;

@end

#pragma mark - Ports

typedef GPB_ENUM(Ports_FieldNumber) {
  Ports_FieldNumber_Container = 1,
  Ports_FieldNumber_Host = 2,
};

/**
 * host to container port mappings
 **/
@interface Ports : GPBMessage

/**
 * REQUIRED
 * Exposed port on container
 **/
@property(nonatomic, readwrite) int32_t container;

/**
 * OPTIONAL
 * Must be greater than 1024;
 * Defaults to 0
 **/
@property(nonatomic, readwrite) int32_t host;

@end

#pragma mark - DockerExecutor

typedef GPB_ENUM(DockerExecutor_FieldNumber) {
  DockerExecutor_FieldNumber_ImageName = 1,
  DockerExecutor_FieldNumber_CmdArray = 2,
  DockerExecutor_FieldNumber_Workdir = 3,
  DockerExecutor_FieldNumber_Stdout = 4,
  DockerExecutor_FieldNumber_Stderr = 5,
  DockerExecutor_FieldNumber_Stdin = 6,
  DockerExecutor_FieldNumber_PortsArray = 7,
};

/**
 * A command line to be executed and the docker container to run it
 **/
@interface DockerExecutor : GPBMessage

/**
 * REQUIRED
 * Docker Image name
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *imageName;

/**
 * REQUIRED
 * The command to be executed
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *cmdArray;
/** The number of items in @c cmdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cmdArray_Count;

/**
 * OPTIONAL: default docker image directory
 * The working directory that the command will be executed in
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *workdir;

/**
 * OPTIONAL
 * Path for supplying input to stdin, blank if none
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *stdin;

/**
 * OPTIONAL
 * Path for stdout recording, blank if not storing to file
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *stdout;

/**
 * OPTIONAL
 * Path for stderr recording, blank if not storing to file
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *stderr;

/**
 * OPTIONAL
 * Port to expose from within the container, blank if none
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Ports*> *portsArray;
/** The number of items in @c portsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger portsArray_Count;

@end

#pragma mark - Volume

typedef GPB_ENUM(Volume_FieldNumber) {
  Volume_FieldNumber_Name = 1,
  Volume_FieldNumber_SizeGb = 2,
  Volume_FieldNumber_Source = 3,
  Volume_FieldNumber_MountPoint = 6,
  Volume_FieldNumber_Readonly = 7,
};

/**
 * Attached volume request.
 **/
@interface Volume : GPBMessage

/**
 * OPTIONAL
 * Name of attached volume
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/**
 * REQUIRED
 * Minimum size
 **/
@property(nonatomic, readwrite) double sizeGb;

/**
 * OPTIONAL
 * Source volume, this would refer to an existing volume the execution engine
 * could identify. Leave blank if is to be a newly created volume
 * Volumes loaded from a source will be mounted as read only
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *source;

/**
 * REQUIRED
 * mount point for volume inside the docker container
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *mountPoint;

/** OPTIONAL default False */
@property(nonatomic, readwrite) BOOL readonly;

@end

#pragma mark - Resources

typedef GPB_ENUM(Resources_FieldNumber) {
  Resources_FieldNumber_MinimumCpuCores = 1,
  Resources_FieldNumber_Preemptible = 2,
  Resources_FieldNumber_MinimumRamGb = 3,
  Resources_FieldNumber_VolumesArray = 4,
  Resources_FieldNumber_ZonesArray = 5,
};

@interface Resources : GPBMessage

/**
 * OPTIONAL default 1
 * Minimum number of CPUs
 **/
@property(nonatomic, readwrite) uint32_t minimumCpuCores;

/**
 * Can schedule on resource that resource that can be preempted, like AWS Spot Instances
 * OPTIONAL default false
 **/
@property(nonatomic, readwrite) BOOL preemptible;

/**
 * REQUIRED
 * Minimum RAM required
 **/
@property(nonatomic, readwrite) double minimumRamGb;

/**
 * REQUIRED
 * Volumes to be mounted into the docker container
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Volume*> *volumesArray;
/** The number of items in @c volumesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger volumesArray_Count;

/**
 * OPTIONAL
 * optional scheduling information for systems where multiple compute zones are avalible
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *zonesArray;
/** The number of items in @c zonesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger zonesArray_Count;

@end

#pragma mark - Task

typedef GPB_ENUM(Task_FieldNumber) {
  Task_FieldNumber_Name = 1,
  Task_FieldNumber_ProjectId = 2,
  Task_FieldNumber_Description_p = 3,
  Task_FieldNumber_InputsArray = 4,
  Task_FieldNumber_OutputsArray = 5,
  Task_FieldNumber_Resources = 6,
  Task_FieldNumber_DockerArray = 8,
};

/**
 * The description of a task to be run
 **/
@interface Task : GPBMessage

/**
 * OPTIONAL
 * user name for task
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/**
 * OPTIONAL
 * parameter for execution engine to define/store group information
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

/**
 * OPTIONAL
 * free text description of task
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/**
 * REQUIRED
 * Files to be copied into system before tasks
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TaskParameter*> *inputsArray;
/** The number of items in @c inputsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inputsArray_Count;

/**
 * REQUIRED
 * Files to be copied out of the system after tasks
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TaskParameter*> *outputsArray;
/** The number of items in @c outputsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger outputsArray_Count;

/**
 * REQUIRED
 * Define required system resources to run job
 **/
@property(nonatomic, readwrite, strong, null_resettable) Resources *resources;
/** Test to see if @c resources has been set. */
@property(nonatomic, readwrite) BOOL hasResources;

/**
 * REQUIRED
 * An array of docker executions that will be run sequentially
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DockerExecutor*> *dockerArray;
/** The number of items in @c dockerArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dockerArray_Count;

@end

#pragma mark - JobListRequest

typedef GPB_ENUM(JobListRequest_FieldNumber) {
  JobListRequest_FieldNumber_ProjectId = 1,
  JobListRequest_FieldNumber_NamePrefix = 2,
  JobListRequest_FieldNumber_PageSize = 3,
  JobListRequest_FieldNumber_PageToken = 4,
};

/**
 * Request listing of jobs tracked by server
 **/
@interface JobListRequest : GPBMessage

/**
 * OPTIONAL
 * The name of the project to search for pipelines. Caller must have READ access to this project.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

/**
 * OPTIONAL
 * Pipelines with names that match this prefix should be returned. If unspecified, all pipelines in the project, up to pageSize, will be returned.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *namePrefix;

/**
 * OPTIONAL
 * Number of pipelines to return at once. Defaults to 256, and max is 2048.
 **/
@property(nonatomic, readwrite) uint32_t pageSize;

/**
 * OPTIONAL
 * Token to use to indicate where to start getting results. If unspecified, returns the first page of results.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *pageToken;

@end

#pragma mark - JobDesc

typedef GPB_ENUM(JobDesc_FieldNumber) {
  JobDesc_FieldNumber_JobId = 1,
  JobDesc_FieldNumber_State = 2,
};

/**
 * Small description of jobs, returned by server during listing
 **/
@interface JobDesc : GPBMessage

/** REQUIRED */
@property(nonatomic, readwrite, copy, null_resettable) NSString *jobId;

/** REQUIRED */
@property(nonatomic, readwrite) State state;

@end

/**
 * Fetches the raw value of a @c JobDesc's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t JobDesc_State_RawValue(JobDesc *message);
/**
 * Sets the raw value of an @c JobDesc's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetJobDesc_State_RawValue(JobDesc *message, int32_t value);

#pragma mark - JobListResponse

typedef GPB_ENUM(JobListResponse_FieldNumber) {
  JobListResponse_FieldNumber_JobsArray = 1,
  JobListResponse_FieldNumber_NextPageToken = 2,
};

/**
 * Return envelope
 **/
@interface JobListResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<JobDesc*> *jobsArray;
/** The number of items in @c jobsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger jobsArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *nextPageToken;

@end

#pragma mark - JobID

typedef GPB_ENUM(JobID_FieldNumber) {
  JobID_FieldNumber_Value = 1,
};

/**
 * ID of an instance of a Task
 **/
@interface JobID : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *value;

@end

#pragma mark - JobLog

typedef GPB_ENUM(JobLog_FieldNumber) {
  JobLog_FieldNumber_CmdArray = 1,
  JobLog_FieldNumber_StartTime = 2,
  JobLog_FieldNumber_EndTime = 3,
  JobLog_FieldNumber_Stdout = 4,
  JobLog_FieldNumber_Stderr = 5,
  JobLog_FieldNumber_ExitCode = 6,
  JobLog_FieldNumber_HostIp = 7,
  JobLog_FieldNumber_PortsArray = 8,
};

@interface JobLog : GPBMessage

/** The command line that was run */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *cmdArray;
/** The number of items in @c cmdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cmdArray_Count;

/** When the command was executed */
@property(nonatomic, readwrite, copy, null_resettable) NSString *startTime;

/** When the command completed */
@property(nonatomic, readwrite, copy, null_resettable) NSString *endTime;

/** Sample of stdout (not guaranteed to be entire log) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stdout;

/** Sample of stderr (not guaranteed to be entire log) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stderr;

/** Exit code of the program */
@property(nonatomic, readwrite) int32_t exitCode;

/** ip of worker host */
@property(nonatomic, readwrite, copy, null_resettable) NSString *hostIp;

/** ports bound from container to host */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Ports*> *portsArray;
/** The number of items in @c portsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger portsArray_Count;

@end

#pragma mark - FileLog

typedef GPB_ENUM(FileLog_FieldNumber) {
  FileLog_FieldNumber_Location = 1,
  FileLog_FieldNumber_Path = 2,
  FileLog_FieldNumber_Size = 3,
};

/**
 * Log of file output by workflow
 **/
@interface FileLog : GPBMessage

/**
 * REQUIRED
 * location in long term storage that the output file was copied to
 * is a url specific to the implementing
 * system. For example s3://my-object-store/file1 or gs://my-bucket/file2 or
 * file:///path/to/my/file
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *location;

/**
 * REQUIRED
 * path in the machine file system that originated the file
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *path;

/**
 * REQUIRED
 * Size of produced file
 **/
@property(nonatomic, readwrite) int64_t size;

@end

#pragma mark - Job

typedef GPB_ENUM(Job_FieldNumber) {
  Job_FieldNumber_JobId = 1,
  Job_FieldNumber_Metadata = 2,
  Job_FieldNumber_Task = 3,
  Job_FieldNumber_State = 4,
  Job_FieldNumber_LogsArray = 5,
  Job_FieldNumber_OutputsArray = 6,
};

/**
 * The description of the running instance of a task
 **/
@interface Job : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *jobId;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@property(nonatomic, readwrite, strong, null_resettable) Task *task;
/** Test to see if @c task has been set. */
@property(nonatomic, readwrite) BOOL hasTask;

@property(nonatomic, readwrite) State state;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<JobLog*> *logsArray;
/** The number of items in @c logsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger logsArray_Count;

/**
 * List of all files copied out to the object store as well as some basic
 * meta-data about them. This is an expanded list, if the task outputs
 * list directories, this record details every individual file
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<FileLog*> *outputsArray;
/** The number of items in @c outputsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger outputsArray_Count;

@end

/**
 * Fetches the raw value of a @c Job's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Job_State_RawValue(Job *message);
/**
 * Sets the raw value of an @c Job's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetJob_State_RawValue(Job *message, int32_t value);

#pragma mark - ServiceInfoRequest

/**
 * Blank request message for service request
 **/
@interface ServiceInfoRequest : GPBMessage

@end

#pragma mark - ServiceInfo

typedef GPB_ENUM(ServiceInfo_FieldNumber) {
  ServiceInfo_FieldNumber_StorageConfig = 1,
};

/**
 * Information about Task Execution Service
 * May include information related (but not limited to)
 * resource availability and storage system information
 **/
@interface ServiceInfo : GPBMessage

/**
 * System specific key/value pairs
 * Example for a shared file system based storage system:
 * storageType=sharedFile, baseDir=/path/to/shared/directory
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *storageConfig;
/** The number of items in @c storageConfig without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger storageConfig_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
