// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/task_execution.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "proto/TaskExecution.pbobjc.h"
 #import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TaskExecutionRoot

@implementation TaskExecutionRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - TaskExecutionRoot_FileDescriptor

static GPBFileDescriptor *TaskExecutionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"ga4gh_task_exec"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum State

GPBEnumDescriptor *State_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Queued\000Running\000Paused\000Complete\000E"
        "rror\000SystemError\000Canceled\000Initializing\000";
    static const int32_t values[] = {
        State_Unknown,
        State_Queued,
        State_Running,
        State_Paused,
        State_Complete,
        State_Error,
        State_SystemError,
        State_Canceled,
        State_Initializing,
    };
    static const char *extraTextFormatInfo = "\t\000\007\000\001\006\000\002\007\000\003\006\000\004\010\000\005\005\000\006\013\000\007\010\000\010\014\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(State)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:State_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL State_IsValidValue(int32_t value__) {
  switch (value__) {
    case State_Unknown:
    case State_Queued:
    case State_Running:
    case State_Paused:
    case State_Complete:
    case State_Error:
    case State_SystemError:
    case State_Canceled:
    case State_Initializing:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - TaskParameter

@implementation TaskParameter

@dynamic name;
@dynamic description_p;
@dynamic location;
@dynamic path;
@dynamic class_p;
@dynamic create;

typedef struct TaskParameter__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *description_p;
  NSString *location;
  NSString *path;
  NSString *class_p;
} TaskParameter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = TaskParameter_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TaskParameter__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = TaskParameter_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TaskParameter__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = NULL,
        .number = TaskParameter_FieldNumber_Location,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TaskParameter__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "path",
        .dataTypeSpecific.className = NULL,
        .number = TaskParameter_FieldNumber_Path,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TaskParameter__storage_, path),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "class_p",
        .dataTypeSpecific.className = NULL,
        .number = TaskParameter_FieldNumber_Class_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TaskParameter__storage_, class_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "create",
        .dataTypeSpecific.className = NULL,
        .number = TaskParameter_FieldNumber_Create,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TaskParameter class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TaskParameter__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Ports

@implementation Ports

@dynamic container;
@dynamic host;

typedef struct Ports__storage_ {
  uint32_t _has_storage_[1];
  int32_t container;
  int32_t host;
} Ports__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "container",
        .dataTypeSpecific.className = NULL,
        .number = Ports_FieldNumber_Container,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Ports__storage_, container),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "host",
        .dataTypeSpecific.className = NULL,
        .number = Ports_FieldNumber_Host,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Ports__storage_, host),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Ports class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Ports__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DockerExecutor

@implementation DockerExecutor

@dynamic imageName;
@dynamic cmdArray, cmdArray_Count;
@dynamic workdir;
@dynamic stdin;
@dynamic stdout;
@dynamic stderr;
@dynamic portsArray, portsArray_Count;

typedef struct DockerExecutor__storage_ {
  uint32_t _has_storage_[1];
  NSString *imageName;
  NSMutableArray *cmdArray;
  NSString *workdir;
  NSString *stdout;
  NSString *stderr;
  NSString *stdin;
  NSMutableArray *portsArray;
} DockerExecutor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imageName",
        .dataTypeSpecific.className = NULL,
        .number = DockerExecutor_FieldNumber_ImageName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DockerExecutor__storage_, imageName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cmdArray",
        .dataTypeSpecific.className = NULL,
        .number = DockerExecutor_FieldNumber_CmdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DockerExecutor__storage_, cmdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "workdir",
        .dataTypeSpecific.className = NULL,
        .number = DockerExecutor_FieldNumber_Workdir,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DockerExecutor__storage_, workdir),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stdout",
        .dataTypeSpecific.className = NULL,
        .number = DockerExecutor_FieldNumber_Stdout,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DockerExecutor__storage_, stdout),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stderr",
        .dataTypeSpecific.className = NULL,
        .number = DockerExecutor_FieldNumber_Stderr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DockerExecutor__storage_, stderr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stdin",
        .dataTypeSpecific.className = NULL,
        .number = DockerExecutor_FieldNumber_Stdin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DockerExecutor__storage_, stdin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "portsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Ports),
        .number = DockerExecutor_FieldNumber_PortsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DockerExecutor__storage_, portsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DockerExecutor class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DockerExecutor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Volume

@implementation Volume

@dynamic name;
@dynamic sizeGb;
@dynamic source;
@dynamic mountPoint;
@dynamic readonly;

typedef struct Volume__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *source;
  NSString *mountPoint;
  double sizeGb;
} Volume__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Volume_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Volume__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sizeGb",
        .dataTypeSpecific.className = NULL,
        .number = Volume_FieldNumber_SizeGb,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Volume__storage_, sizeGb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = Volume_FieldNumber_Source,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Volume__storage_, source),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mountPoint",
        .dataTypeSpecific.className = NULL,
        .number = Volume_FieldNumber_MountPoint,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Volume__storage_, mountPoint),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "readonly",
        .dataTypeSpecific.className = NULL,
        .number = Volume_FieldNumber_Readonly,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Volume class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Volume__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\006\000\006\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Resources

@implementation Resources

@dynamic minimumCpuCores;
@dynamic preemptible;
@dynamic minimumRamGb;
@dynamic volumesArray, volumesArray_Count;
@dynamic zonesArray, zonesArray_Count;

typedef struct Resources__storage_ {
  uint32_t _has_storage_[1];
  uint32_t minimumCpuCores;
  NSMutableArray *volumesArray;
  NSMutableArray *zonesArray;
  double minimumRamGb;
} Resources__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "minimumCpuCores",
        .dataTypeSpecific.className = NULL,
        .number = Resources_FieldNumber_MinimumCpuCores,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Resources__storage_, minimumCpuCores),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "preemptible",
        .dataTypeSpecific.className = NULL,
        .number = Resources_FieldNumber_Preemptible,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "minimumRamGb",
        .dataTypeSpecific.className = NULL,
        .number = Resources_FieldNumber_MinimumRamGb,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Resources__storage_, minimumRamGb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "volumesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Volume),
        .number = Resources_FieldNumber_VolumesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Resources__storage_, volumesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "zonesArray",
        .dataTypeSpecific.className = NULL,
        .number = Resources_FieldNumber_ZonesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Resources__storage_, zonesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Resources class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Resources__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\017\000\003\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Task

@implementation Task

@dynamic name;
@dynamic projectId;
@dynamic description_p;
@dynamic inputsArray, inputsArray_Count;
@dynamic outputsArray, outputsArray_Count;
@dynamic hasResources, resources;
@dynamic dockerArray, dockerArray_Count;

typedef struct Task__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *projectId;
  NSString *description_p;
  NSMutableArray *inputsArray;
  NSMutableArray *outputsArray;
  Resources *resources;
  NSMutableArray *dockerArray;
} Task__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Task_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Task__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "projectId",
        .dataTypeSpecific.className = NULL,
        .number = Task_FieldNumber_ProjectId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Task__storage_, projectId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Task_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Task__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inputsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TaskParameter),
        .number = Task_FieldNumber_InputsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Task__storage_, inputsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TaskParameter),
        .number = Task_FieldNumber_OutputsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Task__storage_, outputsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resources",
        .dataTypeSpecific.className = GPBStringifySymbol(Resources),
        .number = Task_FieldNumber_Resources,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Task__storage_, resources),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dockerArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DockerExecutor),
        .number = Task_FieldNumber_DockerArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Task__storage_, dockerArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Task class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Task__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JobListRequest

@implementation JobListRequest

@dynamic projectId;
@dynamic namePrefix;
@dynamic pageSize;
@dynamic pageToken;

typedef struct JobListRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t pageSize;
  NSString *projectId;
  NSString *namePrefix;
  NSString *pageToken;
} JobListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "projectId",
        .dataTypeSpecific.className = NULL,
        .number = JobListRequest_FieldNumber_ProjectId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JobListRequest__storage_, projectId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "namePrefix",
        .dataTypeSpecific.className = NULL,
        .number = JobListRequest_FieldNumber_NamePrefix,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JobListRequest__storage_, namePrefix),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = JobListRequest_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(JobListRequest__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageToken",
        .dataTypeSpecific.className = NULL,
        .number = JobListRequest_FieldNumber_PageToken,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(JobListRequest__storage_, pageToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JobListRequest class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JobListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\010A\000\002\n\000\003\010\000\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JobDesc

@implementation JobDesc

@dynamic jobId;
@dynamic state;

typedef struct JobDesc__storage_ {
  uint32_t _has_storage_[1];
  State state;
  NSString *jobId;
} JobDesc__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "jobId",
        .dataTypeSpecific.className = NULL,
        .number = JobDesc_FieldNumber_JobId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JobDesc__storage_, jobId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = State_EnumDescriptor,
        .number = JobDesc_FieldNumber_State,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JobDesc__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JobDesc class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JobDesc__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\004A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t JobDesc_State_RawValue(JobDesc *message) {
  GPBDescriptor *descriptor = [JobDesc descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:JobDesc_FieldNumber_State];
  return GPBGetMessageInt32Field(message, field);
}

void SetJobDesc_State_RawValue(JobDesc *message, int32_t value) {
  GPBDescriptor *descriptor = [JobDesc descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:JobDesc_FieldNumber_State];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - JobListResponse

@implementation JobListResponse

@dynamic jobsArray, jobsArray_Count;
@dynamic nextPageToken;

typedef struct JobListResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *jobsArray;
  NSString *nextPageToken;
} JobListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "jobsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(JobDesc),
        .number = JobListResponse_FieldNumber_JobsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(JobListResponse__storage_, jobsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextPageToken",
        .dataTypeSpecific.className = NULL,
        .number = JobListResponse_FieldNumber_NextPageToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JobListResponse__storage_, nextPageToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JobListResponse class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JobListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JobID

@implementation JobID

@dynamic value;

typedef struct JobID__storage_ {
  uint32_t _has_storage_[1];
  NSString *value;
} JobID__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = JobID_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JobID__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JobID class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JobID__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JobLog

@implementation JobLog

@dynamic cmdArray, cmdArray_Count;
@dynamic startTime;
@dynamic endTime;
@dynamic stdout;
@dynamic stderr;
@dynamic exitCode;
@dynamic hostIp;
@dynamic portsArray, portsArray_Count;

typedef struct JobLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t exitCode;
  NSMutableArray *cmdArray;
  NSString *startTime;
  NSString *endTime;
  NSString *stdout;
  NSString *stderr;
  NSString *hostIp;
  NSMutableArray *portsArray;
} JobLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cmdArray",
        .dataTypeSpecific.className = NULL,
        .number = JobLog_FieldNumber_CmdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(JobLog__storage_, cmdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = JobLog_FieldNumber_StartTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JobLog__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = JobLog_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JobLog__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stdout",
        .dataTypeSpecific.className = NULL,
        .number = JobLog_FieldNumber_Stdout,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(JobLog__storage_, stdout),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stderr",
        .dataTypeSpecific.className = NULL,
        .number = JobLog_FieldNumber_Stderr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(JobLog__storage_, stderr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exitCode",
        .dataTypeSpecific.className = NULL,
        .number = JobLog_FieldNumber_ExitCode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(JobLog__storage_, exitCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hostIp",
        .dataTypeSpecific.className = NULL,
        .number = JobLog_FieldNumber_HostIp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(JobLog__storage_, hostIp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "portsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Ports),
        .number = JobLog_FieldNumber_PortsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(JobLog__storage_, portsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JobLog class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JobLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\t\000\003\007\000\006\010\000\007\005A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FileLog

@implementation FileLog

@dynamic location;
@dynamic path;
@dynamic size;

typedef struct FileLog__storage_ {
  uint32_t _has_storage_[1];
  NSString *location;
  NSString *path;
  int64_t size;
} FileLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "location",
        .dataTypeSpecific.className = NULL,
        .number = FileLog_FieldNumber_Location,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FileLog__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "path",
        .dataTypeSpecific.className = NULL,
        .number = FileLog_FieldNumber_Path,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FileLog__storage_, path),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = FileLog_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FileLog__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FileLog class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FileLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Job

@implementation Job

@dynamic jobId;
@dynamic metadata, metadata_Count;
@dynamic hasTask, task;
@dynamic state;
@dynamic logsArray, logsArray_Count;
@dynamic outputsArray, outputsArray_Count;

typedef struct Job__storage_ {
  uint32_t _has_storage_[1];
  State state;
  NSString *jobId;
  NSMutableDictionary *metadata;
  Task *task;
  NSMutableArray *logsArray;
  NSMutableArray *outputsArray;
} Job__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "jobId",
        .dataTypeSpecific.className = NULL,
        .number = Job_FieldNumber_JobId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Job__storage_, jobId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = Job_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Job__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "task",
        .dataTypeSpecific.className = GPBStringifySymbol(Task),
        .number = Job_FieldNumber_Task,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Job__storage_, task),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = State_EnumDescriptor,
        .number = Job_FieldNumber_State,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Job__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "logsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(JobLog),
        .number = Job_FieldNumber_LogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Job__storage_, logsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FileLog),
        .number = Job_FieldNumber_OutputsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Job__storage_, outputsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Job class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Job__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\004A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Job_State_RawValue(Job *message) {
  GPBDescriptor *descriptor = [Job descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Job_FieldNumber_State];
  return GPBGetMessageInt32Field(message, field);
}

void SetJob_State_RawValue(Job *message, int32_t value) {
  GPBDescriptor *descriptor = [Job descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Job_FieldNumber_State];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ServiceInfoRequest

@implementation ServiceInfoRequest


typedef struct ServiceInfoRequest__storage_ {
  uint32_t _has_storage_[1];
} ServiceInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ServiceInfoRequest class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ServiceInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ServiceInfo

@implementation ServiceInfo

@dynamic storageConfig, storageConfig_Count;

typedef struct ServiceInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *storageConfig;
} ServiceInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "storageConfig",
        .dataTypeSpecific.className = NULL,
        .number = ServiceInfo_FieldNumber_StorageConfig,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ServiceInfo__storage_, storageConfig),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyString | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ServiceInfo class]
                                     rootClass:[TaskExecutionRoot class]
                                          file:TaskExecutionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ServiceInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
