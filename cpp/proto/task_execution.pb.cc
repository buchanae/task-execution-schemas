// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/task_execution.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/task_execution.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ga4gh_task_exec {

namespace {

const ::google::protobuf::Descriptor* TaskParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ports_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ports_reflection_ = NULL;
const ::google::protobuf::Descriptor* DockerExecutor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DockerExecutor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Volume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Volume_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resources_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resources_reflection_ = NULL;
const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobID_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* Job_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Job_reflection_ = NULL;
const ::google::protobuf::Descriptor* Job_MetadataEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServiceInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceInfo_StorageConfigEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* State_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto() {
  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/task_execution.proto");
  GOOGLE_CHECK(file != NULL);
  TaskParameter_descriptor_ = file->message_type(0);
  static const int TaskParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParameter, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParameter, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParameter, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParameter, class__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParameter, create_),
  };
  TaskParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskParameter_descriptor_,
      TaskParameter::internal_default_instance(),
      TaskParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParameter, _internal_metadata_));
  Ports_descriptor_ = file->message_type(1);
  static const int Ports_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ports, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ports, host_),
  };
  Ports_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ports_descriptor_,
      Ports::internal_default_instance(),
      Ports_offsets_,
      -1,
      -1,
      -1,
      sizeof(Ports),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ports, _internal_metadata_));
  DockerExecutor_descriptor_ = file->message_type(2);
  static const int DockerExecutor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerExecutor, imagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerExecutor, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerExecutor, workdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerExecutor, stdin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerExecutor, stdout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerExecutor, stderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerExecutor, ports_),
  };
  DockerExecutor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DockerExecutor_descriptor_,
      DockerExecutor::internal_default_instance(),
      DockerExecutor_offsets_,
      -1,
      -1,
      -1,
      sizeof(DockerExecutor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerExecutor, _internal_metadata_));
  Volume_descriptor_ = file->message_type(3);
  static const int Volume_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, sizegb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, mountpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, readonly_),
  };
  Volume_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Volume_descriptor_,
      Volume::internal_default_instance(),
      Volume_offsets_,
      -1,
      -1,
      -1,
      sizeof(Volume),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, _internal_metadata_));
  Resources_descriptor_ = file->message_type(4);
  static const int Resources_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resources, minimumcpucores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resources, preemptible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resources, minimumramgb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resources, volumes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resources, zones_),
  };
  Resources_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Resources_descriptor_,
      Resources::internal_default_instance(),
      Resources_offsets_,
      -1,
      -1,
      -1,
      sizeof(Resources),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resources, _internal_metadata_));
  Task_descriptor_ = file->message_type(5);
  static const int Task_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, docker_),
  };
  Task_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Task_descriptor_,
      Task::internal_default_instance(),
      Task_offsets_,
      -1,
      -1,
      -1,
      sizeof(Task),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _internal_metadata_));
  JobListRequest_descriptor_ = file->message_type(6);
  static const int JobListRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobListRequest, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobListRequest, nameprefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobListRequest, pagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobListRequest, pagetoken_),
  };
  JobListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JobListRequest_descriptor_,
      JobListRequest::internal_default_instance(),
      JobListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(JobListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobListRequest, _internal_metadata_));
  JobDesc_descriptor_ = file->message_type(7);
  static const int JobDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDesc, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDesc, state_),
  };
  JobDesc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JobDesc_descriptor_,
      JobDesc::internal_default_instance(),
      JobDesc_offsets_,
      -1,
      -1,
      -1,
      sizeof(JobDesc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDesc, _internal_metadata_));
  JobListResponse_descriptor_ = file->message_type(8);
  static const int JobListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobListResponse, jobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobListResponse, nextpagetoken_),
  };
  JobListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JobListResponse_descriptor_,
      JobListResponse::internal_default_instance(),
      JobListResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(JobListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobListResponse, _internal_metadata_));
  JobID_descriptor_ = file->message_type(9);
  static const int JobID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobID, value_),
  };
  JobID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JobID_descriptor_,
      JobID::internal_default_instance(),
      JobID_offsets_,
      -1,
      -1,
      -1,
      sizeof(JobID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobID, _internal_metadata_));
  JobLog_descriptor_ = file->message_type(10);
  static const int JobLog_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobLog, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobLog, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobLog, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobLog, stdout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobLog, stderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobLog, exitcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobLog, hostip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobLog, ports_),
  };
  JobLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JobLog_descriptor_,
      JobLog::internal_default_instance(),
      JobLog_offsets_,
      -1,
      -1,
      -1,
      sizeof(JobLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobLog, _internal_metadata_));
  FileLog_descriptor_ = file->message_type(11);
  static const int FileLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLog, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLog, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLog, size_),
  };
  FileLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileLog_descriptor_,
      FileLog::internal_default_instance(),
      FileLog_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLog, _internal_metadata_));
  Job_descriptor_ = file->message_type(12);
  static const int Job_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, logs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, outputs_),
  };
  Job_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Job_descriptor_,
      Job::internal_default_instance(),
      Job_offsets_,
      -1,
      -1,
      -1,
      sizeof(Job),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, _internal_metadata_));
  Job_MetadataEntry_descriptor_ = Job_descriptor_->nested_type(0);
  ServiceInfoRequest_descriptor_ = file->message_type(13);
  static const int ServiceInfoRequest_offsets_[1] = {
  };
  ServiceInfoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceInfoRequest_descriptor_,
      ServiceInfoRequest::internal_default_instance(),
      ServiceInfoRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServiceInfoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfoRequest, _internal_metadata_));
  ServiceInfo_descriptor_ = file->message_type(14);
  static const int ServiceInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, storageconfig_),
  };
  ServiceInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceInfo_descriptor_,
      ServiceInfo::internal_default_instance(),
      ServiceInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServiceInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, _internal_metadata_));
  ServiceInfo_StorageConfigEntry_descriptor_ = ServiceInfo_descriptor_->nested_type(0);
  State_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskParameter_descriptor_, TaskParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ports_descriptor_, Ports::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DockerExecutor_descriptor_, DockerExecutor::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Volume_descriptor_, Volume::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Resources_descriptor_, Resources::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Task_descriptor_, Task::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JobListRequest_descriptor_, JobListRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JobDesc_descriptor_, JobDesc::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JobListResponse_descriptor_, JobListResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JobID_descriptor_, JobID::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JobLog_descriptor_, JobLog::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileLog_descriptor_, FileLog::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Job_descriptor_, Job::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Job_MetadataEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Job_MetadataEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceInfoRequest_descriptor_, ServiceInfoRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceInfo_descriptor_, ServiceInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ServiceInfo_StorageConfigEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                ServiceInfo_StorageConfigEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto() {
  TaskParameter_default_instance_.Shutdown();
  delete TaskParameter_reflection_;
  Ports_default_instance_.Shutdown();
  delete Ports_reflection_;
  DockerExecutor_default_instance_.Shutdown();
  delete DockerExecutor_reflection_;
  Volume_default_instance_.Shutdown();
  delete Volume_reflection_;
  Resources_default_instance_.Shutdown();
  delete Resources_reflection_;
  Task_default_instance_.Shutdown();
  delete Task_reflection_;
  JobListRequest_default_instance_.Shutdown();
  delete JobListRequest_reflection_;
  JobDesc_default_instance_.Shutdown();
  delete JobDesc_reflection_;
  JobListResponse_default_instance_.Shutdown();
  delete JobListResponse_reflection_;
  JobID_default_instance_.Shutdown();
  delete JobID_reflection_;
  JobLog_default_instance_.Shutdown();
  delete JobLog_reflection_;
  FileLog_default_instance_.Shutdown();
  delete FileLog_reflection_;
  Job_default_instance_.Shutdown();
  delete Job_reflection_;
  ServiceInfoRequest_default_instance_.Shutdown();
  delete ServiceInfoRequest_reflection_;
  ServiceInfo_default_instance_.Shutdown();
  delete ServiceInfo_reflection_;
}

void protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  TaskParameter_default_instance_.DefaultConstruct();
  Ports_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DockerExecutor_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Volume_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Resources_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Task_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  JobListRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  JobDesc_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  JobListResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  JobID_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  JobLog_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FileLog_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Job_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ServiceInfoRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ServiceInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TaskParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  Ports_default_instance_.get_mutable()->InitAsDefaultInstance();
  DockerExecutor_default_instance_.get_mutable()->InitAsDefaultInstance();
  Volume_default_instance_.get_mutable()->InitAsDefaultInstance();
  Resources_default_instance_.get_mutable()->InitAsDefaultInstance();
  Task_default_instance_.get_mutable()->InitAsDefaultInstance();
  JobListRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  JobDesc_default_instance_.get_mutable()->InitAsDefaultInstance();
  JobListResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  JobID_default_instance_.get_mutable()->InitAsDefaultInstance();
  JobLog_default_instance_.get_mutable()->InitAsDefaultInstance();
  FileLog_default_instance_.get_mutable()->InitAsDefaultInstance();
  Job_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServiceInfoRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServiceInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_once_);
void protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_once_,
                 &protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl);
}
void protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032proto/task_execution.proto\022\017ga4gh_task"
    "_exec\032\034google/api/annotations.proto\"q\n\rT"
    "askParameter\022\014\n\004name\030\001 \001(\t\022\023\n\013descriptio"
    "n\030\002 \001(\t\022\020\n\010location\030\003 \001(\t\022\014\n\004path\030\004 \001(\t\022"
    "\r\n\005class\030\005 \001(\t\022\016\n\006create\030\006 \001(\010\"(\n\005Ports\022"
    "\021\n\tcontainer\030\001 \001(\005\022\014\n\004host\030\002 \001(\005\"\227\001\n\016Doc"
    "kerExecutor\022\021\n\timageName\030\001 \001(\t\022\013\n\003cmd\030\002 "
    "\003(\t\022\017\n\007workdir\030\003 \001(\t\022\r\n\005stdin\030\006 \001(\t\022\016\n\006s"
    "tdout\030\004 \001(\t\022\016\n\006stderr\030\005 \001(\t\022%\n\005ports\030\007 \003"
    "(\0132\026.ga4gh_task_exec.Ports\"\\\n\006Volume\022\014\n\004"
    "name\030\001 \001(\t\022\016\n\006sizeGb\030\002 \001(\001\022\016\n\006source\030\003 \001"
    "(\t\022\022\n\nmountPoint\030\006 \001(\t\022\020\n\010readonly\030\007 \001(\010"
    "\"\210\001\n\tResources\022\027\n\017minimumCpuCores\030\001 \001(\r\022"
    "\023\n\013preemptible\030\002 \001(\010\022\024\n\014minimumRamGb\030\003 \001"
    "(\001\022(\n\007volumes\030\004 \003(\0132\027.ga4gh_task_exec.Vo"
    "lume\022\r\n\005zones\030\005 \003(\t\"\375\001\n\004Task\022\014\n\004name\030\001 \001"
    "(\t\022\021\n\tprojectID\030\002 \001(\t\022\023\n\013description\030\003 \001"
    "(\t\022.\n\006inputs\030\004 \003(\0132\036.ga4gh_task_exec.Tas"
    "kParameter\022/\n\007outputs\030\005 \003(\0132\036.ga4gh_task"
    "_exec.TaskParameter\022-\n\tresources\030\006 \001(\0132\032"
    ".ga4gh_task_exec.Resources\022/\n\006docker\030\010 \003"
    "(\0132\037.ga4gh_task_exec.DockerExecutor\"\\\n\016J"
    "obListRequest\022\021\n\tprojectID\030\001 \001(\t\022\022\n\nname"
    "Prefix\030\002 \001(\t\022\020\n\010pageSize\030\003 \001(\r\022\021\n\tpageTo"
    "ken\030\004 \001(\t\"\?\n\007JobDesc\022\r\n\005jobID\030\001 \001(\t\022%\n\005s"
    "tate\030\002 \001(\0162\026.ga4gh_task_exec.State\"P\n\017Jo"
    "bListResponse\022&\n\004jobs\030\001 \003(\0132\030.ga4gh_task"
    "_exec.JobDesc\022\025\n\rnextPageToken\030\002 \001(\t\"\026\n\005"
    "JobID\022\r\n\005value\030\001 \001(\t\"\242\001\n\006JobLog\022\013\n\003cmd\030\001"
    " \003(\t\022\021\n\tstartTime\030\002 \001(\t\022\017\n\007endTime\030\003 \001(\t"
    "\022\016\n\006stdout\030\004 \001(\t\022\016\n\006stderr\030\005 \001(\t\022\020\n\010exit"
    "Code\030\006 \001(\005\022\016\n\006hostIP\030\007 \001(\t\022%\n\005ports\030\010 \003("
    "\0132\026.ga4gh_task_exec.Ports\"7\n\007FileLog\022\020\n\010"
    "location\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\022\014\n\004size\030\003 \001"
    "(\003\"\231\002\n\003Job\022\r\n\005jobID\030\001 \001(\t\0224\n\010metadata\030\002 "
    "\003(\0132\".ga4gh_task_exec.Job.MetadataEntry\022"
    "#\n\004task\030\003 \001(\0132\025.ga4gh_task_exec.Task\022%\n\005"
    "state\030\004 \001(\0162\026.ga4gh_task_exec.State\022%\n\004l"
    "ogs\030\005 \003(\0132\027.ga4gh_task_exec.JobLog\022)\n\007ou"
    "tputs\030\006 \003(\0132\030.ga4gh_task_exec.FileLog\032/\n"
    "\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
    "(\t:\0028\001\"\024\n\022ServiceInfoRequest\"\213\001\n\013Service"
    "Info\022F\n\rstorageConfig\030\001 \003(\0132/.ga4gh_task"
    "_exec.ServiceInfo.StorageConfigEntry\0324\n\022"
    "StorageConfigEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
    "\030\002 \001(\t:\0028\001*\203\001\n\005State\022\013\n\007Unknown\020\000\022\n\n\006Que"
    "ued\020\001\022\013\n\007Running\020\002\022\n\n\006Paused\020\003\022\014\n\010Comple"
    "te\020\004\022\t\n\005Error\020\005\022\017\n\013SystemError\020\006\022\014\n\010Canc"
    "eled\020\007\022\020\n\014Initializing\020\0102\325\003\n\013TaskService"
    "\022m\n\016GetServiceInfo\022#.ga4gh_task_exec.Ser"
    "viceInfoRequest\032\034.ga4gh_task_exec.Servic"
    "eInfo\"\030\202\323\344\223\002\022\022\020/v1/jobs-service\022M\n\007RunTa"
    "sk\022\025.ga4gh_task_exec.Task\032\026.ga4gh_task_e"
    "xec.JobID\"\023\202\323\344\223\002\r\"\010/v1/jobs:\001*\022_\n\010ListJo"
    "bs\022\037.ga4gh_task_exec.JobListRequest\032 .ga"
    "4gh_task_exec.JobListResponse\"\020\202\323\344\223\002\n\022\010/"
    "v1/jobs\022P\n\006GetJob\022\026.ga4gh_task_exec.JobI"
    "D\032\024.ga4gh_task_exec.Job\"\030\202\323\344\223\002\022\022\020/v1/job"
    "s/{value}\022U\n\tCancelJob\022\026.ga4gh_task_exec"
    ".JobID\032\026.ga4gh_task_exec.JobID\"\030\202\323\344\223\002\022*\020"
    "/v1/jobs/{value}b\006proto3", 2424);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/task_execution.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_once_);
void protobuf_AddDesc_proto_2ftask_5fexecution_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_once_,
                 &protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2ftask_5fexecution_2eproto {
  StaticDescriptorInitializer_proto_2ftask_5fexecution_2eproto() {
    protobuf_AddDesc_proto_2ftask_5fexecution_2eproto();
  }
} static_descriptor_initializer_proto_2ftask_5fexecution_2eproto_;
const ::google::protobuf::EnumDescriptor* State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}
bool State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskParameter::kNameFieldNumber;
const int TaskParameter::kDescriptionFieldNumber;
const int TaskParameter::kLocationFieldNumber;
const int TaskParameter::kPathFieldNumber;
const int TaskParameter::kClassFieldNumber;
const int TaskParameter::kCreateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskParameter::TaskParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.TaskParameter)
}

void TaskParameter::InitAsDefaultInstance() {
}

TaskParameter::TaskParameter(const TaskParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.TaskParameter)
}

void TaskParameter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_ = false;
  _cached_size_ = 0;
}

TaskParameter::~TaskParameter() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.TaskParameter)
  SharedDtor();
}

void TaskParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskParameter_descriptor_;
}

const TaskParameter& TaskParameter::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TaskParameter> TaskParameter_default_instance_;

TaskParameter* TaskParameter::New(::google::protobuf::Arena* arena) const {
  TaskParameter* n = new TaskParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.TaskParameter)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_ = false;
}

bool TaskParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.TaskParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.TaskParameter.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.TaskParameter.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // optional string location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.TaskParameter.location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_path;
        break;
      }

      // optional string path = 4;
      case 4: {
        if (tag == 34) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.TaskParameter.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_class;
        break;
      }

      // optional string class = 5;
      case 5: {
        if (tag == 42) {
         parse_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_().data(), this->class_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.TaskParameter.class"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_create;
        break;
      }

      // optional bool create = 6;
      case 6: {
        if (tag == 48) {
         parse_create:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.TaskParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.TaskParameter)
  return false;
#undef DO_
}

void TaskParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.TaskParameter)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.TaskParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.TaskParameter.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string location = 3;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.TaskParameter.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->location(), output);
  }

  // optional string path = 4;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.TaskParameter.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->path(), output);
  }

  // optional string class = 5;
  if (this->class_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_().data(), this->class_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.TaskParameter.class");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->class_(), output);
  }

  // optional bool create = 6;
  if (this->create() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->create(), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.TaskParameter)
}

::google::protobuf::uint8* TaskParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.TaskParameter)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.TaskParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.TaskParameter.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string location = 3;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.TaskParameter.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->location(), target);
  }

  // optional string path = 4;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.TaskParameter.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->path(), target);
  }

  // optional string class = 5;
  if (this->class_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_().data(), this->class_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.TaskParameter.class");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->class_(), target);
  }

  // optional bool create = 6;
  if (this->create() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->create(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.TaskParameter)
  return target;
}

size_t TaskParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.TaskParameter)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string location = 3;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // optional string path = 4;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional string class = 5;
  if (this->class_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_());
  }

  // optional bool create = 6;
  if (this->create() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.TaskParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.TaskParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.TaskParameter)
    UnsafeMergeFrom(*source);
  }
}

void TaskParameter::MergeFrom(const TaskParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.TaskParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TaskParameter::UnsafeMergeFrom(const TaskParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.class_().size() > 0) {

    class__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class__);
  }
  if (from.create() != 0) {
    set_create(from.create());
  }
}

void TaskParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.TaskParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskParameter::CopyFrom(const TaskParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.TaskParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TaskParameter::IsInitialized() const {

  return true;
}

void TaskParameter::Swap(TaskParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskParameter::InternalSwap(TaskParameter* other) {
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  location_.Swap(&other->location_);
  path_.Swap(&other->path_);
  class__.Swap(&other->class__);
  std::swap(create_, other->create_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskParameter_descriptor_;
  metadata.reflection = TaskParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskParameter

// optional string name = 1;
void TaskParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskParameter::name() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.TaskParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskParameter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.TaskParameter.name)
}
void TaskParameter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.TaskParameter.name)
}
void TaskParameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.TaskParameter.name)
}
::std::string* TaskParameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.TaskParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskParameter::release_name() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.TaskParameter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.TaskParameter.name)
}

// optional string description = 2;
void TaskParameter::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskParameter::description() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.TaskParameter.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskParameter::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.TaskParameter.description)
}
void TaskParameter::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.TaskParameter.description)
}
void TaskParameter::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.TaskParameter.description)
}
::std::string* TaskParameter::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.TaskParameter.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskParameter::release_description() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.TaskParameter.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskParameter::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.TaskParameter.description)
}

// optional string location = 3;
void TaskParameter::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskParameter::location() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.TaskParameter.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskParameter::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.TaskParameter.location)
}
void TaskParameter::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.TaskParameter.location)
}
void TaskParameter::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.TaskParameter.location)
}
::std::string* TaskParameter::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.TaskParameter.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskParameter::release_location() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.TaskParameter.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskParameter::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.TaskParameter.location)
}

// optional string path = 4;
void TaskParameter::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskParameter::path() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.TaskParameter.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskParameter::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.TaskParameter.path)
}
void TaskParameter::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.TaskParameter.path)
}
void TaskParameter::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.TaskParameter.path)
}
::std::string* TaskParameter::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.TaskParameter.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskParameter::release_path() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.TaskParameter.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskParameter::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.TaskParameter.path)
}

// optional string class = 5;
void TaskParameter::clear_class_() {
  class__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskParameter::class_() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.TaskParameter.class)
  return class__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskParameter::set_class_(const ::std::string& value) {
  
  class__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.TaskParameter.class)
}
void TaskParameter::set_class_(const char* value) {
  
  class__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.TaskParameter.class)
}
void TaskParameter::set_class_(const char* value, size_t size) {
  
  class__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.TaskParameter.class)
}
::std::string* TaskParameter::mutable_class_() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.TaskParameter.class)
  return class__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskParameter::release_class_() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.TaskParameter.class)
  
  return class__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskParameter::set_allocated_class_(::std::string* class_) {
  if (class_ != NULL) {
    
  } else {
    
  }
  class__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.TaskParameter.class)
}

// optional bool create = 6;
void TaskParameter::clear_create() {
  create_ = false;
}
bool TaskParameter::create() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.TaskParameter.create)
  return create_;
}
void TaskParameter::set_create(bool value) {
  
  create_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.TaskParameter.create)
}

inline const TaskParameter* TaskParameter::internal_default_instance() {
  return &TaskParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ports::kContainerFieldNumber;
const int Ports::kHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ports::Ports()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.Ports)
}

void Ports::InitAsDefaultInstance() {
}

Ports::Ports(const Ports& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.Ports)
}

void Ports::SharedCtor() {
  ::memset(&container_, 0, reinterpret_cast<char*>(&host_) -
    reinterpret_cast<char*>(&container_) + sizeof(host_));
  _cached_size_ = 0;
}

Ports::~Ports() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.Ports)
  SharedDtor();
}

void Ports::SharedDtor() {
}

void Ports::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ports::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ports_descriptor_;
}

const Ports& Ports::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Ports> Ports_default_instance_;

Ports* Ports::New(::google::protobuf::Arena* arena) const {
  Ports* n = new Ports;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ports::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.Ports)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Ports, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Ports*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(container_, host_);

#undef ZR_HELPER_
#undef ZR_

}

bool Ports::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.Ports)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 container = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_host;
        break;
      }

      // optional int32 host = 2;
      case 2: {
        if (tag == 16) {
         parse_host:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &host_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.Ports)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.Ports)
  return false;
#undef DO_
}

void Ports::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.Ports)
  // optional int32 container = 1;
  if (this->container() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->container(), output);
  }

  // optional int32 host = 2;
  if (this->host() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->host(), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.Ports)
}

::google::protobuf::uint8* Ports::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.Ports)
  // optional int32 container = 1;
  if (this->container() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->container(), target);
  }

  // optional int32 host = 2;
  if (this->host() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->host(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.Ports)
  return target;
}

size_t Ports::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.Ports)
  size_t total_size = 0;

  // optional int32 container = 1;
  if (this->container() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container());
  }

  // optional int32 host = 2;
  if (this->host() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->host());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ports::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.Ports)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Ports* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ports>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.Ports)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.Ports)
    UnsafeMergeFrom(*source);
  }
}

void Ports::MergeFrom(const Ports& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.Ports)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Ports::UnsafeMergeFrom(const Ports& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.container() != 0) {
    set_container(from.container());
  }
  if (from.host() != 0) {
    set_host(from.host());
  }
}

void Ports::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.Ports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ports::CopyFrom(const Ports& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.Ports)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Ports::IsInitialized() const {

  return true;
}

void Ports::Swap(Ports* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ports::InternalSwap(Ports* other) {
  std::swap(container_, other->container_);
  std::swap(host_, other->host_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ports::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ports_descriptor_;
  metadata.reflection = Ports_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ports

// optional int32 container = 1;
void Ports::clear_container() {
  container_ = 0;
}
::google::protobuf::int32 Ports::container() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Ports.container)
  return container_;
}
void Ports::set_container(::google::protobuf::int32 value) {
  
  container_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Ports.container)
}

// optional int32 host = 2;
void Ports::clear_host() {
  host_ = 0;
}
::google::protobuf::int32 Ports::host() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Ports.host)
  return host_;
}
void Ports::set_host(::google::protobuf::int32 value) {
  
  host_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Ports.host)
}

inline const Ports* Ports::internal_default_instance() {
  return &Ports_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DockerExecutor::kImageNameFieldNumber;
const int DockerExecutor::kCmdFieldNumber;
const int DockerExecutor::kWorkdirFieldNumber;
const int DockerExecutor::kStdinFieldNumber;
const int DockerExecutor::kStdoutFieldNumber;
const int DockerExecutor::kStderrFieldNumber;
const int DockerExecutor::kPortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DockerExecutor::DockerExecutor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.DockerExecutor)
}

void DockerExecutor::InitAsDefaultInstance() {
}

DockerExecutor::DockerExecutor(const DockerExecutor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.DockerExecutor)
}

void DockerExecutor::SharedCtor() {
  imagename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workdir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stdin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stdout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stderr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DockerExecutor::~DockerExecutor() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.DockerExecutor)
  SharedDtor();
}

void DockerExecutor::SharedDtor() {
  imagename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workdir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stdin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stdout_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stderr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DockerExecutor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DockerExecutor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DockerExecutor_descriptor_;
}

const DockerExecutor& DockerExecutor::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DockerExecutor> DockerExecutor_default_instance_;

DockerExecutor* DockerExecutor::New(::google::protobuf::Arena* arena) const {
  DockerExecutor* n = new DockerExecutor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DockerExecutor::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.DockerExecutor)
  imagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workdir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stdin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stdout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stderr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.Clear();
  ports_.Clear();
}

bool DockerExecutor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.DockerExecutor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string imageName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->imagename().data(), this->imagename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.DockerExecutor.imageName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cmd;
        break;
      }

      // repeated string cmd = 2;
      case 2: {
        if (tag == 18) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd(this->cmd_size() - 1).data(),
            this->cmd(this->cmd_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.DockerExecutor.cmd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cmd;
        if (input->ExpectTag(26)) goto parse_workdir;
        break;
      }

      // optional string workdir = 3;
      case 3: {
        if (tag == 26) {
         parse_workdir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workdir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->workdir().data(), this->workdir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.DockerExecutor.workdir"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stdout;
        break;
      }

      // optional string stdout = 4;
      case 4: {
        if (tag == 34) {
         parse_stdout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stdout()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stdout().data(), this->stdout().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.DockerExecutor.stdout"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stderr;
        break;
      }

      // optional string stderr = 5;
      case 5: {
        if (tag == 42) {
         parse_stderr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stderr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stderr().data(), this->stderr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.DockerExecutor.stderr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stdin;
        break;
      }

      // optional string stdin = 6;
      case 6: {
        if (tag == 50) {
         parse_stdin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stdin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stdin().data(), this->stdin().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.DockerExecutor.stdin"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ports;
        break;
      }

      // repeated .ga4gh_task_exec.Ports ports = 7;
      case 7: {
        if (tag == 58) {
         parse_ports:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_ports;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.DockerExecutor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.DockerExecutor)
  return false;
#undef DO_
}

void DockerExecutor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.DockerExecutor)
  // optional string imageName = 1;
  if (this->imagename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imagename().data(), this->imagename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.DockerExecutor.imageName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->imagename(), output);
  }

  // repeated string cmd = 2;
  for (int i = 0; i < this->cmd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd(i).data(), this->cmd(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.DockerExecutor.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cmd(i), output);
  }

  // optional string workdir = 3;
  if (this->workdir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->workdir().data(), this->workdir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.DockerExecutor.workdir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->workdir(), output);
  }

  // optional string stdout = 4;
  if (this->stdout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stdout().data(), this->stdout().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.DockerExecutor.stdout");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stdout(), output);
  }

  // optional string stderr = 5;
  if (this->stderr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stderr().data(), this->stderr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.DockerExecutor.stderr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stderr(), output);
  }

  // optional string stdin = 6;
  if (this->stdin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stdin().data(), this->stdin().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.DockerExecutor.stdin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->stdin(), output);
  }

  // repeated .ga4gh_task_exec.Ports ports = 7;
  for (unsigned int i = 0, n = this->ports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ports(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.DockerExecutor)
}

::google::protobuf::uint8* DockerExecutor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.DockerExecutor)
  // optional string imageName = 1;
  if (this->imagename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imagename().data(), this->imagename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.DockerExecutor.imageName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imagename(), target);
  }

  // repeated string cmd = 2;
  for (int i = 0; i < this->cmd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd(i).data(), this->cmd(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.DockerExecutor.cmd");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->cmd(i), target);
  }

  // optional string workdir = 3;
  if (this->workdir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->workdir().data(), this->workdir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.DockerExecutor.workdir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->workdir(), target);
  }

  // optional string stdout = 4;
  if (this->stdout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stdout().data(), this->stdout().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.DockerExecutor.stdout");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stdout(), target);
  }

  // optional string stderr = 5;
  if (this->stderr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stderr().data(), this->stderr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.DockerExecutor.stderr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stderr(), target);
  }

  // optional string stdin = 6;
  if (this->stdin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stdin().data(), this->stdin().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.DockerExecutor.stdin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stdin(), target);
  }

  // repeated .ga4gh_task_exec.Ports ports = 7;
  for (unsigned int i = 0, n = this->ports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->ports(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.DockerExecutor)
  return target;
}

size_t DockerExecutor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.DockerExecutor)
  size_t total_size = 0;

  // optional string imageName = 1;
  if (this->imagename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imagename());
  }

  // optional string workdir = 3;
  if (this->workdir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->workdir());
  }

  // optional string stdin = 6;
  if (this->stdin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stdin());
  }

  // optional string stdout = 4;
  if (this->stdout().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stdout());
  }

  // optional string stderr = 5;
  if (this->stderr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stderr());
  }

  // repeated string cmd = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cmd_size());
  for (int i = 0; i < this->cmd_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cmd(i));
  }

  // repeated .ga4gh_task_exec.Ports ports = 7;
  {
    unsigned int count = this->ports_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ports(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DockerExecutor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.DockerExecutor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DockerExecutor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DockerExecutor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.DockerExecutor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.DockerExecutor)
    UnsafeMergeFrom(*source);
  }
}

void DockerExecutor::MergeFrom(const DockerExecutor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.DockerExecutor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DockerExecutor::UnsafeMergeFrom(const DockerExecutor& from) {
  GOOGLE_DCHECK(&from != this);
  cmd_.UnsafeMergeFrom(from.cmd_);
  ports_.MergeFrom(from.ports_);
  if (from.imagename().size() > 0) {

    imagename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagename_);
  }
  if (from.workdir().size() > 0) {

    workdir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workdir_);
  }
  if (from.stdin().size() > 0) {

    stdin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stdin_);
  }
  if (from.stdout().size() > 0) {

    stdout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stdout_);
  }
  if (from.stderr().size() > 0) {

    stderr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stderr_);
  }
}

void DockerExecutor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.DockerExecutor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DockerExecutor::CopyFrom(const DockerExecutor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.DockerExecutor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DockerExecutor::IsInitialized() const {

  return true;
}

void DockerExecutor::Swap(DockerExecutor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DockerExecutor::InternalSwap(DockerExecutor* other) {
  imagename_.Swap(&other->imagename_);
  cmd_.UnsafeArenaSwap(&other->cmd_);
  workdir_.Swap(&other->workdir_);
  stdin_.Swap(&other->stdin_);
  stdout_.Swap(&other->stdout_);
  stderr_.Swap(&other->stderr_);
  ports_.UnsafeArenaSwap(&other->ports_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DockerExecutor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DockerExecutor_descriptor_;
  metadata.reflection = DockerExecutor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DockerExecutor

// optional string imageName = 1;
void DockerExecutor::clear_imagename() {
  imagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DockerExecutor::imagename() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.imageName)
  return imagename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DockerExecutor::set_imagename(const ::std::string& value) {
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.DockerExecutor.imageName)
}
void DockerExecutor::set_imagename(const char* value) {
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.DockerExecutor.imageName)
}
void DockerExecutor::set_imagename(const char* value, size_t size) {
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.DockerExecutor.imageName)
}
::std::string* DockerExecutor::mutable_imagename() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.imageName)
  return imagename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DockerExecutor::release_imagename() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.DockerExecutor.imageName)
  
  return imagename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DockerExecutor::set_allocated_imagename(::std::string* imagename) {
  if (imagename != NULL) {
    
  } else {
    
  }
  imagename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagename);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.DockerExecutor.imageName)
}

// repeated string cmd = 2;
int DockerExecutor::cmd_size() const {
  return cmd_.size();
}
void DockerExecutor::clear_cmd() {
  cmd_.Clear();
}
const ::std::string& DockerExecutor::cmd(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.cmd)
  return cmd_.Get(index);
}
::std::string* DockerExecutor::mutable_cmd(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.cmd)
  return cmd_.Mutable(index);
}
void DockerExecutor::set_cmd(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.DockerExecutor.cmd)
  cmd_.Mutable(index)->assign(value);
}
void DockerExecutor::set_cmd(int index, const char* value) {
  cmd_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.DockerExecutor.cmd)
}
void DockerExecutor::set_cmd(int index, const char* value, size_t size) {
  cmd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.DockerExecutor.cmd)
}
::std::string* DockerExecutor::add_cmd() {
  // @@protoc_insertion_point(field_add_mutable:ga4gh_task_exec.DockerExecutor.cmd)
  return cmd_.Add();
}
void DockerExecutor::add_cmd(const ::std::string& value) {
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.DockerExecutor.cmd)
}
void DockerExecutor::add_cmd(const char* value) {
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ga4gh_task_exec.DockerExecutor.cmd)
}
void DockerExecutor::add_cmd(const char* value, size_t size) {
  cmd_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ga4gh_task_exec.DockerExecutor.cmd)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DockerExecutor::cmd() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.DockerExecutor.cmd)
  return cmd_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DockerExecutor::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.DockerExecutor.cmd)
  return &cmd_;
}

// optional string workdir = 3;
void DockerExecutor::clear_workdir() {
  workdir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DockerExecutor::workdir() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.workdir)
  return workdir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DockerExecutor::set_workdir(const ::std::string& value) {
  
  workdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.DockerExecutor.workdir)
}
void DockerExecutor::set_workdir(const char* value) {
  
  workdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.DockerExecutor.workdir)
}
void DockerExecutor::set_workdir(const char* value, size_t size) {
  
  workdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.DockerExecutor.workdir)
}
::std::string* DockerExecutor::mutable_workdir() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.workdir)
  return workdir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DockerExecutor::release_workdir() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.DockerExecutor.workdir)
  
  return workdir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DockerExecutor::set_allocated_workdir(::std::string* workdir) {
  if (workdir != NULL) {
    
  } else {
    
  }
  workdir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workdir);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.DockerExecutor.workdir)
}

// optional string stdin = 6;
void DockerExecutor::clear_stdin() {
  stdin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DockerExecutor::stdin() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.stdin)
  return stdin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DockerExecutor::set_stdin(const ::std::string& value) {
  
  stdin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.DockerExecutor.stdin)
}
void DockerExecutor::set_stdin(const char* value) {
  
  stdin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.DockerExecutor.stdin)
}
void DockerExecutor::set_stdin(const char* value, size_t size) {
  
  stdin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.DockerExecutor.stdin)
}
::std::string* DockerExecutor::mutable_stdin() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.stdin)
  return stdin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DockerExecutor::release_stdin() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.DockerExecutor.stdin)
  
  return stdin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DockerExecutor::set_allocated_stdin(::std::string* stdin) {
  if (stdin != NULL) {
    
  } else {
    
  }
  stdin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stdin);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.DockerExecutor.stdin)
}

// optional string stdout = 4;
void DockerExecutor::clear_stdout() {
  stdout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DockerExecutor::stdout() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.stdout)
  return stdout_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DockerExecutor::set_stdout(const ::std::string& value) {
  
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.DockerExecutor.stdout)
}
void DockerExecutor::set_stdout(const char* value) {
  
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.DockerExecutor.stdout)
}
void DockerExecutor::set_stdout(const char* value, size_t size) {
  
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.DockerExecutor.stdout)
}
::std::string* DockerExecutor::mutable_stdout() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.stdout)
  return stdout_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DockerExecutor::release_stdout() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.DockerExecutor.stdout)
  
  return stdout_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DockerExecutor::set_allocated_stdout(::std::string* stdout) {
  if (stdout != NULL) {
    
  } else {
    
  }
  stdout_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stdout);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.DockerExecutor.stdout)
}

// optional string stderr = 5;
void DockerExecutor::clear_stderr() {
  stderr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DockerExecutor::stderr() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.stderr)
  return stderr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DockerExecutor::set_stderr(const ::std::string& value) {
  
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.DockerExecutor.stderr)
}
void DockerExecutor::set_stderr(const char* value) {
  
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.DockerExecutor.stderr)
}
void DockerExecutor::set_stderr(const char* value, size_t size) {
  
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.DockerExecutor.stderr)
}
::std::string* DockerExecutor::mutable_stderr() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.stderr)
  return stderr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DockerExecutor::release_stderr() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.DockerExecutor.stderr)
  
  return stderr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DockerExecutor::set_allocated_stderr(::std::string* stderr) {
  if (stderr != NULL) {
    
  } else {
    
  }
  stderr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stderr);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.DockerExecutor.stderr)
}

// repeated .ga4gh_task_exec.Ports ports = 7;
int DockerExecutor::ports_size() const {
  return ports_.size();
}
void DockerExecutor::clear_ports() {
  ports_.Clear();
}
const ::ga4gh_task_exec::Ports& DockerExecutor::ports(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.ports)
  return ports_.Get(index);
}
::ga4gh_task_exec::Ports* DockerExecutor::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.ports)
  return ports_.Mutable(index);
}
::ga4gh_task_exec::Ports* DockerExecutor::add_ports() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.DockerExecutor.ports)
  return ports_.Add();
}
::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports >*
DockerExecutor::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.DockerExecutor.ports)
  return &ports_;
}
const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports >&
DockerExecutor::ports() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.DockerExecutor.ports)
  return ports_;
}

inline const DockerExecutor* DockerExecutor::internal_default_instance() {
  return &DockerExecutor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Volume::kNameFieldNumber;
const int Volume::kSizeGbFieldNumber;
const int Volume::kSourceFieldNumber;
const int Volume::kMountPointFieldNumber;
const int Volume::kReadonlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Volume::Volume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.Volume)
}

void Volume::InitAsDefaultInstance() {
}

Volume::Volume(const Volume& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.Volume)
}

void Volume::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mountpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sizegb_, 0, reinterpret_cast<char*>(&readonly_) -
    reinterpret_cast<char*>(&sizegb_) + sizeof(readonly_));
  _cached_size_ = 0;
}

Volume::~Volume() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.Volume)
  SharedDtor();
}

void Volume::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mountpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Volume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Volume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Volume_descriptor_;
}

const Volume& Volume::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Volume> Volume_default_instance_;

Volume* Volume::New(::google::protobuf::Arena* arena) const {
  Volume* n = new Volume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Volume::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.Volume)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Volume, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Volume*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sizegb_, readonly_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mountpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Volume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.Volume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.Volume.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sizeGb;
        break;
      }

      // optional double sizeGb = 2;
      case 2: {
        if (tag == 17) {
         parse_sizeGb:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sizegb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_source;
        break;
      }

      // optional string source = 3;
      case 3: {
        if (tag == 26) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.Volume.source"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mountPoint;
        break;
      }

      // optional string mountPoint = 6;
      case 6: {
        if (tag == 50) {
         parse_mountPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mountpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mountpoint().data(), this->mountpoint().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.Volume.mountPoint"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_readonly;
        break;
      }

      // optional bool readonly = 7;
      case 7: {
        if (tag == 56) {
         parse_readonly:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &readonly_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.Volume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.Volume)
  return false;
#undef DO_
}

void Volume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.Volume)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Volume.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double sizeGb = 2;
  if (this->sizegb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sizegb(), output);
  }

  // optional string source = 3;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Volume.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source(), output);
  }

  // optional string mountPoint = 6;
  if (this->mountpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mountpoint().data(), this->mountpoint().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Volume.mountPoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mountpoint(), output);
  }

  // optional bool readonly = 7;
  if (this->readonly() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->readonly(), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.Volume)
}

::google::protobuf::uint8* Volume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.Volume)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Volume.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double sizeGb = 2;
  if (this->sizegb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sizegb(), target);
  }

  // optional string source = 3;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Volume.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source(), target);
  }

  // optional string mountPoint = 6;
  if (this->mountpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mountpoint().data(), this->mountpoint().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Volume.mountPoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mountpoint(), target);
  }

  // optional bool readonly = 7;
  if (this->readonly() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->readonly(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.Volume)
  return target;
}

size_t Volume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.Volume)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional double sizeGb = 2;
  if (this->sizegb() != 0) {
    total_size += 1 + 8;
  }

  // optional string source = 3;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // optional string mountPoint = 6;
  if (this->mountpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mountpoint());
  }

  // optional bool readonly = 7;
  if (this->readonly() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Volume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.Volume)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Volume* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Volume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.Volume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.Volume)
    UnsafeMergeFrom(*source);
  }
}

void Volume::MergeFrom(const Volume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.Volume)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Volume::UnsafeMergeFrom(const Volume& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sizegb() != 0) {
    set_sizegb(from.sizegb());
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.mountpoint().size() > 0) {

    mountpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mountpoint_);
  }
  if (from.readonly() != 0) {
    set_readonly(from.readonly());
  }
}

void Volume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.Volume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Volume::CopyFrom(const Volume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.Volume)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Volume::IsInitialized() const {

  return true;
}

void Volume::Swap(Volume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Volume::InternalSwap(Volume* other) {
  name_.Swap(&other->name_);
  std::swap(sizegb_, other->sizegb_);
  source_.Swap(&other->source_);
  mountpoint_.Swap(&other->mountpoint_);
  std::swap(readonly_, other->readonly_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Volume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Volume_descriptor_;
  metadata.reflection = Volume_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Volume

// optional string name = 1;
void Volume::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Volume::name() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Volume.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Volume::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Volume.name)
}
void Volume::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Volume.name)
}
void Volume::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Volume.name)
}
::std::string* Volume::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Volume.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Volume::release_name() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Volume.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Volume::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Volume.name)
}

// optional double sizeGb = 2;
void Volume::clear_sizegb() {
  sizegb_ = 0;
}
double Volume::sizegb() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Volume.sizeGb)
  return sizegb_;
}
void Volume::set_sizegb(double value) {
  
  sizegb_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Volume.sizeGb)
}

// optional string source = 3;
void Volume::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Volume::source() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Volume.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Volume::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Volume.source)
}
void Volume::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Volume.source)
}
void Volume::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Volume.source)
}
::std::string* Volume::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Volume.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Volume::release_source() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Volume.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Volume::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Volume.source)
}

// optional string mountPoint = 6;
void Volume::clear_mountpoint() {
  mountpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Volume::mountpoint() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Volume.mountPoint)
  return mountpoint_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Volume::set_mountpoint(const ::std::string& value) {
  
  mountpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Volume.mountPoint)
}
void Volume::set_mountpoint(const char* value) {
  
  mountpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Volume.mountPoint)
}
void Volume::set_mountpoint(const char* value, size_t size) {
  
  mountpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Volume.mountPoint)
}
::std::string* Volume::mutable_mountpoint() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Volume.mountPoint)
  return mountpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Volume::release_mountpoint() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Volume.mountPoint)
  
  return mountpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Volume::set_allocated_mountpoint(::std::string* mountpoint) {
  if (mountpoint != NULL) {
    
  } else {
    
  }
  mountpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mountpoint);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Volume.mountPoint)
}

// optional bool readonly = 7;
void Volume::clear_readonly() {
  readonly_ = false;
}
bool Volume::readonly() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Volume.readonly)
  return readonly_;
}
void Volume::set_readonly(bool value) {
  
  readonly_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Volume.readonly)
}

inline const Volume* Volume::internal_default_instance() {
  return &Volume_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resources::kMinimumCpuCoresFieldNumber;
const int Resources::kPreemptibleFieldNumber;
const int Resources::kMinimumRamGbFieldNumber;
const int Resources::kVolumesFieldNumber;
const int Resources::kZonesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resources::Resources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.Resources)
}

void Resources::InitAsDefaultInstance() {
}

Resources::Resources(const Resources& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.Resources)
}

void Resources::SharedCtor() {
  ::memset(&minimumcpucores_, 0, reinterpret_cast<char*>(&minimumramgb_) -
    reinterpret_cast<char*>(&minimumcpucores_) + sizeof(minimumramgb_));
  _cached_size_ = 0;
}

Resources::~Resources() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.Resources)
  SharedDtor();
}

void Resources::SharedDtor() {
}

void Resources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resources::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resources_descriptor_;
}

const Resources& Resources::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Resources> Resources_default_instance_;

Resources* Resources::New(::google::protobuf::Arena* arena) const {
  Resources* n = new Resources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Resources::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.Resources)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Resources, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Resources*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(minimumcpucores_, minimumramgb_);

#undef ZR_HELPER_
#undef ZR_

  volumes_.Clear();
  zones_.Clear();
}

bool Resources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.Resources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 minimumCpuCores = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minimumcpucores_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_preemptible;
        break;
      }

      // optional bool preemptible = 2;
      case 2: {
        if (tag == 16) {
         parse_preemptible:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preemptible_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_minimumRamGb;
        break;
      }

      // optional double minimumRamGb = 3;
      case 3: {
        if (tag == 25) {
         parse_minimumRamGb:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimumramgb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_volumes;
        break;
      }

      // repeated .ga4gh_task_exec.Volume volumes = 4;
      case 4: {
        if (tag == 34) {
         parse_volumes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_volumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_volumes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_volumes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_zones;
        break;
      }

      // repeated string zones = 5;
      case 5: {
        if (tag == 42) {
         parse_zones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_zones()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zones(this->zones_size() - 1).data(),
            this->zones(this->zones_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.Resources.zones"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_zones;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.Resources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.Resources)
  return false;
#undef DO_
}

void Resources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.Resources)
  // optional uint32 minimumCpuCores = 1;
  if (this->minimumcpucores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->minimumcpucores(), output);
  }

  // optional bool preemptible = 2;
  if (this->preemptible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->preemptible(), output);
  }

  // optional double minimumRamGb = 3;
  if (this->minimumramgb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minimumramgb(), output);
  }

  // repeated .ga4gh_task_exec.Volume volumes = 4;
  for (unsigned int i = 0, n = this->volumes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->volumes(i), output);
  }

  // repeated string zones = 5;
  for (int i = 0; i < this->zones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zones(i).data(), this->zones(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Resources.zones");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->zones(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.Resources)
}

::google::protobuf::uint8* Resources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.Resources)
  // optional uint32 minimumCpuCores = 1;
  if (this->minimumcpucores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->minimumcpucores(), target);
  }

  // optional bool preemptible = 2;
  if (this->preemptible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->preemptible(), target);
  }

  // optional double minimumRamGb = 3;
  if (this->minimumramgb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minimumramgb(), target);
  }

  // repeated .ga4gh_task_exec.Volume volumes = 4;
  for (unsigned int i = 0, n = this->volumes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->volumes(i), false, target);
  }

  // repeated string zones = 5;
  for (int i = 0; i < this->zones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zones(i).data(), this->zones(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Resources.zones");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->zones(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.Resources)
  return target;
}

size_t Resources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.Resources)
  size_t total_size = 0;

  // optional uint32 minimumCpuCores = 1;
  if (this->minimumcpucores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minimumcpucores());
  }

  // optional bool preemptible = 2;
  if (this->preemptible() != 0) {
    total_size += 1 + 1;
  }

  // optional double minimumRamGb = 3;
  if (this->minimumramgb() != 0) {
    total_size += 1 + 8;
  }

  // repeated .ga4gh_task_exec.Volume volumes = 4;
  {
    unsigned int count = this->volumes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volumes(i));
    }
  }

  // repeated string zones = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->zones_size());
  for (int i = 0; i < this->zones_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->zones(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.Resources)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Resources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Resources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.Resources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.Resources)
    UnsafeMergeFrom(*source);
  }
}

void Resources::MergeFrom(const Resources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.Resources)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Resources::UnsafeMergeFrom(const Resources& from) {
  GOOGLE_DCHECK(&from != this);
  volumes_.MergeFrom(from.volumes_);
  zones_.UnsafeMergeFrom(from.zones_);
  if (from.minimumcpucores() != 0) {
    set_minimumcpucores(from.minimumcpucores());
  }
  if (from.preemptible() != 0) {
    set_preemptible(from.preemptible());
  }
  if (from.minimumramgb() != 0) {
    set_minimumramgb(from.minimumramgb());
  }
}

void Resources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.Resources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resources::CopyFrom(const Resources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.Resources)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Resources::IsInitialized() const {

  return true;
}

void Resources::Swap(Resources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resources::InternalSwap(Resources* other) {
  std::swap(minimumcpucores_, other->minimumcpucores_);
  std::swap(preemptible_, other->preemptible_);
  std::swap(minimumramgb_, other->minimumramgb_);
  volumes_.UnsafeArenaSwap(&other->volumes_);
  zones_.UnsafeArenaSwap(&other->zones_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Resources::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resources_descriptor_;
  metadata.reflection = Resources_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Resources

// optional uint32 minimumCpuCores = 1;
void Resources::clear_minimumcpucores() {
  minimumcpucores_ = 0u;
}
::google::protobuf::uint32 Resources::minimumcpucores() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Resources.minimumCpuCores)
  return minimumcpucores_;
}
void Resources::set_minimumcpucores(::google::protobuf::uint32 value) {
  
  minimumcpucores_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Resources.minimumCpuCores)
}

// optional bool preemptible = 2;
void Resources::clear_preemptible() {
  preemptible_ = false;
}
bool Resources::preemptible() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Resources.preemptible)
  return preemptible_;
}
void Resources::set_preemptible(bool value) {
  
  preemptible_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Resources.preemptible)
}

// optional double minimumRamGb = 3;
void Resources::clear_minimumramgb() {
  minimumramgb_ = 0;
}
double Resources::minimumramgb() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Resources.minimumRamGb)
  return minimumramgb_;
}
void Resources::set_minimumramgb(double value) {
  
  minimumramgb_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Resources.minimumRamGb)
}

// repeated .ga4gh_task_exec.Volume volumes = 4;
int Resources::volumes_size() const {
  return volumes_.size();
}
void Resources::clear_volumes() {
  volumes_.Clear();
}
const ::ga4gh_task_exec::Volume& Resources::volumes(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Resources.volumes)
  return volumes_.Get(index);
}
::ga4gh_task_exec::Volume* Resources::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Resources.volumes)
  return volumes_.Mutable(index);
}
::ga4gh_task_exec::Volume* Resources::add_volumes() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Resources.volumes)
  return volumes_.Add();
}
::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Volume >*
Resources::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Resources.volumes)
  return &volumes_;
}
const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Volume >&
Resources::volumes() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Resources.volumes)
  return volumes_;
}

// repeated string zones = 5;
int Resources::zones_size() const {
  return zones_.size();
}
void Resources::clear_zones() {
  zones_.Clear();
}
const ::std::string& Resources::zones(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Resources.zones)
  return zones_.Get(index);
}
::std::string* Resources::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Resources.zones)
  return zones_.Mutable(index);
}
void Resources::set_zones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Resources.zones)
  zones_.Mutable(index)->assign(value);
}
void Resources::set_zones(int index, const char* value) {
  zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Resources.zones)
}
void Resources::set_zones(int index, const char* value, size_t size) {
  zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Resources.zones)
}
::std::string* Resources::add_zones() {
  // @@protoc_insertion_point(field_add_mutable:ga4gh_task_exec.Resources.zones)
  return zones_.Add();
}
void Resources::add_zones(const ::std::string& value) {
  zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Resources.zones)
}
void Resources::add_zones(const char* value) {
  zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ga4gh_task_exec.Resources.zones)
}
void Resources::add_zones(const char* value, size_t size) {
  zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ga4gh_task_exec.Resources.zones)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Resources::zones() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Resources.zones)
  return zones_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Resources::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Resources.zones)
  return &zones_;
}

inline const Resources* Resources::internal_default_instance() {
  return &Resources_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kNameFieldNumber;
const int Task::kProjectIDFieldNumber;
const int Task::kDescriptionFieldNumber;
const int Task::kInputsFieldNumber;
const int Task::kOutputsFieldNumber;
const int Task::kResourcesFieldNumber;
const int Task::kDockerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.Task)
}

void Task::InitAsDefaultInstance() {
  resources_ = const_cast< ::ga4gh_task_exec::Resources*>(
      ::ga4gh_task_exec::Resources::internal_default_instance());
}

Task::Task(const Task& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.Task)
}

void Task::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projectid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resources_ = NULL;
  _cached_size_ = 0;
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projectid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Task_default_instance_.get()) {
    delete resources_;
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Task> Task_default_instance_;

Task* Task::New(::google::protobuf::Arena* arena) const {
  Task* n = new Task;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.Task)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && resources_ != NULL) delete resources_;
  resources_ = NULL;
  inputs_.Clear();
  outputs_.Clear();
  docker_.Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.Task.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_projectID;
        break;
      }

      // optional string projectID = 2;
      case 2: {
        if (tag == 18) {
         parse_projectID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projectid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->projectid().data(), this->projectid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.Task.projectID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.Task.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_inputs;
        break;
      }

      // repeated .ga4gh_task_exec.TaskParameter inputs = 4;
      case 4: {
        if (tag == 34) {
         parse_inputs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_inputs;
        if (input->ExpectTag(42)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ga4gh_task_exec.TaskParameter outputs = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_resources;
        break;
      }

      // optional .ga4gh_task_exec.Resources resources = 6;
      case 6: {
        if (tag == 50) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_docker;
        break;
      }

      // repeated .ga4gh_task_exec.DockerExecutor docker = 8;
      case 8: {
        if (tag == 66) {
         parse_docker:
          DO_(input->IncrementRecursionDepth());
         parse_loop_docker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_docker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_docker;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.Task)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Task.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string projectID = 2;
  if (this->projectid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->projectid().data(), this->projectid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Task.projectID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->projectid(), output);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Task.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // repeated .ga4gh_task_exec.TaskParameter inputs = 4;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->inputs(i), output);
  }

  // repeated .ga4gh_task_exec.TaskParameter outputs = 5;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->outputs(i), output);
  }

  // optional .ga4gh_task_exec.Resources resources = 6;
  if (this->has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->resources_, output);
  }

  // repeated .ga4gh_task_exec.DockerExecutor docker = 8;
  for (unsigned int i = 0, n = this->docker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->docker(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.Task)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Task.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string projectID = 2;
  if (this->projectid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->projectid().data(), this->projectid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Task.projectID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->projectid(), target);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Task.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // repeated .ga4gh_task_exec.TaskParameter inputs = 4;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->inputs(i), false, target);
  }

  // repeated .ga4gh_task_exec.TaskParameter outputs = 5;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->outputs(i), false, target);
  }

  // optional .ga4gh_task_exec.Resources resources = 6;
  if (this->has_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->resources_, false, target);
  }

  // repeated .ga4gh_task_exec.DockerExecutor docker = 8;
  for (unsigned int i = 0, n = this->docker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->docker(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.Task)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string projectID = 2;
  if (this->projectid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->projectid());
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional .ga4gh_task_exec.Resources resources = 6;
  if (this->has_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resources_);
  }

  // repeated .ga4gh_task_exec.TaskParameter inputs = 4;
  {
    unsigned int count = this->inputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputs(i));
    }
  }

  // repeated .ga4gh_task_exec.TaskParameter outputs = 5;
  {
    unsigned int count = this->outputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputs(i));
    }
  }

  // repeated .ga4gh_task_exec.DockerExecutor docker = 8;
  {
    unsigned int count = this->docker_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docker(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.Task)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Task* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.Task)
    UnsafeMergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.Task)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Task::UnsafeMergeFrom(const Task& from) {
  GOOGLE_DCHECK(&from != this);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  docker_.MergeFrom(from.docker_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.projectid().size() > 0) {

    projectid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projectid_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_resources()) {
    mutable_resources()->::ga4gh_task_exec::Resources::MergeFrom(from.resources());
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.Task)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Task::IsInitialized() const {

  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  name_.Swap(&other->name_);
  projectid_.Swap(&other->projectid_);
  description_.Swap(&other->description_);
  inputs_.UnsafeArenaSwap(&other->inputs_);
  outputs_.UnsafeArenaSwap(&other->outputs_);
  std::swap(resources_, other->resources_);
  docker_.UnsafeArenaSwap(&other->docker_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Task

// optional string name = 1;
void Task::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Task::name() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Task.name)
}
void Task::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Task.name)
}
void Task::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Task.name)
}
::std::string* Task::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Task::release_name() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Task.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Task.name)
}

// optional string projectID = 2;
void Task::clear_projectid() {
  projectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Task::projectid() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.projectID)
  return projectid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_projectid(const ::std::string& value) {
  
  projectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Task.projectID)
}
void Task::set_projectid(const char* value) {
  
  projectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Task.projectID)
}
void Task::set_projectid(const char* value, size_t size) {
  
  projectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Task.projectID)
}
::std::string* Task::mutable_projectid() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.projectID)
  return projectid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Task::release_projectid() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Task.projectID)
  
  return projectid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_allocated_projectid(::std::string* projectid) {
  if (projectid != NULL) {
    
  } else {
    
  }
  projectid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projectid);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Task.projectID)
}

// optional string description = 3;
void Task::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Task::description() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Task.description)
}
void Task::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Task.description)
}
void Task::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Task.description)
}
::std::string* Task::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Task::release_description() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Task.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Task.description)
}

// repeated .ga4gh_task_exec.TaskParameter inputs = 4;
int Task::inputs_size() const {
  return inputs_.size();
}
void Task::clear_inputs() {
  inputs_.Clear();
}
const ::ga4gh_task_exec::TaskParameter& Task::inputs(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.inputs)
  return inputs_.Get(index);
}
::ga4gh_task_exec::TaskParameter* Task::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.inputs)
  return inputs_.Mutable(index);
}
::ga4gh_task_exec::TaskParameter* Task::add_inputs() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Task.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter >*
Task::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Task.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter >&
Task::inputs() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Task.inputs)
  return inputs_;
}

// repeated .ga4gh_task_exec.TaskParameter outputs = 5;
int Task::outputs_size() const {
  return outputs_.size();
}
void Task::clear_outputs() {
  outputs_.Clear();
}
const ::ga4gh_task_exec::TaskParameter& Task::outputs(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.outputs)
  return outputs_.Get(index);
}
::ga4gh_task_exec::TaskParameter* Task::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.outputs)
  return outputs_.Mutable(index);
}
::ga4gh_task_exec::TaskParameter* Task::add_outputs() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Task.outputs)
  return outputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter >*
Task::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Task.outputs)
  return &outputs_;
}
const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter >&
Task::outputs() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Task.outputs)
  return outputs_;
}

// optional .ga4gh_task_exec.Resources resources = 6;
bool Task::has_resources() const {
  return this != internal_default_instance() && resources_ != NULL;
}
void Task::clear_resources() {
  if (GetArenaNoVirtual() == NULL && resources_ != NULL) delete resources_;
  resources_ = NULL;
}
const ::ga4gh_task_exec::Resources& Task::resources() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.resources)
  return resources_ != NULL ? *resources_
                         : *::ga4gh_task_exec::Resources::internal_default_instance();
}
::ga4gh_task_exec::Resources* Task::mutable_resources() {
  
  if (resources_ == NULL) {
    resources_ = new ::ga4gh_task_exec::Resources;
  }
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.resources)
  return resources_;
}
::ga4gh_task_exec::Resources* Task::release_resources() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Task.resources)
  
  ::ga4gh_task_exec::Resources* temp = resources_;
  resources_ = NULL;
  return temp;
}
void Task::set_allocated_resources(::ga4gh_task_exec::Resources* resources) {
  delete resources_;
  resources_ = resources;
  if (resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Task.resources)
}

// repeated .ga4gh_task_exec.DockerExecutor docker = 8;
int Task::docker_size() const {
  return docker_.size();
}
void Task::clear_docker() {
  docker_.Clear();
}
const ::ga4gh_task_exec::DockerExecutor& Task::docker(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.docker)
  return docker_.Get(index);
}
::ga4gh_task_exec::DockerExecutor* Task::mutable_docker(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.docker)
  return docker_.Mutable(index);
}
::ga4gh_task_exec::DockerExecutor* Task::add_docker() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Task.docker)
  return docker_.Add();
}
::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::DockerExecutor >*
Task::mutable_docker() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Task.docker)
  return &docker_;
}
const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::DockerExecutor >&
Task::docker() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Task.docker)
  return docker_;
}

inline const Task* Task::internal_default_instance() {
  return &Task_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobListRequest::kProjectIDFieldNumber;
const int JobListRequest::kNamePrefixFieldNumber;
const int JobListRequest::kPageSizeFieldNumber;
const int JobListRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobListRequest::JobListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.JobListRequest)
}

void JobListRequest::InitAsDefaultInstance() {
}

JobListRequest::JobListRequest(const JobListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.JobListRequest)
}

void JobListRequest::SharedCtor() {
  projectid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nameprefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagesize_ = 0u;
  _cached_size_ = 0;
}

JobListRequest::~JobListRequest() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.JobListRequest)
  SharedDtor();
}

void JobListRequest::SharedDtor() {
  projectid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nameprefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JobListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobListRequest_descriptor_;
}

const JobListRequest& JobListRequest::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<JobListRequest> JobListRequest_default_instance_;

JobListRequest* JobListRequest::New(::google::protobuf::Arena* arena) const {
  JobListRequest* n = new JobListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.JobListRequest)
  projectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nameprefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagesize_ = 0u;
  pagetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool JobListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.JobListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string projectID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projectid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->projectid().data(), this->projectid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.JobListRequest.projectID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_namePrefix;
        break;
      }

      // optional string namePrefix = 2;
      case 2: {
        if (tag == 18) {
         parse_namePrefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameprefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nameprefix().data(), this->nameprefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.JobListRequest.namePrefix"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pageSize;
        break;
      }

      // optional uint32 pageSize = 3;
      case 3: {
        if (tag == 24) {
         parse_pageSize:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagesize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pageToken;
        break;
      }

      // optional string pageToken = 4;
      case 4: {
        if (tag == 34) {
         parse_pageToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagetoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pagetoken().data(), this->pagetoken().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.JobListRequest.pageToken"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.JobListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.JobListRequest)
  return false;
#undef DO_
}

void JobListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.JobListRequest)
  // optional string projectID = 1;
  if (this->projectid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->projectid().data(), this->projectid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobListRequest.projectID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->projectid(), output);
  }

  // optional string namePrefix = 2;
  if (this->nameprefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nameprefix().data(), this->nameprefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobListRequest.namePrefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nameprefix(), output);
  }

  // optional uint32 pageSize = 3;
  if (this->pagesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pagesize(), output);
  }

  // optional string pageToken = 4;
  if (this->pagetoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pagetoken().data(), this->pagetoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobListRequest.pageToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pagetoken(), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.JobListRequest)
}

::google::protobuf::uint8* JobListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.JobListRequest)
  // optional string projectID = 1;
  if (this->projectid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->projectid().data(), this->projectid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobListRequest.projectID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->projectid(), target);
  }

  // optional string namePrefix = 2;
  if (this->nameprefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nameprefix().data(), this->nameprefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobListRequest.namePrefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nameprefix(), target);
  }

  // optional uint32 pageSize = 3;
  if (this->pagesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pagesize(), target);
  }

  // optional string pageToken = 4;
  if (this->pagetoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pagetoken().data(), this->pagetoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobListRequest.pageToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pagetoken(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.JobListRequest)
  return target;
}

size_t JobListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.JobListRequest)
  size_t total_size = 0;

  // optional string projectID = 1;
  if (this->projectid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->projectid());
  }

  // optional string namePrefix = 2;
  if (this->nameprefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nameprefix());
  }

  // optional uint32 pageSize = 3;
  if (this->pagesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pagesize());
  }

  // optional string pageToken = 4;
  if (this->pagetoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pagetoken());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.JobListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JobListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.JobListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.JobListRequest)
    UnsafeMergeFrom(*source);
  }
}

void JobListRequest::MergeFrom(const JobListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.JobListRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void JobListRequest::UnsafeMergeFrom(const JobListRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.projectid().size() > 0) {

    projectid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projectid_);
  }
  if (from.nameprefix().size() > 0) {

    nameprefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nameprefix_);
  }
  if (from.pagesize() != 0) {
    set_pagesize(from.pagesize());
  }
  if (from.pagetoken().size() > 0) {

    pagetoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetoken_);
  }
}

void JobListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.JobListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobListRequest::CopyFrom(const JobListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.JobListRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool JobListRequest::IsInitialized() const {

  return true;
}

void JobListRequest::Swap(JobListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobListRequest::InternalSwap(JobListRequest* other) {
  projectid_.Swap(&other->projectid_);
  nameprefix_.Swap(&other->nameprefix_);
  std::swap(pagesize_, other->pagesize_);
  pagetoken_.Swap(&other->pagetoken_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobListRequest_descriptor_;
  metadata.reflection = JobListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobListRequest

// optional string projectID = 1;
void JobListRequest::clear_projectid() {
  projectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobListRequest::projectid() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobListRequest.projectID)
  return projectid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobListRequest::set_projectid(const ::std::string& value) {
  
  projectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobListRequest.projectID)
}
void JobListRequest::set_projectid(const char* value) {
  
  projectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobListRequest.projectID)
}
void JobListRequest::set_projectid(const char* value, size_t size) {
  
  projectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobListRequest.projectID)
}
::std::string* JobListRequest::mutable_projectid() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobListRequest.projectID)
  return projectid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobListRequest::release_projectid() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobListRequest.projectID)
  
  return projectid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobListRequest::set_allocated_projectid(::std::string* projectid) {
  if (projectid != NULL) {
    
  } else {
    
  }
  projectid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projectid);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobListRequest.projectID)
}

// optional string namePrefix = 2;
void JobListRequest::clear_nameprefix() {
  nameprefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobListRequest::nameprefix() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobListRequest.namePrefix)
  return nameprefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobListRequest::set_nameprefix(const ::std::string& value) {
  
  nameprefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobListRequest.namePrefix)
}
void JobListRequest::set_nameprefix(const char* value) {
  
  nameprefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobListRequest.namePrefix)
}
void JobListRequest::set_nameprefix(const char* value, size_t size) {
  
  nameprefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobListRequest.namePrefix)
}
::std::string* JobListRequest::mutable_nameprefix() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobListRequest.namePrefix)
  return nameprefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobListRequest::release_nameprefix() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobListRequest.namePrefix)
  
  return nameprefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobListRequest::set_allocated_nameprefix(::std::string* nameprefix) {
  if (nameprefix != NULL) {
    
  } else {
    
  }
  nameprefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameprefix);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobListRequest.namePrefix)
}

// optional uint32 pageSize = 3;
void JobListRequest::clear_pagesize() {
  pagesize_ = 0u;
}
::google::protobuf::uint32 JobListRequest::pagesize() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobListRequest.pageSize)
  return pagesize_;
}
void JobListRequest::set_pagesize(::google::protobuf::uint32 value) {
  
  pagesize_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobListRequest.pageSize)
}

// optional string pageToken = 4;
void JobListRequest::clear_pagetoken() {
  pagetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobListRequest::pagetoken() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobListRequest.pageToken)
  return pagetoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobListRequest::set_pagetoken(const ::std::string& value) {
  
  pagetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobListRequest.pageToken)
}
void JobListRequest::set_pagetoken(const char* value) {
  
  pagetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobListRequest.pageToken)
}
void JobListRequest::set_pagetoken(const char* value, size_t size) {
  
  pagetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobListRequest.pageToken)
}
::std::string* JobListRequest::mutable_pagetoken() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobListRequest.pageToken)
  return pagetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobListRequest::release_pagetoken() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobListRequest.pageToken)
  
  return pagetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobListRequest::set_allocated_pagetoken(::std::string* pagetoken) {
  if (pagetoken != NULL) {
    
  } else {
    
  }
  pagetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pagetoken);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobListRequest.pageToken)
}

inline const JobListRequest* JobListRequest::internal_default_instance() {
  return &JobListRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobDesc::kJobIDFieldNumber;
const int JobDesc::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobDesc::JobDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.JobDesc)
}

void JobDesc::InitAsDefaultInstance() {
}

JobDesc::JobDesc(const JobDesc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.JobDesc)
}

void JobDesc::SharedCtor() {
  jobid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _cached_size_ = 0;
}

JobDesc::~JobDesc() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.JobDesc)
  SharedDtor();
}

void JobDesc::SharedDtor() {
  jobid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JobDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobDesc_descriptor_;
}

const JobDesc& JobDesc::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<JobDesc> JobDesc_default_instance_;

JobDesc* JobDesc::New(::google::protobuf::Arena* arena) const {
  JobDesc* n = new JobDesc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.JobDesc)
  jobid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

bool JobDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.JobDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string jobID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jobid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jobid().data(), this->jobid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.JobDesc.jobID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .ga4gh_task_exec.State state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::ga4gh_task_exec::State >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.JobDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.JobDesc)
  return false;
#undef DO_
}

void JobDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.JobDesc)
  // optional string jobID = 1;
  if (this->jobid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jobid().data(), this->jobid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobDesc.jobID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->jobid(), output);
  }

  // optional .ga4gh_task_exec.State state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.JobDesc)
}

::google::protobuf::uint8* JobDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.JobDesc)
  // optional string jobID = 1;
  if (this->jobid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jobid().data(), this->jobid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobDesc.jobID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->jobid(), target);
  }

  // optional .ga4gh_task_exec.State state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.JobDesc)
  return target;
}

size_t JobDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.JobDesc)
  size_t total_size = 0;

  // optional string jobID = 1;
  if (this->jobid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jobid());
  }

  // optional .ga4gh_task_exec.State state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.JobDesc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JobDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.JobDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.JobDesc)
    UnsafeMergeFrom(*source);
  }
}

void JobDesc::MergeFrom(const JobDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.JobDesc)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void JobDesc::UnsafeMergeFrom(const JobDesc& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.jobid().size() > 0) {

    jobid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jobid_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void JobDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.JobDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobDesc::CopyFrom(const JobDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.JobDesc)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool JobDesc::IsInitialized() const {

  return true;
}

void JobDesc::Swap(JobDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobDesc::InternalSwap(JobDesc* other) {
  jobid_.Swap(&other->jobid_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobDesc_descriptor_;
  metadata.reflection = JobDesc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobDesc

// optional string jobID = 1;
void JobDesc::clear_jobid() {
  jobid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobDesc::jobid() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobDesc.jobID)
  return jobid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobDesc::set_jobid(const ::std::string& value) {
  
  jobid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobDesc.jobID)
}
void JobDesc::set_jobid(const char* value) {
  
  jobid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobDesc.jobID)
}
void JobDesc::set_jobid(const char* value, size_t size) {
  
  jobid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobDesc.jobID)
}
::std::string* JobDesc::mutable_jobid() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobDesc.jobID)
  return jobid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobDesc::release_jobid() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobDesc.jobID)
  
  return jobid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobDesc::set_allocated_jobid(::std::string* jobid) {
  if (jobid != NULL) {
    
  } else {
    
  }
  jobid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jobid);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobDesc.jobID)
}

// optional .ga4gh_task_exec.State state = 2;
void JobDesc::clear_state() {
  state_ = 0;
}
::ga4gh_task_exec::State JobDesc::state() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobDesc.state)
  return static_cast< ::ga4gh_task_exec::State >(state_);
}
void JobDesc::set_state(::ga4gh_task_exec::State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobDesc.state)
}

inline const JobDesc* JobDesc::internal_default_instance() {
  return &JobDesc_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobListResponse::kJobsFieldNumber;
const int JobListResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobListResponse::JobListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.JobListResponse)
}

void JobListResponse::InitAsDefaultInstance() {
}

JobListResponse::JobListResponse(const JobListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.JobListResponse)
}

void JobListResponse::SharedCtor() {
  nextpagetoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

JobListResponse::~JobListResponse() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.JobListResponse)
  SharedDtor();
}

void JobListResponse::SharedDtor() {
  nextpagetoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JobListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobListResponse_descriptor_;
}

const JobListResponse& JobListResponse::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<JobListResponse> JobListResponse_default_instance_;

JobListResponse* JobListResponse::New(::google::protobuf::Arena* arena) const {
  JobListResponse* n = new JobListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.JobListResponse)
  nextpagetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobs_.Clear();
}

bool JobListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.JobListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ga4gh_task_exec.JobDesc jobs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_jobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_jobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_jobs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_nextPageToken;
        break;
      }

      // optional string nextPageToken = 2;
      case 2: {
        if (tag == 18) {
         parse_nextPageToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nextpagetoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nextpagetoken().data(), this->nextpagetoken().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.JobListResponse.nextPageToken"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.JobListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.JobListResponse)
  return false;
#undef DO_
}

void JobListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.JobListResponse)
  // repeated .ga4gh_task_exec.JobDesc jobs = 1;
  for (unsigned int i = 0, n = this->jobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jobs(i), output);
  }

  // optional string nextPageToken = 2;
  if (this->nextpagetoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nextpagetoken().data(), this->nextpagetoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobListResponse.nextPageToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nextpagetoken(), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.JobListResponse)
}

::google::protobuf::uint8* JobListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.JobListResponse)
  // repeated .ga4gh_task_exec.JobDesc jobs = 1;
  for (unsigned int i = 0, n = this->jobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->jobs(i), false, target);
  }

  // optional string nextPageToken = 2;
  if (this->nextpagetoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nextpagetoken().data(), this->nextpagetoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobListResponse.nextPageToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nextpagetoken(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.JobListResponse)
  return target;
}

size_t JobListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.JobListResponse)
  size_t total_size = 0;

  // optional string nextPageToken = 2;
  if (this->nextpagetoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nextpagetoken());
  }

  // repeated .ga4gh_task_exec.JobDesc jobs = 1;
  {
    unsigned int count = this->jobs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jobs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.JobListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JobListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.JobListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.JobListResponse)
    UnsafeMergeFrom(*source);
  }
}

void JobListResponse::MergeFrom(const JobListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.JobListResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void JobListResponse::UnsafeMergeFrom(const JobListResponse& from) {
  GOOGLE_DCHECK(&from != this);
  jobs_.MergeFrom(from.jobs_);
  if (from.nextpagetoken().size() > 0) {

    nextpagetoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nextpagetoken_);
  }
}

void JobListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.JobListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobListResponse::CopyFrom(const JobListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.JobListResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool JobListResponse::IsInitialized() const {

  return true;
}

void JobListResponse::Swap(JobListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobListResponse::InternalSwap(JobListResponse* other) {
  jobs_.UnsafeArenaSwap(&other->jobs_);
  nextpagetoken_.Swap(&other->nextpagetoken_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobListResponse_descriptor_;
  metadata.reflection = JobListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobListResponse

// repeated .ga4gh_task_exec.JobDesc jobs = 1;
int JobListResponse::jobs_size() const {
  return jobs_.size();
}
void JobListResponse::clear_jobs() {
  jobs_.Clear();
}
const ::ga4gh_task_exec::JobDesc& JobListResponse::jobs(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobListResponse.jobs)
  return jobs_.Get(index);
}
::ga4gh_task_exec::JobDesc* JobListResponse::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobListResponse.jobs)
  return jobs_.Mutable(index);
}
::ga4gh_task_exec::JobDesc* JobListResponse::add_jobs() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.JobListResponse.jobs)
  return jobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobDesc >*
JobListResponse::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.JobListResponse.jobs)
  return &jobs_;
}
const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobDesc >&
JobListResponse::jobs() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.JobListResponse.jobs)
  return jobs_;
}

// optional string nextPageToken = 2;
void JobListResponse::clear_nextpagetoken() {
  nextpagetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobListResponse::nextpagetoken() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobListResponse.nextPageToken)
  return nextpagetoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobListResponse::set_nextpagetoken(const ::std::string& value) {
  
  nextpagetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobListResponse.nextPageToken)
}
void JobListResponse::set_nextpagetoken(const char* value) {
  
  nextpagetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobListResponse.nextPageToken)
}
void JobListResponse::set_nextpagetoken(const char* value, size_t size) {
  
  nextpagetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobListResponse.nextPageToken)
}
::std::string* JobListResponse::mutable_nextpagetoken() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobListResponse.nextPageToken)
  return nextpagetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobListResponse::release_nextpagetoken() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobListResponse.nextPageToken)
  
  return nextpagetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobListResponse::set_allocated_nextpagetoken(::std::string* nextpagetoken) {
  if (nextpagetoken != NULL) {
    
  } else {
    
  }
  nextpagetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nextpagetoken);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobListResponse.nextPageToken)
}

inline const JobListResponse* JobListResponse::internal_default_instance() {
  return &JobListResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobID::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobID::JobID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.JobID)
}

void JobID::InitAsDefaultInstance() {
}

JobID::JobID(const JobID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.JobID)
}

void JobID::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

JobID::~JobID() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.JobID)
  SharedDtor();
}

void JobID::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JobID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobID_descriptor_;
}

const JobID& JobID::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<JobID> JobID_default_instance_;

JobID* JobID::New(::google::protobuf::Arena* arena) const {
  JobID* n = new JobID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobID::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.JobID)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool JobID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.JobID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.JobID.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.JobID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.JobID)
  return false;
#undef DO_
}

void JobID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.JobID)
  // optional string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobID.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.JobID)
}

::google::protobuf::uint8* JobID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.JobID)
  // optional string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobID.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.JobID)
  return target;
}

size_t JobID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.JobID)
  size_t total_size = 0;

  // optional string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.JobID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JobID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.JobID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.JobID)
    UnsafeMergeFrom(*source);
  }
}

void JobID::MergeFrom(const JobID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.JobID)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void JobID::UnsafeMergeFrom(const JobID& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void JobID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.JobID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobID::CopyFrom(const JobID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.JobID)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool JobID::IsInitialized() const {

  return true;
}

void JobID::Swap(JobID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobID::InternalSwap(JobID* other) {
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobID_descriptor_;
  metadata.reflection = JobID_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobID

// optional string value = 1;
void JobID::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobID::value() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobID.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobID::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobID.value)
}
void JobID::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobID.value)
}
void JobID::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobID.value)
}
::std::string* JobID::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobID.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobID::release_value() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobID.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobID::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobID.value)
}

inline const JobID* JobID::internal_default_instance() {
  return &JobID_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobLog::kCmdFieldNumber;
const int JobLog::kStartTimeFieldNumber;
const int JobLog::kEndTimeFieldNumber;
const int JobLog::kStdoutFieldNumber;
const int JobLog::kStderrFieldNumber;
const int JobLog::kExitCodeFieldNumber;
const int JobLog::kHostIPFieldNumber;
const int JobLog::kPortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobLog::JobLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.JobLog)
}

void JobLog::InitAsDefaultInstance() {
}

JobLog::JobLog(const JobLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.JobLog)
}

void JobLog::SharedCtor() {
  starttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stdout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stderr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exitcode_ = 0;
  _cached_size_ = 0;
}

JobLog::~JobLog() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.JobLog)
  SharedDtor();
}

void JobLog::SharedDtor() {
  starttime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stdout_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stderr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JobLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobLog_descriptor_;
}

const JobLog& JobLog::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<JobLog> JobLog_default_instance_;

JobLog* JobLog::New(::google::protobuf::Arena* arena) const {
  JobLog* n = new JobLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobLog::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.JobLog)
  starttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stdout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stderr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exitcode_ = 0;
  hostip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.Clear();
  ports_.Clear();
}

bool JobLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.JobLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string cmd = 1;
      case 1: {
        if (tag == 10) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd(this->cmd_size() - 1).data(),
            this->cmd(this->cmd_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.JobLog.cmd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cmd;
        if (input->ExpectTag(18)) goto parse_startTime;
        break;
      }

      // optional string startTime = 2;
      case 2: {
        if (tag == 18) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.JobLog.startTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_endTime;
        break;
      }

      // optional string endTime = 3;
      case 3: {
        if (tag == 26) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.JobLog.endTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stdout;
        break;
      }

      // optional string stdout = 4;
      case 4: {
        if (tag == 34) {
         parse_stdout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stdout()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stdout().data(), this->stdout().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.JobLog.stdout"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stderr;
        break;
      }

      // optional string stderr = 5;
      case 5: {
        if (tag == 42) {
         parse_stderr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stderr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stderr().data(), this->stderr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.JobLog.stderr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exitCode;
        break;
      }

      // optional int32 exitCode = 6;
      case 6: {
        if (tag == 48) {
         parse_exitCode:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exitcode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_hostIP;
        break;
      }

      // optional string hostIP = 7;
      case 7: {
        if (tag == 58) {
         parse_hostIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostip().data(), this->hostip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.JobLog.hostIP"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ports;
        break;
      }

      // repeated .ga4gh_task_exec.Ports ports = 8;
      case 8: {
        if (tag == 66) {
         parse_ports:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_ports;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.JobLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.JobLog)
  return false;
#undef DO_
}

void JobLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.JobLog)
  // repeated string cmd = 1;
  for (int i = 0; i < this->cmd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd(i).data(), this->cmd(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobLog.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(i), output);
  }

  // optional string startTime = 2;
  if (this->starttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobLog.startTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->starttime(), output);
  }

  // optional string endTime = 3;
  if (this->endtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobLog.endTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->endtime(), output);
  }

  // optional string stdout = 4;
  if (this->stdout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stdout().data(), this->stdout().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobLog.stdout");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stdout(), output);
  }

  // optional string stderr = 5;
  if (this->stderr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stderr().data(), this->stderr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobLog.stderr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stderr(), output);
  }

  // optional int32 exitCode = 6;
  if (this->exitcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exitcode(), output);
  }

  // optional string hostIP = 7;
  if (this->hostip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostip().data(), this->hostip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobLog.hostIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->hostip(), output);
  }

  // repeated .ga4gh_task_exec.Ports ports = 8;
  for (unsigned int i = 0, n = this->ports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ports(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.JobLog)
}

::google::protobuf::uint8* JobLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.JobLog)
  // repeated string cmd = 1;
  for (int i = 0; i < this->cmd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd(i).data(), this->cmd(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobLog.cmd");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->cmd(i), target);
  }

  // optional string startTime = 2;
  if (this->starttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobLog.startTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->starttime(), target);
  }

  // optional string endTime = 3;
  if (this->endtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobLog.endTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->endtime(), target);
  }

  // optional string stdout = 4;
  if (this->stdout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stdout().data(), this->stdout().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobLog.stdout");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stdout(), target);
  }

  // optional string stderr = 5;
  if (this->stderr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stderr().data(), this->stderr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobLog.stderr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stderr(), target);
  }

  // optional int32 exitCode = 6;
  if (this->exitcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exitcode(), target);
  }

  // optional string hostIP = 7;
  if (this->hostip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostip().data(), this->hostip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.JobLog.hostIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->hostip(), target);
  }

  // repeated .ga4gh_task_exec.Ports ports = 8;
  for (unsigned int i = 0, n = this->ports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->ports(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.JobLog)
  return target;
}

size_t JobLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.JobLog)
  size_t total_size = 0;

  // optional string startTime = 2;
  if (this->starttime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->starttime());
  }

  // optional string endTime = 3;
  if (this->endtime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->endtime());
  }

  // optional string stdout = 4;
  if (this->stdout().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stdout());
  }

  // optional string stderr = 5;
  if (this->stderr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stderr());
  }

  // optional int32 exitCode = 6;
  if (this->exitcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exitcode());
  }

  // optional string hostIP = 7;
  if (this->hostip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostip());
  }

  // repeated string cmd = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cmd_size());
  for (int i = 0; i < this->cmd_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cmd(i));
  }

  // repeated .ga4gh_task_exec.Ports ports = 8;
  {
    unsigned int count = this->ports_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ports(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.JobLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JobLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.JobLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.JobLog)
    UnsafeMergeFrom(*source);
  }
}

void JobLog::MergeFrom(const JobLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.JobLog)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void JobLog::UnsafeMergeFrom(const JobLog& from) {
  GOOGLE_DCHECK(&from != this);
  cmd_.UnsafeMergeFrom(from.cmd_);
  ports_.MergeFrom(from.ports_);
  if (from.starttime().size() > 0) {

    starttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.starttime_);
  }
  if (from.endtime().size() > 0) {

    endtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endtime_);
  }
  if (from.stdout().size() > 0) {

    stdout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stdout_);
  }
  if (from.stderr().size() > 0) {

    stderr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stderr_);
  }
  if (from.exitcode() != 0) {
    set_exitcode(from.exitcode());
  }
  if (from.hostip().size() > 0) {

    hostip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostip_);
  }
}

void JobLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.JobLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobLog::CopyFrom(const JobLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.JobLog)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool JobLog::IsInitialized() const {

  return true;
}

void JobLog::Swap(JobLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobLog::InternalSwap(JobLog* other) {
  cmd_.UnsafeArenaSwap(&other->cmd_);
  starttime_.Swap(&other->starttime_);
  endtime_.Swap(&other->endtime_);
  stdout_.Swap(&other->stdout_);
  stderr_.Swap(&other->stderr_);
  std::swap(exitcode_, other->exitcode_);
  hostip_.Swap(&other->hostip_);
  ports_.UnsafeArenaSwap(&other->ports_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobLog_descriptor_;
  metadata.reflection = JobLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobLog

// repeated string cmd = 1;
int JobLog::cmd_size() const {
  return cmd_.size();
}
void JobLog::clear_cmd() {
  cmd_.Clear();
}
const ::std::string& JobLog::cmd(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.cmd)
  return cmd_.Get(index);
}
::std::string* JobLog::mutable_cmd(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.cmd)
  return cmd_.Mutable(index);
}
void JobLog::set_cmd(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.cmd)
  cmd_.Mutable(index)->assign(value);
}
void JobLog::set_cmd(int index, const char* value) {
  cmd_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobLog.cmd)
}
void JobLog::set_cmd(int index, const char* value, size_t size) {
  cmd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobLog.cmd)
}
::std::string* JobLog::add_cmd() {
  // @@protoc_insertion_point(field_add_mutable:ga4gh_task_exec.JobLog.cmd)
  return cmd_.Add();
}
void JobLog::add_cmd(const ::std::string& value) {
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.JobLog.cmd)
}
void JobLog::add_cmd(const char* value) {
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ga4gh_task_exec.JobLog.cmd)
}
void JobLog::add_cmd(const char* value, size_t size) {
  cmd_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ga4gh_task_exec.JobLog.cmd)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
JobLog::cmd() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.JobLog.cmd)
  return cmd_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
JobLog::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.JobLog.cmd)
  return &cmd_;
}

// optional string startTime = 2;
void JobLog::clear_starttime() {
  starttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobLog::starttime() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.startTime)
  return starttime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobLog::set_starttime(const ::std::string& value) {
  
  starttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.startTime)
}
void JobLog::set_starttime(const char* value) {
  
  starttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobLog.startTime)
}
void JobLog::set_starttime(const char* value, size_t size) {
  
  starttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobLog.startTime)
}
::std::string* JobLog::mutable_starttime() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.startTime)
  return starttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobLog::release_starttime() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobLog.startTime)
  
  return starttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobLog::set_allocated_starttime(::std::string* starttime) {
  if (starttime != NULL) {
    
  } else {
    
  }
  starttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), starttime);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobLog.startTime)
}

// optional string endTime = 3;
void JobLog::clear_endtime() {
  endtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobLog::endtime() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.endTime)
  return endtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobLog::set_endtime(const ::std::string& value) {
  
  endtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.endTime)
}
void JobLog::set_endtime(const char* value) {
  
  endtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobLog.endTime)
}
void JobLog::set_endtime(const char* value, size_t size) {
  
  endtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobLog.endTime)
}
::std::string* JobLog::mutable_endtime() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.endTime)
  return endtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobLog::release_endtime() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobLog.endTime)
  
  return endtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobLog::set_allocated_endtime(::std::string* endtime) {
  if (endtime != NULL) {
    
  } else {
    
  }
  endtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endtime);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobLog.endTime)
}

// optional string stdout = 4;
void JobLog::clear_stdout() {
  stdout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobLog::stdout() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.stdout)
  return stdout_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobLog::set_stdout(const ::std::string& value) {
  
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.stdout)
}
void JobLog::set_stdout(const char* value) {
  
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobLog.stdout)
}
void JobLog::set_stdout(const char* value, size_t size) {
  
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobLog.stdout)
}
::std::string* JobLog::mutable_stdout() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.stdout)
  return stdout_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobLog::release_stdout() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobLog.stdout)
  
  return stdout_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobLog::set_allocated_stdout(::std::string* stdout) {
  if (stdout != NULL) {
    
  } else {
    
  }
  stdout_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stdout);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobLog.stdout)
}

// optional string stderr = 5;
void JobLog::clear_stderr() {
  stderr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobLog::stderr() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.stderr)
  return stderr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobLog::set_stderr(const ::std::string& value) {
  
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.stderr)
}
void JobLog::set_stderr(const char* value) {
  
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobLog.stderr)
}
void JobLog::set_stderr(const char* value, size_t size) {
  
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobLog.stderr)
}
::std::string* JobLog::mutable_stderr() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.stderr)
  return stderr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobLog::release_stderr() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobLog.stderr)
  
  return stderr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobLog::set_allocated_stderr(::std::string* stderr) {
  if (stderr != NULL) {
    
  } else {
    
  }
  stderr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stderr);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobLog.stderr)
}

// optional int32 exitCode = 6;
void JobLog::clear_exitcode() {
  exitcode_ = 0;
}
::google::protobuf::int32 JobLog::exitcode() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.exitCode)
  return exitcode_;
}
void JobLog::set_exitcode(::google::protobuf::int32 value) {
  
  exitcode_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.exitCode)
}

// optional string hostIP = 7;
void JobLog::clear_hostip() {
  hostip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobLog::hostip() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.hostIP)
  return hostip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobLog::set_hostip(const ::std::string& value) {
  
  hostip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.hostIP)
}
void JobLog::set_hostip(const char* value) {
  
  hostip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobLog.hostIP)
}
void JobLog::set_hostip(const char* value, size_t size) {
  
  hostip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobLog.hostIP)
}
::std::string* JobLog::mutable_hostip() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.hostIP)
  return hostip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobLog::release_hostip() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobLog.hostIP)
  
  return hostip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobLog::set_allocated_hostip(::std::string* hostip) {
  if (hostip != NULL) {
    
  } else {
    
  }
  hostip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostip);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobLog.hostIP)
}

// repeated .ga4gh_task_exec.Ports ports = 8;
int JobLog::ports_size() const {
  return ports_.size();
}
void JobLog::clear_ports() {
  ports_.Clear();
}
const ::ga4gh_task_exec::Ports& JobLog::ports(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.ports)
  return ports_.Get(index);
}
::ga4gh_task_exec::Ports* JobLog::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.ports)
  return ports_.Mutable(index);
}
::ga4gh_task_exec::Ports* JobLog::add_ports() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.JobLog.ports)
  return ports_.Add();
}
::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports >*
JobLog::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.JobLog.ports)
  return &ports_;
}
const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports >&
JobLog::ports() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.JobLog.ports)
  return ports_;
}

inline const JobLog* JobLog::internal_default_instance() {
  return &JobLog_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileLog::kLocationFieldNumber;
const int FileLog::kPathFieldNumber;
const int FileLog::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileLog::FileLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.FileLog)
}

void FileLog::InitAsDefaultInstance() {
}

FileLog::FileLog(const FileLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.FileLog)
}

void FileLog::SharedCtor() {
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

FileLog::~FileLog() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.FileLog)
  SharedDtor();
}

void FileLog::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLog_descriptor_;
}

const FileLog& FileLog::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FileLog> FileLog_default_instance_;

FileLog* FileLog::New(::google::protobuf::Arena* arena) const {
  FileLog* n = new FileLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileLog::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.FileLog)
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_LONGLONG(0);
}

bool FileLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.FileLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.FileLog.location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.FileLog.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional int64 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.FileLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.FileLog)
  return false;
#undef DO_
}

void FileLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.FileLog)
  // optional string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.FileLog.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.FileLog.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional int64 size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->size(), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.FileLog)
}

::google::protobuf::uint8* FileLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.FileLog)
  // optional string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.FileLog.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->location(), target);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.FileLog.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional int64 size = 3;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.FileLog)
  return target;
}

size_t FileLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.FileLog)
  size_t total_size = 0;

  // optional string location = 1;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional int64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.FileLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FileLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.FileLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.FileLog)
    UnsafeMergeFrom(*source);
  }
}

void FileLog::MergeFrom(const FileLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.FileLog)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FileLog::UnsafeMergeFrom(const FileLog& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void FileLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.FileLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileLog::CopyFrom(const FileLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.FileLog)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FileLog::IsInitialized() const {

  return true;
}

void FileLog::Swap(FileLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileLog::InternalSwap(FileLog* other) {
  location_.Swap(&other->location_);
  path_.Swap(&other->path_);
  std::swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLog_descriptor_;
  metadata.reflection = FileLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileLog

// optional string location = 1;
void FileLog::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileLog::location() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.FileLog.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileLog::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.FileLog.location)
}
void FileLog::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.FileLog.location)
}
void FileLog::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.FileLog.location)
}
::std::string* FileLog::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.FileLog.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileLog::release_location() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.FileLog.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileLog::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.FileLog.location)
}

// optional string path = 2;
void FileLog::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileLog::path() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.FileLog.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileLog::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.FileLog.path)
}
void FileLog::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.FileLog.path)
}
void FileLog::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.FileLog.path)
}
::std::string* FileLog::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.FileLog.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileLog::release_path() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.FileLog.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileLog::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.FileLog.path)
}

// optional int64 size = 3;
void FileLog::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 FileLog::size() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.FileLog.size)
  return size_;
}
void FileLog::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.FileLog.size)
}

inline const FileLog* FileLog::internal_default_instance() {
  return &FileLog_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Job::kJobIDFieldNumber;
const int Job::kMetadataFieldNumber;
const int Job::kTaskFieldNumber;
const int Job::kStateFieldNumber;
const int Job::kLogsFieldNumber;
const int Job::kOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Job::Job()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.Job)
}

void Job::InitAsDefaultInstance() {
  task_ = const_cast< ::ga4gh_task_exec::Task*>(
      ::ga4gh_task_exec::Task::internal_default_instance());
}

Job::Job(const Job& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.Job)
}

void Job::SharedCtor() {
  metadata_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  metadata_.SetEntryDescriptor(
      &::ga4gh_task_exec::Job_MetadataEntry_descriptor_);
  jobid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_ = NULL;
  state_ = 0;
  _cached_size_ = 0;
}

Job::~Job() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.Job)
  SharedDtor();
}

void Job::SharedDtor() {
  jobid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Job_default_instance_.get()) {
    delete task_;
  }
}

void Job::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Job::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Job_descriptor_;
}

const Job& Job::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Job> Job_default_instance_;

Job* Job::New(::google::protobuf::Arena* arena) const {
  Job* n = new Job;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Job::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.Job)
  jobid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && task_ != NULL) delete task_;
  task_ = NULL;
  state_ = 0;
  metadata_.Clear();
  logs_.Clear();
  outputs_.Clear();
}

bool Job::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.Job)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string jobID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jobid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jobid().data(), this->jobid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.Job.jobID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_metadata;
        break;
      }

      // map<string, string> metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_metadata:
          DO_(input->IncrementRecursionDepth());
         parse_loop_metadata:
          Job_MetadataEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&metadata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.Job.MetadataEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.Job.MetadataEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_metadata;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_task;
        break;
      }

      // optional .ga4gh_task_exec.Task task = 3;
      case 3: {
        if (tag == 26) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .ga4gh_task_exec.State state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::ga4gh_task_exec::State >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_logs;
        break;
      }

      // repeated .ga4gh_task_exec.JobLog logs = 5;
      case 5: {
        if (tag == 42) {
         parse_logs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_logs;
        if (input->ExpectTag(50)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ga4gh_task_exec.FileLog outputs = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.Job)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.Job)
  return false;
#undef DO_
}

void Job::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.Job)
  // optional string jobID = 1;
  if (this->jobid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jobid().data(), this->jobid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Job.jobID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->jobid(), output);
  }

  // map<string, string> metadata = 2;
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ga4gh_task_exec.Job.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ga4gh_task_exec.Job.MetadataEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Job_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Job_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .ga4gh_task_exec.Task task = 3;
  if (this->has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->task_, output);
  }

  // optional .ga4gh_task_exec.State state = 4;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // repeated .ga4gh_task_exec.JobLog logs = 5;
  for (unsigned int i = 0, n = this->logs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->logs(i), output);
  }

  // repeated .ga4gh_task_exec.FileLog outputs = 6;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->outputs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.Job)
}

::google::protobuf::uint8* Job::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.Job)
  // optional string jobID = 1;
  if (this->jobid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jobid().data(), this->jobid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ga4gh_task_exec.Job.jobID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->jobid(), target);
  }

  // map<string, string> metadata = 2;
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ga4gh_task_exec.Job.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ga4gh_task_exec.Job.MetadataEntry.value");
      }
    };

    if (deterministic &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Job_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Job_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .ga4gh_task_exec.Task task = 3;
  if (this->has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->task_, false, target);
  }

  // optional .ga4gh_task_exec.State state = 4;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // repeated .ga4gh_task_exec.JobLog logs = 5;
  for (unsigned int i = 0, n = this->logs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->logs(i), false, target);
  }

  // repeated .ga4gh_task_exec.FileLog outputs = 6;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->outputs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.Job)
  return target;
}

size_t Job::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.Job)
  size_t total_size = 0;

  // optional string jobID = 1;
  if (this->jobid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jobid());
  }

  // optional .ga4gh_task_exec.Task task = 3;
  if (this->has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_);
  }

  // optional .ga4gh_task_exec.State state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // map<string, string> metadata = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metadata_size());
  {
    ::google::protobuf::scoped_ptr<Job_MetadataEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->metadata().begin();
        it != this->metadata().end(); ++it) {
      entry.reset(metadata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .ga4gh_task_exec.JobLog logs = 5;
  {
    unsigned int count = this->logs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logs(i));
    }
  }

  // repeated .ga4gh_task_exec.FileLog outputs = 6;
  {
    unsigned int count = this->outputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Job::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.Job)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Job* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Job>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.Job)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.Job)
    UnsafeMergeFrom(*source);
  }
}

void Job::MergeFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.Job)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Job::UnsafeMergeFrom(const Job& from) {
  GOOGLE_DCHECK(&from != this);
  metadata_.MergeFrom(from.metadata_);
  logs_.MergeFrom(from.logs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.jobid().size() > 0) {

    jobid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jobid_);
  }
  if (from.has_task()) {
    mutable_task()->::ga4gh_task_exec::Task::MergeFrom(from.task());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Job::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Job::CopyFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.Job)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Job::IsInitialized() const {

  return true;
}

void Job::Swap(Job* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Job::InternalSwap(Job* other) {
  jobid_.Swap(&other->jobid_);
  metadata_.Swap(&other->metadata_);
  std::swap(task_, other->task_);
  std::swap(state_, other->state_);
  logs_.UnsafeArenaSwap(&other->logs_);
  outputs_.UnsafeArenaSwap(&other->outputs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Job::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Job_descriptor_;
  metadata.reflection = Job_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Job

// optional string jobID = 1;
void Job::clear_jobid() {
  jobid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Job::jobid() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Job.jobID)
  return jobid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Job::set_jobid(const ::std::string& value) {
  
  jobid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Job.jobID)
}
void Job::set_jobid(const char* value) {
  
  jobid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Job.jobID)
}
void Job::set_jobid(const char* value, size_t size) {
  
  jobid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Job.jobID)
}
::std::string* Job::mutable_jobid() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Job.jobID)
  return jobid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Job::release_jobid() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Job.jobID)
  
  return jobid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Job::set_allocated_jobid(::std::string* jobid) {
  if (jobid != NULL) {
    
  } else {
    
  }
  jobid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jobid);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Job.jobID)
}

// map<string, string> metadata = 2;
int Job::metadata_size() const {
  return metadata_.size();
}
void Job::clear_metadata() {
  metadata_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Job::metadata() const {
  // @@protoc_insertion_point(field_map:ga4gh_task_exec.Job.metadata)
  return metadata_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Job::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:ga4gh_task_exec.Job.metadata)
  return metadata_.MutableMap();
}

// optional .ga4gh_task_exec.Task task = 3;
bool Job::has_task() const {
  return this != internal_default_instance() && task_ != NULL;
}
void Job::clear_task() {
  if (GetArenaNoVirtual() == NULL && task_ != NULL) delete task_;
  task_ = NULL;
}
const ::ga4gh_task_exec::Task& Job::task() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Job.task)
  return task_ != NULL ? *task_
                         : *::ga4gh_task_exec::Task::internal_default_instance();
}
::ga4gh_task_exec::Task* Job::mutable_task() {
  
  if (task_ == NULL) {
    task_ = new ::ga4gh_task_exec::Task;
  }
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Job.task)
  return task_;
}
::ga4gh_task_exec::Task* Job::release_task() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Job.task)
  
  ::ga4gh_task_exec::Task* temp = task_;
  task_ = NULL;
  return temp;
}
void Job::set_allocated_task(::ga4gh_task_exec::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Job.task)
}

// optional .ga4gh_task_exec.State state = 4;
void Job::clear_state() {
  state_ = 0;
}
::ga4gh_task_exec::State Job::state() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Job.state)
  return static_cast< ::ga4gh_task_exec::State >(state_);
}
void Job::set_state(::ga4gh_task_exec::State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Job.state)
}

// repeated .ga4gh_task_exec.JobLog logs = 5;
int Job::logs_size() const {
  return logs_.size();
}
void Job::clear_logs() {
  logs_.Clear();
}
const ::ga4gh_task_exec::JobLog& Job::logs(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Job.logs)
  return logs_.Get(index);
}
::ga4gh_task_exec::JobLog* Job::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Job.logs)
  return logs_.Mutable(index);
}
::ga4gh_task_exec::JobLog* Job::add_logs() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Job.logs)
  return logs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobLog >*
Job::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Job.logs)
  return &logs_;
}
const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobLog >&
Job::logs() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Job.logs)
  return logs_;
}

// repeated .ga4gh_task_exec.FileLog outputs = 6;
int Job::outputs_size() const {
  return outputs_.size();
}
void Job::clear_outputs() {
  outputs_.Clear();
}
const ::ga4gh_task_exec::FileLog& Job::outputs(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Job.outputs)
  return outputs_.Get(index);
}
::ga4gh_task_exec::FileLog* Job::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Job.outputs)
  return outputs_.Mutable(index);
}
::ga4gh_task_exec::FileLog* Job::add_outputs() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Job.outputs)
  return outputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::FileLog >*
Job::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Job.outputs)
  return &outputs_;
}
const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::FileLog >&
Job::outputs() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Job.outputs)
  return outputs_;
}

inline const Job* Job::internal_default_instance() {
  return &Job_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceInfoRequest::ServiceInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.ServiceInfoRequest)
}

void ServiceInfoRequest::InitAsDefaultInstance() {
}

ServiceInfoRequest::ServiceInfoRequest(const ServiceInfoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.ServiceInfoRequest)
}

void ServiceInfoRequest::SharedCtor() {
  _cached_size_ = 0;
}

ServiceInfoRequest::~ServiceInfoRequest() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.ServiceInfoRequest)
  SharedDtor();
}

void ServiceInfoRequest::SharedDtor() {
}

void ServiceInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceInfoRequest_descriptor_;
}

const ServiceInfoRequest& ServiceInfoRequest::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServiceInfoRequest> ServiceInfoRequest_default_instance_;

ServiceInfoRequest* ServiceInfoRequest::New(::google::protobuf::Arena* arena) const {
  ServiceInfoRequest* n = new ServiceInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.ServiceInfoRequest)
}

bool ServiceInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.ServiceInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.ServiceInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.ServiceInfoRequest)
  return false;
#undef DO_
}

void ServiceInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.ServiceInfoRequest)
  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.ServiceInfoRequest)
}

::google::protobuf::uint8* ServiceInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.ServiceInfoRequest)
  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.ServiceInfoRequest)
  return target;
}

size_t ServiceInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.ServiceInfoRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.ServiceInfoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServiceInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.ServiceInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.ServiceInfoRequest)
    UnsafeMergeFrom(*source);
  }
}

void ServiceInfoRequest::MergeFrom(const ServiceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.ServiceInfoRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServiceInfoRequest::UnsafeMergeFrom(const ServiceInfoRequest& from) {
  GOOGLE_DCHECK(&from != this);
}

void ServiceInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.ServiceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInfoRequest::CopyFrom(const ServiceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.ServiceInfoRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServiceInfoRequest::IsInitialized() const {

  return true;
}

void ServiceInfoRequest::Swap(ServiceInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceInfoRequest::InternalSwap(ServiceInfoRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceInfoRequest_descriptor_;
  metadata.reflection = ServiceInfoRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceInfoRequest

inline const ServiceInfoRequest* ServiceInfoRequest::internal_default_instance() {
  return &ServiceInfoRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceInfo::kStorageConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceInfo::ServiceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ga4gh_task_exec.ServiceInfo)
}

void ServiceInfo::InitAsDefaultInstance() {
}

ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ga4gh_task_exec.ServiceInfo)
}

void ServiceInfo::SharedCtor() {
  storageconfig_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  storageconfig_.SetEntryDescriptor(
      &::ga4gh_task_exec::ServiceInfo_StorageConfigEntry_descriptor_);
  _cached_size_ = 0;
}

ServiceInfo::~ServiceInfo() {
  // @@protoc_insertion_point(destructor:ga4gh_task_exec.ServiceInfo)
  SharedDtor();
}

void ServiceInfo::SharedDtor() {
}

void ServiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceInfo_descriptor_;
}

const ServiceInfo& ServiceInfo::default_instance() {
  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServiceInfo> ServiceInfo_default_instance_;

ServiceInfo* ServiceInfo::New(::google::protobuf::Arena* arena) const {
  ServiceInfo* n = new ServiceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ga4gh_task_exec.ServiceInfo)
  storageconfig_.Clear();
}

bool ServiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ga4gh_task_exec.ServiceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> storageConfig = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_storageConfig:
          ServiceInfo_StorageConfigEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&storageconfig_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.ServiceInfo.StorageConfigEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ga4gh_task_exec.ServiceInfo.StorageConfigEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_storageConfig;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ga4gh_task_exec.ServiceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ga4gh_task_exec.ServiceInfo)
  return false;
#undef DO_
}

void ServiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ga4gh_task_exec.ServiceInfo)
  // map<string, string> storageConfig = 1;
  if (!this->storageconfig().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ga4gh_task_exec.ServiceInfo.StorageConfigEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ga4gh_task_exec.ServiceInfo.StorageConfigEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->storageconfig().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->storageconfig().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->storageconfig().begin();
          it != this->storageconfig().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ServiceInfo_StorageConfigEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(storageconfig_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ServiceInfo_StorageConfigEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->storageconfig().begin();
          it != this->storageconfig().end(); ++it) {
        entry.reset(storageconfig_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:ga4gh_task_exec.ServiceInfo)
}

::google::protobuf::uint8* ServiceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ga4gh_task_exec.ServiceInfo)
  // map<string, string> storageConfig = 1;
  if (!this->storageconfig().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ga4gh_task_exec.ServiceInfo.StorageConfigEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ga4gh_task_exec.ServiceInfo.StorageConfigEntry.value");
      }
    };

    if (deterministic &&
        this->storageconfig().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->storageconfig().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->storageconfig().begin();
          it != this->storageconfig().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ServiceInfo_StorageConfigEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(storageconfig_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ServiceInfo_StorageConfigEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->storageconfig().begin();
          it != this->storageconfig().end(); ++it) {
        entry.reset(storageconfig_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:ga4gh_task_exec.ServiceInfo)
  return target;
}

size_t ServiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ga4gh_task_exec.ServiceInfo)
  size_t total_size = 0;

  // map<string, string> storageConfig = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->storageconfig_size());
  {
    ::google::protobuf::scoped_ptr<ServiceInfo_StorageConfigEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->storageconfig().begin();
        it != this->storageconfig().end(); ++it) {
      entry.reset(storageconfig_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ga4gh_task_exec.ServiceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServiceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ga4gh_task_exec.ServiceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ga4gh_task_exec.ServiceInfo)
    UnsafeMergeFrom(*source);
  }
}

void ServiceInfo::MergeFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ga4gh_task_exec.ServiceInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServiceInfo::UnsafeMergeFrom(const ServiceInfo& from) {
  GOOGLE_DCHECK(&from != this);
  storageconfig_.MergeFrom(from.storageconfig_);
}

void ServiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ga4gh_task_exec.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ga4gh_task_exec.ServiceInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {

  return true;
}

void ServiceInfo::Swap(ServiceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceInfo::InternalSwap(ServiceInfo* other) {
  storageconfig_.Swap(&other->storageconfig_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceInfo_descriptor_;
  metadata.reflection = ServiceInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceInfo

// map<string, string> storageConfig = 1;
int ServiceInfo::storageconfig_size() const {
  return storageconfig_.size();
}
void ServiceInfo::clear_storageconfig() {
  storageconfig_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
ServiceInfo::storageconfig() const {
  // @@protoc_insertion_point(field_map:ga4gh_task_exec.ServiceInfo.storageConfig)
  return storageconfig_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
ServiceInfo::mutable_storageconfig() {
  // @@protoc_insertion_point(field_mutable_map:ga4gh_task_exec.ServiceInfo.storageConfig)
  return storageconfig_.MutableMap();
}

inline const ServiceInfo* ServiceInfo::internal_default_instance() {
  return &ServiceInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ga4gh_task_exec

// @@protoc_insertion_point(global_scope)
