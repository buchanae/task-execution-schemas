// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/task_execution.proto

#ifndef PROTOBUF_proto_2ftask_5fexecution_2eproto__INCLUDED
#define PROTOBUF_proto_2ftask_5fexecution_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)

namespace ga4gh_task_exec {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2ftask_5fexecution_2eproto();
void protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto();
void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

class DockerExecutor;
class FileLog;
class Job;
class JobDesc;
class JobID;
class JobListRequest;
class JobListResponse;
class JobLog;
class Ports;
class Resources;
class ServiceInfo;
class ServiceInfoRequest;
class Task;
class TaskParameter;
class Volume;

enum State {
  Unknown = 0,
  Queued = 1,
  Running = 2,
  Paused = 3,
  Complete = 4,
  Error = 5,
  SystemError = 6,
  Canceled = 7,
  Initializing = 8,
  State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool State_IsValid(int value);
const State State_MIN = Unknown;
const State State_MAX = Initializing;
const int State_ARRAYSIZE = State_MAX + 1;

const ::google::protobuf::EnumDescriptor* State_descriptor();
inline const ::std::string& State_Name(State value) {
  return ::google::protobuf::internal::NameOfEnum(
    State_descriptor(), value);
}
inline bool State_Parse(
    const ::std::string& name, State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<State>(
    State_descriptor(), name, value);
}
// ===================================================================

class TaskParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.TaskParameter) */ {
 public:
  TaskParameter();
  virtual ~TaskParameter();

  TaskParameter(const TaskParameter& from);

  inline TaskParameter& operator=(const TaskParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskParameter& default_instance();

  static const TaskParameter* internal_default_instance();

  void Swap(TaskParameter* other);

  // implements Message ----------------------------------------------

  inline TaskParameter* New() const { return New(NULL); }

  TaskParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskParameter& from);
  void MergeFrom(const TaskParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskParameter* other);
  void UnsafeMergeFrom(const TaskParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string location = 3;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional string path = 4;
  void clear_path();
  static const int kPathFieldNumber = 4;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string class = 5;
  void clear_class_();
  static const int kClassFieldNumber = 5;
  const ::std::string& class_() const;
  void set_class_(const ::std::string& value);
  void set_class_(const char* value);
  void set_class_(const char* value, size_t size);
  ::std::string* mutable_class_();
  ::std::string* release_class_();
  void set_allocated_class_(::std::string* class_);

  // optional bool create = 6;
  void clear_create();
  static const int kCreateFieldNumber = 6;
  bool create() const;
  void set_create(bool value);

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.TaskParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr class__;
  bool create_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TaskParameter> TaskParameter_default_instance_;

// -------------------------------------------------------------------

class Ports : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.Ports) */ {
 public:
  Ports();
  virtual ~Ports();

  Ports(const Ports& from);

  inline Ports& operator=(const Ports& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ports& default_instance();

  static const Ports* internal_default_instance();

  void Swap(Ports* other);

  // implements Message ----------------------------------------------

  inline Ports* New() const { return New(NULL); }

  Ports* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ports& from);
  void MergeFrom(const Ports& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ports* other);
  void UnsafeMergeFrom(const Ports& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 container = 1;
  void clear_container();
  static const int kContainerFieldNumber = 1;
  ::google::protobuf::int32 container() const;
  void set_container(::google::protobuf::int32 value);

  // optional int32 host = 2;
  void clear_host();
  static const int kHostFieldNumber = 2;
  ::google::protobuf::int32 host() const;
  void set_host(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.Ports)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 container_;
  ::google::protobuf::int32 host_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Ports> Ports_default_instance_;

// -------------------------------------------------------------------

class DockerExecutor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.DockerExecutor) */ {
 public:
  DockerExecutor();
  virtual ~DockerExecutor();

  DockerExecutor(const DockerExecutor& from);

  inline DockerExecutor& operator=(const DockerExecutor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DockerExecutor& default_instance();

  static const DockerExecutor* internal_default_instance();

  void Swap(DockerExecutor* other);

  // implements Message ----------------------------------------------

  inline DockerExecutor* New() const { return New(NULL); }

  DockerExecutor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DockerExecutor& from);
  void MergeFrom(const DockerExecutor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DockerExecutor* other);
  void UnsafeMergeFrom(const DockerExecutor& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string imageName = 1;
  void clear_imagename();
  static const int kImageNameFieldNumber = 1;
  const ::std::string& imagename() const;
  void set_imagename(const ::std::string& value);
  void set_imagename(const char* value);
  void set_imagename(const char* value, size_t size);
  ::std::string* mutable_imagename();
  ::std::string* release_imagename();
  void set_allocated_imagename(::std::string* imagename);

  // repeated string cmd = 2;
  int cmd_size() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 2;
  const ::std::string& cmd(int index) const;
  ::std::string* mutable_cmd(int index);
  void set_cmd(int index, const ::std::string& value);
  void set_cmd(int index, const char* value);
  void set_cmd(int index, const char* value, size_t size);
  ::std::string* add_cmd();
  void add_cmd(const ::std::string& value);
  void add_cmd(const char* value);
  void add_cmd(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cmd() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cmd();

  // optional string workdir = 3;
  void clear_workdir();
  static const int kWorkdirFieldNumber = 3;
  const ::std::string& workdir() const;
  void set_workdir(const ::std::string& value);
  void set_workdir(const char* value);
  void set_workdir(const char* value, size_t size);
  ::std::string* mutable_workdir();
  ::std::string* release_workdir();
  void set_allocated_workdir(::std::string* workdir);

  // optional string stdin = 6;
  void clear_stdin();
  static const int kStdinFieldNumber = 6;
  const ::std::string& stdin() const;
  void set_stdin(const ::std::string& value);
  void set_stdin(const char* value);
  void set_stdin(const char* value, size_t size);
  ::std::string* mutable_stdin();
  ::std::string* release_stdin();
  void set_allocated_stdin(::std::string* stdin);

  // optional string stdout = 4;
  void clear_stdout();
  static const int kStdoutFieldNumber = 4;
  const ::std::string& stdout() const;
  void set_stdout(const ::std::string& value);
  void set_stdout(const char* value);
  void set_stdout(const char* value, size_t size);
  ::std::string* mutable_stdout();
  ::std::string* release_stdout();
  void set_allocated_stdout(::std::string* stdout);

  // optional string stderr = 5;
  void clear_stderr();
  static const int kStderrFieldNumber = 5;
  const ::std::string& stderr() const;
  void set_stderr(const ::std::string& value);
  void set_stderr(const char* value);
  void set_stderr(const char* value, size_t size);
  ::std::string* mutable_stderr();
  ::std::string* release_stderr();
  void set_allocated_stderr(::std::string* stderr);

  // repeated .ga4gh_task_exec.Ports ports = 7;
  int ports_size() const;
  void clear_ports();
  static const int kPortsFieldNumber = 7;
  const ::ga4gh_task_exec::Ports& ports(int index) const;
  ::ga4gh_task_exec::Ports* mutable_ports(int index);
  ::ga4gh_task_exec::Ports* add_ports();
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports >*
      mutable_ports();
  const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports >&
      ports() const;

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.DockerExecutor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cmd_;
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports > ports_;
  ::google::protobuf::internal::ArenaStringPtr imagename_;
  ::google::protobuf::internal::ArenaStringPtr workdir_;
  ::google::protobuf::internal::ArenaStringPtr stdin_;
  ::google::protobuf::internal::ArenaStringPtr stdout_;
  ::google::protobuf::internal::ArenaStringPtr stderr_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DockerExecutor> DockerExecutor_default_instance_;

// -------------------------------------------------------------------

class Volume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.Volume) */ {
 public:
  Volume();
  virtual ~Volume();

  Volume(const Volume& from);

  inline Volume& operator=(const Volume& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Volume& default_instance();

  static const Volume* internal_default_instance();

  void Swap(Volume* other);

  // implements Message ----------------------------------------------

  inline Volume* New() const { return New(NULL); }

  Volume* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Volume& from);
  void MergeFrom(const Volume& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Volume* other);
  void UnsafeMergeFrom(const Volume& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double sizeGb = 2;
  void clear_sizegb();
  static const int kSizeGbFieldNumber = 2;
  double sizegb() const;
  void set_sizegb(double value);

  // optional string source = 3;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string mountPoint = 6;
  void clear_mountpoint();
  static const int kMountPointFieldNumber = 6;
  const ::std::string& mountpoint() const;
  void set_mountpoint(const ::std::string& value);
  void set_mountpoint(const char* value);
  void set_mountpoint(const char* value, size_t size);
  ::std::string* mutable_mountpoint();
  ::std::string* release_mountpoint();
  void set_allocated_mountpoint(::std::string* mountpoint);

  // optional bool readonly = 7;
  void clear_readonly();
  static const int kReadonlyFieldNumber = 7;
  bool readonly() const;
  void set_readonly(bool value);

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.Volume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mountpoint_;
  double sizegb_;
  bool readonly_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Volume> Volume_default_instance_;

// -------------------------------------------------------------------

class Resources : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.Resources) */ {
 public:
  Resources();
  virtual ~Resources();

  Resources(const Resources& from);

  inline Resources& operator=(const Resources& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Resources& default_instance();

  static const Resources* internal_default_instance();

  void Swap(Resources* other);

  // implements Message ----------------------------------------------

  inline Resources* New() const { return New(NULL); }

  Resources* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Resources& from);
  void MergeFrom(const Resources& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Resources* other);
  void UnsafeMergeFrom(const Resources& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 minimumCpuCores = 1;
  void clear_minimumcpucores();
  static const int kMinimumCpuCoresFieldNumber = 1;
  ::google::protobuf::uint32 minimumcpucores() const;
  void set_minimumcpucores(::google::protobuf::uint32 value);

  // optional bool preemptible = 2;
  void clear_preemptible();
  static const int kPreemptibleFieldNumber = 2;
  bool preemptible() const;
  void set_preemptible(bool value);

  // optional double minimumRamGb = 3;
  void clear_minimumramgb();
  static const int kMinimumRamGbFieldNumber = 3;
  double minimumramgb() const;
  void set_minimumramgb(double value);

  // repeated .ga4gh_task_exec.Volume volumes = 4;
  int volumes_size() const;
  void clear_volumes();
  static const int kVolumesFieldNumber = 4;
  const ::ga4gh_task_exec::Volume& volumes(int index) const;
  ::ga4gh_task_exec::Volume* mutable_volumes(int index);
  ::ga4gh_task_exec::Volume* add_volumes();
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Volume >*
      mutable_volumes();
  const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Volume >&
      volumes() const;

  // repeated string zones = 5;
  int zones_size() const;
  void clear_zones();
  static const int kZonesFieldNumber = 5;
  const ::std::string& zones(int index) const;
  ::std::string* mutable_zones(int index);
  void set_zones(int index, const ::std::string& value);
  void set_zones(int index, const char* value);
  void set_zones(int index, const char* value, size_t size);
  ::std::string* add_zones();
  void add_zones(const ::std::string& value);
  void add_zones(const char* value);
  void add_zones(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& zones() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_zones();

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.Resources)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Volume > volumes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> zones_;
  ::google::protobuf::uint32 minimumcpucores_;
  bool preemptible_;
  double minimumramgb_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Resources> Resources_default_instance_;

// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  static const Task* internal_default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  inline Task* New() const { return New(NULL); }

  Task* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Task* other);
  void UnsafeMergeFrom(const Task& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string projectID = 2;
  void clear_projectid();
  static const int kProjectIDFieldNumber = 2;
  const ::std::string& projectid() const;
  void set_projectid(const ::std::string& value);
  void set_projectid(const char* value);
  void set_projectid(const char* value, size_t size);
  ::std::string* mutable_projectid();
  ::std::string* release_projectid();
  void set_allocated_projectid(::std::string* projectid);

  // optional string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // repeated .ga4gh_task_exec.TaskParameter inputs = 4;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 4;
  const ::ga4gh_task_exec::TaskParameter& inputs(int index) const;
  ::ga4gh_task_exec::TaskParameter* mutable_inputs(int index);
  ::ga4gh_task_exec::TaskParameter* add_inputs();
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter >*
      mutable_inputs();
  const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter >&
      inputs() const;

  // repeated .ga4gh_task_exec.TaskParameter outputs = 5;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 5;
  const ::ga4gh_task_exec::TaskParameter& outputs(int index) const;
  ::ga4gh_task_exec::TaskParameter* mutable_outputs(int index);
  ::ga4gh_task_exec::TaskParameter* add_outputs();
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter >*
      mutable_outputs();
  const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter >&
      outputs() const;

  // optional .ga4gh_task_exec.Resources resources = 6;
  bool has_resources() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 6;
  const ::ga4gh_task_exec::Resources& resources() const;
  ::ga4gh_task_exec::Resources* mutable_resources();
  ::ga4gh_task_exec::Resources* release_resources();
  void set_allocated_resources(::ga4gh_task_exec::Resources* resources);

  // repeated .ga4gh_task_exec.DockerExecutor docker = 8;
  int docker_size() const;
  void clear_docker();
  static const int kDockerFieldNumber = 8;
  const ::ga4gh_task_exec::DockerExecutor& docker(int index) const;
  ::ga4gh_task_exec::DockerExecutor* mutable_docker(int index);
  ::ga4gh_task_exec::DockerExecutor* add_docker();
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::DockerExecutor >*
      mutable_docker();
  const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::DockerExecutor >&
      docker() const;

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.Task)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter > inputs_;
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter > outputs_;
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::DockerExecutor > docker_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr projectid_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::ga4gh_task_exec::Resources* resources_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Task> Task_default_instance_;

// -------------------------------------------------------------------

class JobListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.JobListRequest) */ {
 public:
  JobListRequest();
  virtual ~JobListRequest();

  JobListRequest(const JobListRequest& from);

  inline JobListRequest& operator=(const JobListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobListRequest& default_instance();

  static const JobListRequest* internal_default_instance();

  void Swap(JobListRequest* other);

  // implements Message ----------------------------------------------

  inline JobListRequest* New() const { return New(NULL); }

  JobListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobListRequest& from);
  void MergeFrom(const JobListRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JobListRequest* other);
  void UnsafeMergeFrom(const JobListRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string projectID = 1;
  void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  const ::std::string& projectid() const;
  void set_projectid(const ::std::string& value);
  void set_projectid(const char* value);
  void set_projectid(const char* value, size_t size);
  ::std::string* mutable_projectid();
  ::std::string* release_projectid();
  void set_allocated_projectid(::std::string* projectid);

  // optional string namePrefix = 2;
  void clear_nameprefix();
  static const int kNamePrefixFieldNumber = 2;
  const ::std::string& nameprefix() const;
  void set_nameprefix(const ::std::string& value);
  void set_nameprefix(const char* value);
  void set_nameprefix(const char* value, size_t size);
  ::std::string* mutable_nameprefix();
  ::std::string* release_nameprefix();
  void set_allocated_nameprefix(::std::string* nameprefix);

  // optional uint32 pageSize = 3;
  void clear_pagesize();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::uint32 pagesize() const;
  void set_pagesize(::google::protobuf::uint32 value);

  // optional string pageToken = 4;
  void clear_pagetoken();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& pagetoken() const;
  void set_pagetoken(const ::std::string& value);
  void set_pagetoken(const char* value);
  void set_pagetoken(const char* value, size_t size);
  ::std::string* mutable_pagetoken();
  ::std::string* release_pagetoken();
  void set_allocated_pagetoken(::std::string* pagetoken);

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.JobListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr projectid_;
  ::google::protobuf::internal::ArenaStringPtr nameprefix_;
  ::google::protobuf::internal::ArenaStringPtr pagetoken_;
  ::google::protobuf::uint32 pagesize_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<JobListRequest> JobListRequest_default_instance_;

// -------------------------------------------------------------------

class JobDesc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.JobDesc) */ {
 public:
  JobDesc();
  virtual ~JobDesc();

  JobDesc(const JobDesc& from);

  inline JobDesc& operator=(const JobDesc& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobDesc& default_instance();

  static const JobDesc* internal_default_instance();

  void Swap(JobDesc* other);

  // implements Message ----------------------------------------------

  inline JobDesc* New() const { return New(NULL); }

  JobDesc* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobDesc& from);
  void MergeFrom(const JobDesc& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JobDesc* other);
  void UnsafeMergeFrom(const JobDesc& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string jobID = 1;
  void clear_jobid();
  static const int kJobIDFieldNumber = 1;
  const ::std::string& jobid() const;
  void set_jobid(const ::std::string& value);
  void set_jobid(const char* value);
  void set_jobid(const char* value, size_t size);
  ::std::string* mutable_jobid();
  ::std::string* release_jobid();
  void set_allocated_jobid(::std::string* jobid);

  // optional .ga4gh_task_exec.State state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::ga4gh_task_exec::State state() const;
  void set_state(::ga4gh_task_exec::State value);

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.JobDesc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr jobid_;
  int state_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<JobDesc> JobDesc_default_instance_;

// -------------------------------------------------------------------

class JobListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.JobListResponse) */ {
 public:
  JobListResponse();
  virtual ~JobListResponse();

  JobListResponse(const JobListResponse& from);

  inline JobListResponse& operator=(const JobListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobListResponse& default_instance();

  static const JobListResponse* internal_default_instance();

  void Swap(JobListResponse* other);

  // implements Message ----------------------------------------------

  inline JobListResponse* New() const { return New(NULL); }

  JobListResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobListResponse& from);
  void MergeFrom(const JobListResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JobListResponse* other);
  void UnsafeMergeFrom(const JobListResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ga4gh_task_exec.JobDesc jobs = 1;
  int jobs_size() const;
  void clear_jobs();
  static const int kJobsFieldNumber = 1;
  const ::ga4gh_task_exec::JobDesc& jobs(int index) const;
  ::ga4gh_task_exec::JobDesc* mutable_jobs(int index);
  ::ga4gh_task_exec::JobDesc* add_jobs();
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobDesc >*
      mutable_jobs();
  const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobDesc >&
      jobs() const;

  // optional string nextPageToken = 2;
  void clear_nextpagetoken();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& nextpagetoken() const;
  void set_nextpagetoken(const ::std::string& value);
  void set_nextpagetoken(const char* value);
  void set_nextpagetoken(const char* value, size_t size);
  ::std::string* mutable_nextpagetoken();
  ::std::string* release_nextpagetoken();
  void set_allocated_nextpagetoken(::std::string* nextpagetoken);

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.JobListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobDesc > jobs_;
  ::google::protobuf::internal::ArenaStringPtr nextpagetoken_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<JobListResponse> JobListResponse_default_instance_;

// -------------------------------------------------------------------

class JobID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.JobID) */ {
 public:
  JobID();
  virtual ~JobID();

  JobID(const JobID& from);

  inline JobID& operator=(const JobID& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobID& default_instance();

  static const JobID* internal_default_instance();

  void Swap(JobID* other);

  // implements Message ----------------------------------------------

  inline JobID* New() const { return New(NULL); }

  JobID* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobID& from);
  void MergeFrom(const JobID& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JobID* other);
  void UnsafeMergeFrom(const JobID& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.JobID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<JobID> JobID_default_instance_;

// -------------------------------------------------------------------

class JobLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.JobLog) */ {
 public:
  JobLog();
  virtual ~JobLog();

  JobLog(const JobLog& from);

  inline JobLog& operator=(const JobLog& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobLog& default_instance();

  static const JobLog* internal_default_instance();

  void Swap(JobLog* other);

  // implements Message ----------------------------------------------

  inline JobLog* New() const { return New(NULL); }

  JobLog* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobLog& from);
  void MergeFrom(const JobLog& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JobLog* other);
  void UnsafeMergeFrom(const JobLog& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string cmd = 1;
  int cmd_size() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  const ::std::string& cmd(int index) const;
  ::std::string* mutable_cmd(int index);
  void set_cmd(int index, const ::std::string& value);
  void set_cmd(int index, const char* value);
  void set_cmd(int index, const char* value, size_t size);
  ::std::string* add_cmd();
  void add_cmd(const ::std::string& value);
  void add_cmd(const char* value);
  void add_cmd(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cmd() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cmd();

  // optional string startTime = 2;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  const ::std::string& starttime() const;
  void set_starttime(const ::std::string& value);
  void set_starttime(const char* value);
  void set_starttime(const char* value, size_t size);
  ::std::string* mutable_starttime();
  ::std::string* release_starttime();
  void set_allocated_starttime(::std::string* starttime);

  // optional string endTime = 3;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  const ::std::string& endtime() const;
  void set_endtime(const ::std::string& value);
  void set_endtime(const char* value);
  void set_endtime(const char* value, size_t size);
  ::std::string* mutable_endtime();
  ::std::string* release_endtime();
  void set_allocated_endtime(::std::string* endtime);

  // optional string stdout = 4;
  void clear_stdout();
  static const int kStdoutFieldNumber = 4;
  const ::std::string& stdout() const;
  void set_stdout(const ::std::string& value);
  void set_stdout(const char* value);
  void set_stdout(const char* value, size_t size);
  ::std::string* mutable_stdout();
  ::std::string* release_stdout();
  void set_allocated_stdout(::std::string* stdout);

  // optional string stderr = 5;
  void clear_stderr();
  static const int kStderrFieldNumber = 5;
  const ::std::string& stderr() const;
  void set_stderr(const ::std::string& value);
  void set_stderr(const char* value);
  void set_stderr(const char* value, size_t size);
  ::std::string* mutable_stderr();
  ::std::string* release_stderr();
  void set_allocated_stderr(::std::string* stderr);

  // optional int32 exitCode = 6;
  void clear_exitcode();
  static const int kExitCodeFieldNumber = 6;
  ::google::protobuf::int32 exitcode() const;
  void set_exitcode(::google::protobuf::int32 value);

  // optional string hostIP = 7;
  void clear_hostip();
  static const int kHostIPFieldNumber = 7;
  const ::std::string& hostip() const;
  void set_hostip(const ::std::string& value);
  void set_hostip(const char* value);
  void set_hostip(const char* value, size_t size);
  ::std::string* mutable_hostip();
  ::std::string* release_hostip();
  void set_allocated_hostip(::std::string* hostip);

  // repeated .ga4gh_task_exec.Ports ports = 8;
  int ports_size() const;
  void clear_ports();
  static const int kPortsFieldNumber = 8;
  const ::ga4gh_task_exec::Ports& ports(int index) const;
  ::ga4gh_task_exec::Ports* mutable_ports(int index);
  ::ga4gh_task_exec::Ports* add_ports();
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports >*
      mutable_ports();
  const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports >&
      ports() const;

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.JobLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cmd_;
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports > ports_;
  ::google::protobuf::internal::ArenaStringPtr starttime_;
  ::google::protobuf::internal::ArenaStringPtr endtime_;
  ::google::protobuf::internal::ArenaStringPtr stdout_;
  ::google::protobuf::internal::ArenaStringPtr stderr_;
  ::google::protobuf::internal::ArenaStringPtr hostip_;
  ::google::protobuf::int32 exitcode_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<JobLog> JobLog_default_instance_;

// -------------------------------------------------------------------

class FileLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.FileLog) */ {
 public:
  FileLog();
  virtual ~FileLog();

  FileLog(const FileLog& from);

  inline FileLog& operator=(const FileLog& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileLog& default_instance();

  static const FileLog* internal_default_instance();

  void Swap(FileLog* other);

  // implements Message ----------------------------------------------

  inline FileLog* New() const { return New(NULL); }

  FileLog* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileLog& from);
  void MergeFrom(const FileLog& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileLog* other);
  void UnsafeMergeFrom(const FileLog& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string location = 1;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional int64 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.FileLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int64 size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<FileLog> FileLog_default_instance_;

// -------------------------------------------------------------------

class Job : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.Job) */ {
 public:
  Job();
  virtual ~Job();

  Job(const Job& from);

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Job& default_instance();

  static const Job* internal_default_instance();

  void Swap(Job* other);

  // implements Message ----------------------------------------------

  inline Job* New() const { return New(NULL); }

  Job* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Job* other);
  void UnsafeMergeFrom(const Job& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string jobID = 1;
  void clear_jobid();
  static const int kJobIDFieldNumber = 1;
  const ::std::string& jobid() const;
  void set_jobid(const ::std::string& value);
  void set_jobid(const char* value);
  void set_jobid(const char* value, size_t size);
  ::std::string* mutable_jobid();
  ::std::string* release_jobid();
  void set_allocated_jobid(::std::string* jobid);

  // map<string, string> metadata = 2;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // optional .ga4gh_task_exec.Task task = 3;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 3;
  const ::ga4gh_task_exec::Task& task() const;
  ::ga4gh_task_exec::Task* mutable_task();
  ::ga4gh_task_exec::Task* release_task();
  void set_allocated_task(::ga4gh_task_exec::Task* task);

  // optional .ga4gh_task_exec.State state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::ga4gh_task_exec::State state() const;
  void set_state(::ga4gh_task_exec::State value);

  // repeated .ga4gh_task_exec.JobLog logs = 5;
  int logs_size() const;
  void clear_logs();
  static const int kLogsFieldNumber = 5;
  const ::ga4gh_task_exec::JobLog& logs(int index) const;
  ::ga4gh_task_exec::JobLog* mutable_logs(int index);
  ::ga4gh_task_exec::JobLog* add_logs();
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobLog >*
      mutable_logs();
  const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobLog >&
      logs() const;

  // repeated .ga4gh_task_exec.FileLog outputs = 6;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 6;
  const ::ga4gh_task_exec::FileLog& outputs(int index) const;
  ::ga4gh_task_exec::FileLog* mutable_outputs(int index);
  ::ga4gh_task_exec::FileLog* add_outputs();
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::FileLog >*
      mutable_outputs();
  const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::FileLog >&
      outputs() const;

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.Job)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Job_MetadataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobLog > logs_;
  ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::FileLog > outputs_;
  ::google::protobuf::internal::ArenaStringPtr jobid_;
  ::ga4gh_task_exec::Task* task_;
  int state_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Job> Job_default_instance_;

// -------------------------------------------------------------------

class ServiceInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.ServiceInfoRequest) */ {
 public:
  ServiceInfoRequest();
  virtual ~ServiceInfoRequest();

  ServiceInfoRequest(const ServiceInfoRequest& from);

  inline ServiceInfoRequest& operator=(const ServiceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceInfoRequest& default_instance();

  static const ServiceInfoRequest* internal_default_instance();

  void Swap(ServiceInfoRequest* other);

  // implements Message ----------------------------------------------

  inline ServiceInfoRequest* New() const { return New(NULL); }

  ServiceInfoRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceInfoRequest& from);
  void MergeFrom(const ServiceInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceInfoRequest* other);
  void UnsafeMergeFrom(const ServiceInfoRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.ServiceInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ServiceInfoRequest> ServiceInfoRequest_default_instance_;

// -------------------------------------------------------------------

class ServiceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ga4gh_task_exec.ServiceInfo) */ {
 public:
  ServiceInfo();
  virtual ~ServiceInfo();

  ServiceInfo(const ServiceInfo& from);

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceInfo& default_instance();

  static const ServiceInfo* internal_default_instance();

  void Swap(ServiceInfo* other);

  // implements Message ----------------------------------------------

  inline ServiceInfo* New() const { return New(NULL); }

  ServiceInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceInfo& from);
  void MergeFrom(const ServiceInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceInfo* other);
  void UnsafeMergeFrom(const ServiceInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> storageConfig = 1;
  int storageconfig_size() const;
  void clear_storageconfig();
  static const int kStorageConfigFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      storageconfig() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_storageconfig();

  // @@protoc_insertion_point(class_scope:ga4gh_task_exec.ServiceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      ServiceInfo_StorageConfigEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > storageconfig_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2ftask_5fexecution_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2ftask_5fexecution_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2ftask_5fexecution_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_5fexecution_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ServiceInfo> ServiceInfo_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskParameter

// optional string name = 1;
inline void TaskParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskParameter::name() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.TaskParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskParameter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.TaskParameter.name)
}
inline void TaskParameter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.TaskParameter.name)
}
inline void TaskParameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.TaskParameter.name)
}
inline ::std::string* TaskParameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.TaskParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskParameter::release_name() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.TaskParameter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.TaskParameter.name)
}

// optional string description = 2;
inline void TaskParameter::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskParameter::description() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.TaskParameter.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskParameter::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.TaskParameter.description)
}
inline void TaskParameter::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.TaskParameter.description)
}
inline void TaskParameter::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.TaskParameter.description)
}
inline ::std::string* TaskParameter::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.TaskParameter.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskParameter::release_description() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.TaskParameter.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskParameter::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.TaskParameter.description)
}

// optional string location = 3;
inline void TaskParameter::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskParameter::location() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.TaskParameter.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskParameter::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.TaskParameter.location)
}
inline void TaskParameter::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.TaskParameter.location)
}
inline void TaskParameter::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.TaskParameter.location)
}
inline ::std::string* TaskParameter::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.TaskParameter.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskParameter::release_location() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.TaskParameter.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskParameter::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.TaskParameter.location)
}

// optional string path = 4;
inline void TaskParameter::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskParameter::path() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.TaskParameter.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskParameter::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.TaskParameter.path)
}
inline void TaskParameter::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.TaskParameter.path)
}
inline void TaskParameter::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.TaskParameter.path)
}
inline ::std::string* TaskParameter::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.TaskParameter.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskParameter::release_path() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.TaskParameter.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskParameter::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.TaskParameter.path)
}

// optional string class = 5;
inline void TaskParameter::clear_class_() {
  class__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskParameter::class_() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.TaskParameter.class)
  return class__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskParameter::set_class_(const ::std::string& value) {
  
  class__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.TaskParameter.class)
}
inline void TaskParameter::set_class_(const char* value) {
  
  class__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.TaskParameter.class)
}
inline void TaskParameter::set_class_(const char* value, size_t size) {
  
  class__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.TaskParameter.class)
}
inline ::std::string* TaskParameter::mutable_class_() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.TaskParameter.class)
  return class__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskParameter::release_class_() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.TaskParameter.class)
  
  return class__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskParameter::set_allocated_class_(::std::string* class_) {
  if (class_ != NULL) {
    
  } else {
    
  }
  class__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.TaskParameter.class)
}

// optional bool create = 6;
inline void TaskParameter::clear_create() {
  create_ = false;
}
inline bool TaskParameter::create() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.TaskParameter.create)
  return create_;
}
inline void TaskParameter::set_create(bool value) {
  
  create_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.TaskParameter.create)
}

inline const TaskParameter* TaskParameter::internal_default_instance() {
  return &TaskParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// Ports

// optional int32 container = 1;
inline void Ports::clear_container() {
  container_ = 0;
}
inline ::google::protobuf::int32 Ports::container() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Ports.container)
  return container_;
}
inline void Ports::set_container(::google::protobuf::int32 value) {
  
  container_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Ports.container)
}

// optional int32 host = 2;
inline void Ports::clear_host() {
  host_ = 0;
}
inline ::google::protobuf::int32 Ports::host() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Ports.host)
  return host_;
}
inline void Ports::set_host(::google::protobuf::int32 value) {
  
  host_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Ports.host)
}

inline const Ports* Ports::internal_default_instance() {
  return &Ports_default_instance_.get();
}
// -------------------------------------------------------------------

// DockerExecutor

// optional string imageName = 1;
inline void DockerExecutor::clear_imagename() {
  imagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DockerExecutor::imagename() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.imageName)
  return imagename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DockerExecutor::set_imagename(const ::std::string& value) {
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.DockerExecutor.imageName)
}
inline void DockerExecutor::set_imagename(const char* value) {
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.DockerExecutor.imageName)
}
inline void DockerExecutor::set_imagename(const char* value, size_t size) {
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.DockerExecutor.imageName)
}
inline ::std::string* DockerExecutor::mutable_imagename() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.imageName)
  return imagename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DockerExecutor::release_imagename() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.DockerExecutor.imageName)
  
  return imagename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DockerExecutor::set_allocated_imagename(::std::string* imagename) {
  if (imagename != NULL) {
    
  } else {
    
  }
  imagename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagename);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.DockerExecutor.imageName)
}

// repeated string cmd = 2;
inline int DockerExecutor::cmd_size() const {
  return cmd_.size();
}
inline void DockerExecutor::clear_cmd() {
  cmd_.Clear();
}
inline const ::std::string& DockerExecutor::cmd(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.cmd)
  return cmd_.Get(index);
}
inline ::std::string* DockerExecutor::mutable_cmd(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.cmd)
  return cmd_.Mutable(index);
}
inline void DockerExecutor::set_cmd(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.DockerExecutor.cmd)
  cmd_.Mutable(index)->assign(value);
}
inline void DockerExecutor::set_cmd(int index, const char* value) {
  cmd_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.DockerExecutor.cmd)
}
inline void DockerExecutor::set_cmd(int index, const char* value, size_t size) {
  cmd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.DockerExecutor.cmd)
}
inline ::std::string* DockerExecutor::add_cmd() {
  // @@protoc_insertion_point(field_add_mutable:ga4gh_task_exec.DockerExecutor.cmd)
  return cmd_.Add();
}
inline void DockerExecutor::add_cmd(const ::std::string& value) {
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.DockerExecutor.cmd)
}
inline void DockerExecutor::add_cmd(const char* value) {
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ga4gh_task_exec.DockerExecutor.cmd)
}
inline void DockerExecutor::add_cmd(const char* value, size_t size) {
  cmd_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ga4gh_task_exec.DockerExecutor.cmd)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DockerExecutor::cmd() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.DockerExecutor.cmd)
  return cmd_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DockerExecutor::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.DockerExecutor.cmd)
  return &cmd_;
}

// optional string workdir = 3;
inline void DockerExecutor::clear_workdir() {
  workdir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DockerExecutor::workdir() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.workdir)
  return workdir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DockerExecutor::set_workdir(const ::std::string& value) {
  
  workdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.DockerExecutor.workdir)
}
inline void DockerExecutor::set_workdir(const char* value) {
  
  workdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.DockerExecutor.workdir)
}
inline void DockerExecutor::set_workdir(const char* value, size_t size) {
  
  workdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.DockerExecutor.workdir)
}
inline ::std::string* DockerExecutor::mutable_workdir() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.workdir)
  return workdir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DockerExecutor::release_workdir() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.DockerExecutor.workdir)
  
  return workdir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DockerExecutor::set_allocated_workdir(::std::string* workdir) {
  if (workdir != NULL) {
    
  } else {
    
  }
  workdir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workdir);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.DockerExecutor.workdir)
}

// optional string stdin = 6;
inline void DockerExecutor::clear_stdin() {
  stdin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DockerExecutor::stdin() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.stdin)
  return stdin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DockerExecutor::set_stdin(const ::std::string& value) {
  
  stdin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.DockerExecutor.stdin)
}
inline void DockerExecutor::set_stdin(const char* value) {
  
  stdin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.DockerExecutor.stdin)
}
inline void DockerExecutor::set_stdin(const char* value, size_t size) {
  
  stdin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.DockerExecutor.stdin)
}
inline ::std::string* DockerExecutor::mutable_stdin() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.stdin)
  return stdin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DockerExecutor::release_stdin() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.DockerExecutor.stdin)
  
  return stdin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DockerExecutor::set_allocated_stdin(::std::string* stdin) {
  if (stdin != NULL) {
    
  } else {
    
  }
  stdin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stdin);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.DockerExecutor.stdin)
}

// optional string stdout = 4;
inline void DockerExecutor::clear_stdout() {
  stdout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DockerExecutor::stdout() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.stdout)
  return stdout_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DockerExecutor::set_stdout(const ::std::string& value) {
  
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.DockerExecutor.stdout)
}
inline void DockerExecutor::set_stdout(const char* value) {
  
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.DockerExecutor.stdout)
}
inline void DockerExecutor::set_stdout(const char* value, size_t size) {
  
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.DockerExecutor.stdout)
}
inline ::std::string* DockerExecutor::mutable_stdout() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.stdout)
  return stdout_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DockerExecutor::release_stdout() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.DockerExecutor.stdout)
  
  return stdout_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DockerExecutor::set_allocated_stdout(::std::string* stdout) {
  if (stdout != NULL) {
    
  } else {
    
  }
  stdout_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stdout);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.DockerExecutor.stdout)
}

// optional string stderr = 5;
inline void DockerExecutor::clear_stderr() {
  stderr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DockerExecutor::stderr() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.stderr)
  return stderr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DockerExecutor::set_stderr(const ::std::string& value) {
  
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.DockerExecutor.stderr)
}
inline void DockerExecutor::set_stderr(const char* value) {
  
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.DockerExecutor.stderr)
}
inline void DockerExecutor::set_stderr(const char* value, size_t size) {
  
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.DockerExecutor.stderr)
}
inline ::std::string* DockerExecutor::mutable_stderr() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.stderr)
  return stderr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DockerExecutor::release_stderr() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.DockerExecutor.stderr)
  
  return stderr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DockerExecutor::set_allocated_stderr(::std::string* stderr) {
  if (stderr != NULL) {
    
  } else {
    
  }
  stderr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stderr);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.DockerExecutor.stderr)
}

// repeated .ga4gh_task_exec.Ports ports = 7;
inline int DockerExecutor::ports_size() const {
  return ports_.size();
}
inline void DockerExecutor::clear_ports() {
  ports_.Clear();
}
inline const ::ga4gh_task_exec::Ports& DockerExecutor::ports(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.DockerExecutor.ports)
  return ports_.Get(index);
}
inline ::ga4gh_task_exec::Ports* DockerExecutor::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.DockerExecutor.ports)
  return ports_.Mutable(index);
}
inline ::ga4gh_task_exec::Ports* DockerExecutor::add_ports() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.DockerExecutor.ports)
  return ports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports >*
DockerExecutor::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.DockerExecutor.ports)
  return &ports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports >&
DockerExecutor::ports() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.DockerExecutor.ports)
  return ports_;
}

inline const DockerExecutor* DockerExecutor::internal_default_instance() {
  return &DockerExecutor_default_instance_.get();
}
// -------------------------------------------------------------------

// Volume

// optional string name = 1;
inline void Volume::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Volume::name() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Volume.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Volume::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Volume.name)
}
inline void Volume::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Volume.name)
}
inline void Volume::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Volume.name)
}
inline ::std::string* Volume::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Volume.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Volume::release_name() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Volume.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Volume::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Volume.name)
}

// optional double sizeGb = 2;
inline void Volume::clear_sizegb() {
  sizegb_ = 0;
}
inline double Volume::sizegb() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Volume.sizeGb)
  return sizegb_;
}
inline void Volume::set_sizegb(double value) {
  
  sizegb_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Volume.sizeGb)
}

// optional string source = 3;
inline void Volume::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Volume::source() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Volume.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Volume::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Volume.source)
}
inline void Volume::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Volume.source)
}
inline void Volume::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Volume.source)
}
inline ::std::string* Volume::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Volume.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Volume::release_source() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Volume.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Volume::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Volume.source)
}

// optional string mountPoint = 6;
inline void Volume::clear_mountpoint() {
  mountpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Volume::mountpoint() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Volume.mountPoint)
  return mountpoint_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Volume::set_mountpoint(const ::std::string& value) {
  
  mountpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Volume.mountPoint)
}
inline void Volume::set_mountpoint(const char* value) {
  
  mountpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Volume.mountPoint)
}
inline void Volume::set_mountpoint(const char* value, size_t size) {
  
  mountpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Volume.mountPoint)
}
inline ::std::string* Volume::mutable_mountpoint() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Volume.mountPoint)
  return mountpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Volume::release_mountpoint() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Volume.mountPoint)
  
  return mountpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Volume::set_allocated_mountpoint(::std::string* mountpoint) {
  if (mountpoint != NULL) {
    
  } else {
    
  }
  mountpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mountpoint);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Volume.mountPoint)
}

// optional bool readonly = 7;
inline void Volume::clear_readonly() {
  readonly_ = false;
}
inline bool Volume::readonly() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Volume.readonly)
  return readonly_;
}
inline void Volume::set_readonly(bool value) {
  
  readonly_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Volume.readonly)
}

inline const Volume* Volume::internal_default_instance() {
  return &Volume_default_instance_.get();
}
// -------------------------------------------------------------------

// Resources

// optional uint32 minimumCpuCores = 1;
inline void Resources::clear_minimumcpucores() {
  minimumcpucores_ = 0u;
}
inline ::google::protobuf::uint32 Resources::minimumcpucores() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Resources.minimumCpuCores)
  return minimumcpucores_;
}
inline void Resources::set_minimumcpucores(::google::protobuf::uint32 value) {
  
  minimumcpucores_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Resources.minimumCpuCores)
}

// optional bool preemptible = 2;
inline void Resources::clear_preemptible() {
  preemptible_ = false;
}
inline bool Resources::preemptible() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Resources.preemptible)
  return preemptible_;
}
inline void Resources::set_preemptible(bool value) {
  
  preemptible_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Resources.preemptible)
}

// optional double minimumRamGb = 3;
inline void Resources::clear_minimumramgb() {
  minimumramgb_ = 0;
}
inline double Resources::minimumramgb() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Resources.minimumRamGb)
  return minimumramgb_;
}
inline void Resources::set_minimumramgb(double value) {
  
  minimumramgb_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Resources.minimumRamGb)
}

// repeated .ga4gh_task_exec.Volume volumes = 4;
inline int Resources::volumes_size() const {
  return volumes_.size();
}
inline void Resources::clear_volumes() {
  volumes_.Clear();
}
inline const ::ga4gh_task_exec::Volume& Resources::volumes(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Resources.volumes)
  return volumes_.Get(index);
}
inline ::ga4gh_task_exec::Volume* Resources::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Resources.volumes)
  return volumes_.Mutable(index);
}
inline ::ga4gh_task_exec::Volume* Resources::add_volumes() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Resources.volumes)
  return volumes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Volume >*
Resources::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Resources.volumes)
  return &volumes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Volume >&
Resources::volumes() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Resources.volumes)
  return volumes_;
}

// repeated string zones = 5;
inline int Resources::zones_size() const {
  return zones_.size();
}
inline void Resources::clear_zones() {
  zones_.Clear();
}
inline const ::std::string& Resources::zones(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Resources.zones)
  return zones_.Get(index);
}
inline ::std::string* Resources::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Resources.zones)
  return zones_.Mutable(index);
}
inline void Resources::set_zones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Resources.zones)
  zones_.Mutable(index)->assign(value);
}
inline void Resources::set_zones(int index, const char* value) {
  zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Resources.zones)
}
inline void Resources::set_zones(int index, const char* value, size_t size) {
  zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Resources.zones)
}
inline ::std::string* Resources::add_zones() {
  // @@protoc_insertion_point(field_add_mutable:ga4gh_task_exec.Resources.zones)
  return zones_.Add();
}
inline void Resources::add_zones(const ::std::string& value) {
  zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Resources.zones)
}
inline void Resources::add_zones(const char* value) {
  zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ga4gh_task_exec.Resources.zones)
}
inline void Resources::add_zones(const char* value, size_t size) {
  zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ga4gh_task_exec.Resources.zones)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Resources::zones() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Resources.zones)
  return zones_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Resources::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Resources.zones)
  return &zones_;
}

inline const Resources* Resources::internal_default_instance() {
  return &Resources_default_instance_.get();
}
// -------------------------------------------------------------------

// Task

// optional string name = 1;
inline void Task::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::name() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Task.name)
}
inline void Task::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Task.name)
}
inline void Task::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Task.name)
}
inline ::std::string* Task::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_name() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Task.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Task.name)
}

// optional string projectID = 2;
inline void Task::clear_projectid() {
  projectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::projectid() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.projectID)
  return projectid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_projectid(const ::std::string& value) {
  
  projectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Task.projectID)
}
inline void Task::set_projectid(const char* value) {
  
  projectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Task.projectID)
}
inline void Task::set_projectid(const char* value, size_t size) {
  
  projectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Task.projectID)
}
inline ::std::string* Task::mutable_projectid() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.projectID)
  return projectid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_projectid() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Task.projectID)
  
  return projectid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_projectid(::std::string* projectid) {
  if (projectid != NULL) {
    
  } else {
    
  }
  projectid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projectid);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Task.projectID)
}

// optional string description = 3;
inline void Task::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::description() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Task.description)
}
inline void Task::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Task.description)
}
inline void Task::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Task.description)
}
inline ::std::string* Task::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_description() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Task.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Task.description)
}

// repeated .ga4gh_task_exec.TaskParameter inputs = 4;
inline int Task::inputs_size() const {
  return inputs_.size();
}
inline void Task::clear_inputs() {
  inputs_.Clear();
}
inline const ::ga4gh_task_exec::TaskParameter& Task::inputs(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.inputs)
  return inputs_.Get(index);
}
inline ::ga4gh_task_exec::TaskParameter* Task::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.inputs)
  return inputs_.Mutable(index);
}
inline ::ga4gh_task_exec::TaskParameter* Task::add_inputs() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Task.inputs)
  return inputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter >*
Task::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Task.inputs)
  return &inputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter >&
Task::inputs() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Task.inputs)
  return inputs_;
}

// repeated .ga4gh_task_exec.TaskParameter outputs = 5;
inline int Task::outputs_size() const {
  return outputs_.size();
}
inline void Task::clear_outputs() {
  outputs_.Clear();
}
inline const ::ga4gh_task_exec::TaskParameter& Task::outputs(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.outputs)
  return outputs_.Get(index);
}
inline ::ga4gh_task_exec::TaskParameter* Task::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.outputs)
  return outputs_.Mutable(index);
}
inline ::ga4gh_task_exec::TaskParameter* Task::add_outputs() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Task.outputs)
  return outputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter >*
Task::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Task.outputs)
  return &outputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::TaskParameter >&
Task::outputs() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Task.outputs)
  return outputs_;
}

// optional .ga4gh_task_exec.Resources resources = 6;
inline bool Task::has_resources() const {
  return this != internal_default_instance() && resources_ != NULL;
}
inline void Task::clear_resources() {
  if (GetArenaNoVirtual() == NULL && resources_ != NULL) delete resources_;
  resources_ = NULL;
}
inline const ::ga4gh_task_exec::Resources& Task::resources() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.resources)
  return resources_ != NULL ? *resources_
                         : *::ga4gh_task_exec::Resources::internal_default_instance();
}
inline ::ga4gh_task_exec::Resources* Task::mutable_resources() {
  
  if (resources_ == NULL) {
    resources_ = new ::ga4gh_task_exec::Resources;
  }
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.resources)
  return resources_;
}
inline ::ga4gh_task_exec::Resources* Task::release_resources() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Task.resources)
  
  ::ga4gh_task_exec::Resources* temp = resources_;
  resources_ = NULL;
  return temp;
}
inline void Task::set_allocated_resources(::ga4gh_task_exec::Resources* resources) {
  delete resources_;
  resources_ = resources;
  if (resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Task.resources)
}

// repeated .ga4gh_task_exec.DockerExecutor docker = 8;
inline int Task::docker_size() const {
  return docker_.size();
}
inline void Task::clear_docker() {
  docker_.Clear();
}
inline const ::ga4gh_task_exec::DockerExecutor& Task::docker(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Task.docker)
  return docker_.Get(index);
}
inline ::ga4gh_task_exec::DockerExecutor* Task::mutable_docker(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Task.docker)
  return docker_.Mutable(index);
}
inline ::ga4gh_task_exec::DockerExecutor* Task::add_docker() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Task.docker)
  return docker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::DockerExecutor >*
Task::mutable_docker() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Task.docker)
  return &docker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::DockerExecutor >&
Task::docker() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Task.docker)
  return docker_;
}

inline const Task* Task::internal_default_instance() {
  return &Task_default_instance_.get();
}
// -------------------------------------------------------------------

// JobListRequest

// optional string projectID = 1;
inline void JobListRequest::clear_projectid() {
  projectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobListRequest::projectid() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobListRequest.projectID)
  return projectid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobListRequest::set_projectid(const ::std::string& value) {
  
  projectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobListRequest.projectID)
}
inline void JobListRequest::set_projectid(const char* value) {
  
  projectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobListRequest.projectID)
}
inline void JobListRequest::set_projectid(const char* value, size_t size) {
  
  projectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobListRequest.projectID)
}
inline ::std::string* JobListRequest::mutable_projectid() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobListRequest.projectID)
  return projectid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobListRequest::release_projectid() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobListRequest.projectID)
  
  return projectid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobListRequest::set_allocated_projectid(::std::string* projectid) {
  if (projectid != NULL) {
    
  } else {
    
  }
  projectid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projectid);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobListRequest.projectID)
}

// optional string namePrefix = 2;
inline void JobListRequest::clear_nameprefix() {
  nameprefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobListRequest::nameprefix() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobListRequest.namePrefix)
  return nameprefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobListRequest::set_nameprefix(const ::std::string& value) {
  
  nameprefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobListRequest.namePrefix)
}
inline void JobListRequest::set_nameprefix(const char* value) {
  
  nameprefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobListRequest.namePrefix)
}
inline void JobListRequest::set_nameprefix(const char* value, size_t size) {
  
  nameprefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobListRequest.namePrefix)
}
inline ::std::string* JobListRequest::mutable_nameprefix() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobListRequest.namePrefix)
  return nameprefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobListRequest::release_nameprefix() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobListRequest.namePrefix)
  
  return nameprefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobListRequest::set_allocated_nameprefix(::std::string* nameprefix) {
  if (nameprefix != NULL) {
    
  } else {
    
  }
  nameprefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameprefix);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobListRequest.namePrefix)
}

// optional uint32 pageSize = 3;
inline void JobListRequest::clear_pagesize() {
  pagesize_ = 0u;
}
inline ::google::protobuf::uint32 JobListRequest::pagesize() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobListRequest.pageSize)
  return pagesize_;
}
inline void JobListRequest::set_pagesize(::google::protobuf::uint32 value) {
  
  pagesize_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobListRequest.pageSize)
}

// optional string pageToken = 4;
inline void JobListRequest::clear_pagetoken() {
  pagetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobListRequest::pagetoken() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobListRequest.pageToken)
  return pagetoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobListRequest::set_pagetoken(const ::std::string& value) {
  
  pagetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobListRequest.pageToken)
}
inline void JobListRequest::set_pagetoken(const char* value) {
  
  pagetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobListRequest.pageToken)
}
inline void JobListRequest::set_pagetoken(const char* value, size_t size) {
  
  pagetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobListRequest.pageToken)
}
inline ::std::string* JobListRequest::mutable_pagetoken() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobListRequest.pageToken)
  return pagetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobListRequest::release_pagetoken() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobListRequest.pageToken)
  
  return pagetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobListRequest::set_allocated_pagetoken(::std::string* pagetoken) {
  if (pagetoken != NULL) {
    
  } else {
    
  }
  pagetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pagetoken);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobListRequest.pageToken)
}

inline const JobListRequest* JobListRequest::internal_default_instance() {
  return &JobListRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// JobDesc

// optional string jobID = 1;
inline void JobDesc::clear_jobid() {
  jobid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobDesc::jobid() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobDesc.jobID)
  return jobid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobDesc::set_jobid(const ::std::string& value) {
  
  jobid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobDesc.jobID)
}
inline void JobDesc::set_jobid(const char* value) {
  
  jobid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobDesc.jobID)
}
inline void JobDesc::set_jobid(const char* value, size_t size) {
  
  jobid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobDesc.jobID)
}
inline ::std::string* JobDesc::mutable_jobid() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobDesc.jobID)
  return jobid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobDesc::release_jobid() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobDesc.jobID)
  
  return jobid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobDesc::set_allocated_jobid(::std::string* jobid) {
  if (jobid != NULL) {
    
  } else {
    
  }
  jobid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jobid);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobDesc.jobID)
}

// optional .ga4gh_task_exec.State state = 2;
inline void JobDesc::clear_state() {
  state_ = 0;
}
inline ::ga4gh_task_exec::State JobDesc::state() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobDesc.state)
  return static_cast< ::ga4gh_task_exec::State >(state_);
}
inline void JobDesc::set_state(::ga4gh_task_exec::State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobDesc.state)
}

inline const JobDesc* JobDesc::internal_default_instance() {
  return &JobDesc_default_instance_.get();
}
// -------------------------------------------------------------------

// JobListResponse

// repeated .ga4gh_task_exec.JobDesc jobs = 1;
inline int JobListResponse::jobs_size() const {
  return jobs_.size();
}
inline void JobListResponse::clear_jobs() {
  jobs_.Clear();
}
inline const ::ga4gh_task_exec::JobDesc& JobListResponse::jobs(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobListResponse.jobs)
  return jobs_.Get(index);
}
inline ::ga4gh_task_exec::JobDesc* JobListResponse::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobListResponse.jobs)
  return jobs_.Mutable(index);
}
inline ::ga4gh_task_exec::JobDesc* JobListResponse::add_jobs() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.JobListResponse.jobs)
  return jobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobDesc >*
JobListResponse::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.JobListResponse.jobs)
  return &jobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobDesc >&
JobListResponse::jobs() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.JobListResponse.jobs)
  return jobs_;
}

// optional string nextPageToken = 2;
inline void JobListResponse::clear_nextpagetoken() {
  nextpagetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobListResponse::nextpagetoken() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobListResponse.nextPageToken)
  return nextpagetoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobListResponse::set_nextpagetoken(const ::std::string& value) {
  
  nextpagetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobListResponse.nextPageToken)
}
inline void JobListResponse::set_nextpagetoken(const char* value) {
  
  nextpagetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobListResponse.nextPageToken)
}
inline void JobListResponse::set_nextpagetoken(const char* value, size_t size) {
  
  nextpagetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobListResponse.nextPageToken)
}
inline ::std::string* JobListResponse::mutable_nextpagetoken() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobListResponse.nextPageToken)
  return nextpagetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobListResponse::release_nextpagetoken() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobListResponse.nextPageToken)
  
  return nextpagetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobListResponse::set_allocated_nextpagetoken(::std::string* nextpagetoken) {
  if (nextpagetoken != NULL) {
    
  } else {
    
  }
  nextpagetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nextpagetoken);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobListResponse.nextPageToken)
}

inline const JobListResponse* JobListResponse::internal_default_instance() {
  return &JobListResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// JobID

// optional string value = 1;
inline void JobID::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobID::value() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobID.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobID::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobID.value)
}
inline void JobID::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobID.value)
}
inline void JobID::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobID.value)
}
inline ::std::string* JobID::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobID.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobID::release_value() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobID.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobID::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobID.value)
}

inline const JobID* JobID::internal_default_instance() {
  return &JobID_default_instance_.get();
}
// -------------------------------------------------------------------

// JobLog

// repeated string cmd = 1;
inline int JobLog::cmd_size() const {
  return cmd_.size();
}
inline void JobLog::clear_cmd() {
  cmd_.Clear();
}
inline const ::std::string& JobLog::cmd(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.cmd)
  return cmd_.Get(index);
}
inline ::std::string* JobLog::mutable_cmd(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.cmd)
  return cmd_.Mutable(index);
}
inline void JobLog::set_cmd(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.cmd)
  cmd_.Mutable(index)->assign(value);
}
inline void JobLog::set_cmd(int index, const char* value) {
  cmd_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobLog.cmd)
}
inline void JobLog::set_cmd(int index, const char* value, size_t size) {
  cmd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobLog.cmd)
}
inline ::std::string* JobLog::add_cmd() {
  // @@protoc_insertion_point(field_add_mutable:ga4gh_task_exec.JobLog.cmd)
  return cmd_.Add();
}
inline void JobLog::add_cmd(const ::std::string& value) {
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.JobLog.cmd)
}
inline void JobLog::add_cmd(const char* value) {
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ga4gh_task_exec.JobLog.cmd)
}
inline void JobLog::add_cmd(const char* value, size_t size) {
  cmd_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ga4gh_task_exec.JobLog.cmd)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JobLog::cmd() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.JobLog.cmd)
  return cmd_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JobLog::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.JobLog.cmd)
  return &cmd_;
}

// optional string startTime = 2;
inline void JobLog::clear_starttime() {
  starttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobLog::starttime() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.startTime)
  return starttime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobLog::set_starttime(const ::std::string& value) {
  
  starttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.startTime)
}
inline void JobLog::set_starttime(const char* value) {
  
  starttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobLog.startTime)
}
inline void JobLog::set_starttime(const char* value, size_t size) {
  
  starttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobLog.startTime)
}
inline ::std::string* JobLog::mutable_starttime() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.startTime)
  return starttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobLog::release_starttime() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobLog.startTime)
  
  return starttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobLog::set_allocated_starttime(::std::string* starttime) {
  if (starttime != NULL) {
    
  } else {
    
  }
  starttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), starttime);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobLog.startTime)
}

// optional string endTime = 3;
inline void JobLog::clear_endtime() {
  endtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobLog::endtime() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.endTime)
  return endtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobLog::set_endtime(const ::std::string& value) {
  
  endtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.endTime)
}
inline void JobLog::set_endtime(const char* value) {
  
  endtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobLog.endTime)
}
inline void JobLog::set_endtime(const char* value, size_t size) {
  
  endtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobLog.endTime)
}
inline ::std::string* JobLog::mutable_endtime() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.endTime)
  return endtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobLog::release_endtime() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobLog.endTime)
  
  return endtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobLog::set_allocated_endtime(::std::string* endtime) {
  if (endtime != NULL) {
    
  } else {
    
  }
  endtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endtime);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobLog.endTime)
}

// optional string stdout = 4;
inline void JobLog::clear_stdout() {
  stdout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobLog::stdout() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.stdout)
  return stdout_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobLog::set_stdout(const ::std::string& value) {
  
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.stdout)
}
inline void JobLog::set_stdout(const char* value) {
  
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobLog.stdout)
}
inline void JobLog::set_stdout(const char* value, size_t size) {
  
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobLog.stdout)
}
inline ::std::string* JobLog::mutable_stdout() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.stdout)
  return stdout_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobLog::release_stdout() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobLog.stdout)
  
  return stdout_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobLog::set_allocated_stdout(::std::string* stdout) {
  if (stdout != NULL) {
    
  } else {
    
  }
  stdout_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stdout);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobLog.stdout)
}

// optional string stderr = 5;
inline void JobLog::clear_stderr() {
  stderr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobLog::stderr() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.stderr)
  return stderr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobLog::set_stderr(const ::std::string& value) {
  
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.stderr)
}
inline void JobLog::set_stderr(const char* value) {
  
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobLog.stderr)
}
inline void JobLog::set_stderr(const char* value, size_t size) {
  
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobLog.stderr)
}
inline ::std::string* JobLog::mutable_stderr() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.stderr)
  return stderr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobLog::release_stderr() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobLog.stderr)
  
  return stderr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobLog::set_allocated_stderr(::std::string* stderr) {
  if (stderr != NULL) {
    
  } else {
    
  }
  stderr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stderr);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobLog.stderr)
}

// optional int32 exitCode = 6;
inline void JobLog::clear_exitcode() {
  exitcode_ = 0;
}
inline ::google::protobuf::int32 JobLog::exitcode() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.exitCode)
  return exitcode_;
}
inline void JobLog::set_exitcode(::google::protobuf::int32 value) {
  
  exitcode_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.exitCode)
}

// optional string hostIP = 7;
inline void JobLog::clear_hostip() {
  hostip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobLog::hostip() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.hostIP)
  return hostip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobLog::set_hostip(const ::std::string& value) {
  
  hostip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.JobLog.hostIP)
}
inline void JobLog::set_hostip(const char* value) {
  
  hostip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.JobLog.hostIP)
}
inline void JobLog::set_hostip(const char* value, size_t size) {
  
  hostip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.JobLog.hostIP)
}
inline ::std::string* JobLog::mutable_hostip() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.hostIP)
  return hostip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobLog::release_hostip() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.JobLog.hostIP)
  
  return hostip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobLog::set_allocated_hostip(::std::string* hostip) {
  if (hostip != NULL) {
    
  } else {
    
  }
  hostip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostip);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.JobLog.hostIP)
}

// repeated .ga4gh_task_exec.Ports ports = 8;
inline int JobLog::ports_size() const {
  return ports_.size();
}
inline void JobLog::clear_ports() {
  ports_.Clear();
}
inline const ::ga4gh_task_exec::Ports& JobLog::ports(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.JobLog.ports)
  return ports_.Get(index);
}
inline ::ga4gh_task_exec::Ports* JobLog::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.JobLog.ports)
  return ports_.Mutable(index);
}
inline ::ga4gh_task_exec::Ports* JobLog::add_ports() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.JobLog.ports)
  return ports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports >*
JobLog::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.JobLog.ports)
  return &ports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::Ports >&
JobLog::ports() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.JobLog.ports)
  return ports_;
}

inline const JobLog* JobLog::internal_default_instance() {
  return &JobLog_default_instance_.get();
}
// -------------------------------------------------------------------

// FileLog

// optional string location = 1;
inline void FileLog::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileLog::location() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.FileLog.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileLog::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.FileLog.location)
}
inline void FileLog::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.FileLog.location)
}
inline void FileLog::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.FileLog.location)
}
inline ::std::string* FileLog::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.FileLog.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileLog::release_location() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.FileLog.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileLog::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.FileLog.location)
}

// optional string path = 2;
inline void FileLog::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileLog::path() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.FileLog.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileLog::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.FileLog.path)
}
inline void FileLog::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.FileLog.path)
}
inline void FileLog::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.FileLog.path)
}
inline ::std::string* FileLog::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.FileLog.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileLog::release_path() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.FileLog.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileLog::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.FileLog.path)
}

// optional int64 size = 3;
inline void FileLog::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileLog::size() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.FileLog.size)
  return size_;
}
inline void FileLog::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.FileLog.size)
}

inline const FileLog* FileLog::internal_default_instance() {
  return &FileLog_default_instance_.get();
}
// -------------------------------------------------------------------

// Job

// optional string jobID = 1;
inline void Job::clear_jobid() {
  jobid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job::jobid() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Job.jobID)
  return jobid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_jobid(const ::std::string& value) {
  
  jobid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Job.jobID)
}
inline void Job::set_jobid(const char* value) {
  
  jobid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ga4gh_task_exec.Job.jobID)
}
inline void Job::set_jobid(const char* value, size_t size) {
  
  jobid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ga4gh_task_exec.Job.jobID)
}
inline ::std::string* Job::mutable_jobid() {
  
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Job.jobID)
  return jobid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job::release_jobid() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Job.jobID)
  
  return jobid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_jobid(::std::string* jobid) {
  if (jobid != NULL) {
    
  } else {
    
  }
  jobid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jobid);
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Job.jobID)
}

// map<string, string> metadata = 2;
inline int Job::metadata_size() const {
  return metadata_.size();
}
inline void Job::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Job::metadata() const {
  // @@protoc_insertion_point(field_map:ga4gh_task_exec.Job.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Job::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:ga4gh_task_exec.Job.metadata)
  return metadata_.MutableMap();
}

// optional .ga4gh_task_exec.Task task = 3;
inline bool Job::has_task() const {
  return this != internal_default_instance() && task_ != NULL;
}
inline void Job::clear_task() {
  if (GetArenaNoVirtual() == NULL && task_ != NULL) delete task_;
  task_ = NULL;
}
inline const ::ga4gh_task_exec::Task& Job::task() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Job.task)
  return task_ != NULL ? *task_
                         : *::ga4gh_task_exec::Task::internal_default_instance();
}
inline ::ga4gh_task_exec::Task* Job::mutable_task() {
  
  if (task_ == NULL) {
    task_ = new ::ga4gh_task_exec::Task;
  }
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Job.task)
  return task_;
}
inline ::ga4gh_task_exec::Task* Job::release_task() {
  // @@protoc_insertion_point(field_release:ga4gh_task_exec.Job.task)
  
  ::ga4gh_task_exec::Task* temp = task_;
  task_ = NULL;
  return temp;
}
inline void Job::set_allocated_task(::ga4gh_task_exec::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ga4gh_task_exec.Job.task)
}

// optional .ga4gh_task_exec.State state = 4;
inline void Job::clear_state() {
  state_ = 0;
}
inline ::ga4gh_task_exec::State Job::state() const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Job.state)
  return static_cast< ::ga4gh_task_exec::State >(state_);
}
inline void Job::set_state(::ga4gh_task_exec::State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ga4gh_task_exec.Job.state)
}

// repeated .ga4gh_task_exec.JobLog logs = 5;
inline int Job::logs_size() const {
  return logs_.size();
}
inline void Job::clear_logs() {
  logs_.Clear();
}
inline const ::ga4gh_task_exec::JobLog& Job::logs(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Job.logs)
  return logs_.Get(index);
}
inline ::ga4gh_task_exec::JobLog* Job::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Job.logs)
  return logs_.Mutable(index);
}
inline ::ga4gh_task_exec::JobLog* Job::add_logs() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Job.logs)
  return logs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobLog >*
Job::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Job.logs)
  return &logs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::JobLog >&
Job::logs() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Job.logs)
  return logs_;
}

// repeated .ga4gh_task_exec.FileLog outputs = 6;
inline int Job::outputs_size() const {
  return outputs_.size();
}
inline void Job::clear_outputs() {
  outputs_.Clear();
}
inline const ::ga4gh_task_exec::FileLog& Job::outputs(int index) const {
  // @@protoc_insertion_point(field_get:ga4gh_task_exec.Job.outputs)
  return outputs_.Get(index);
}
inline ::ga4gh_task_exec::FileLog* Job::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:ga4gh_task_exec.Job.outputs)
  return outputs_.Mutable(index);
}
inline ::ga4gh_task_exec::FileLog* Job::add_outputs() {
  // @@protoc_insertion_point(field_add:ga4gh_task_exec.Job.outputs)
  return outputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::FileLog >*
Job::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:ga4gh_task_exec.Job.outputs)
  return &outputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ga4gh_task_exec::FileLog >&
Job::outputs() const {
  // @@protoc_insertion_point(field_list:ga4gh_task_exec.Job.outputs)
  return outputs_;
}

inline const Job* Job::internal_default_instance() {
  return &Job_default_instance_.get();
}
// -------------------------------------------------------------------

// ServiceInfoRequest

inline const ServiceInfoRequest* ServiceInfoRequest::internal_default_instance() {
  return &ServiceInfoRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ServiceInfo

// map<string, string> storageConfig = 1;
inline int ServiceInfo::storageconfig_size() const {
  return storageconfig_.size();
}
inline void ServiceInfo::clear_storageconfig() {
  storageconfig_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ServiceInfo::storageconfig() const {
  // @@protoc_insertion_point(field_map:ga4gh_task_exec.ServiceInfo.storageConfig)
  return storageconfig_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ServiceInfo::mutable_storageconfig() {
  // @@protoc_insertion_point(field_mutable_map:ga4gh_task_exec.ServiceInfo.storageConfig)
  return storageconfig_.MutableMap();
}

inline const ServiceInfo* ServiceInfo::internal_default_instance() {
  return &ServiceInfo_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ga4gh_task_exec

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ga4gh_task_exec::State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ga4gh_task_exec::State>() {
  return ::ga4gh_task_exec::State_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2ftask_5fexecution_2eproto__INCLUDED
