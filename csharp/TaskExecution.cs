// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/task_execution.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ga4GhTaskExec {

  /// <summary>Holder for reflection information generated from proto/task_execution.proto</summary>
  public static partial class TaskExecutionReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/task_execution.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaskExecutionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chpwcm90by90YXNrX2V4ZWN1dGlvbi5wcm90bxIPZ2E0Z2hfdGFza19leGVj",
            "Ghxnb29nbGUvYXBpL2Fubm90YXRpb25zLnByb3RvInEKDVRhc2tQYXJhbWV0",
            "ZXISDAoEbmFtZRgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRIQCghsb2Nh",
            "dGlvbhgDIAEoCRIMCgRwYXRoGAQgASgJEg0KBWNsYXNzGAUgASgJEg4KBmNy",
            "ZWF0ZRgGIAEoCCIoCgVQb3J0cxIRCgljb250YWluZXIYASABKAUSDAoEaG9z",
            "dBgCIAEoBSKXAQoORG9ja2VyRXhlY3V0b3ISEQoJaW1hZ2VOYW1lGAEgASgJ",
            "EgsKA2NtZBgCIAMoCRIPCgd3b3JrZGlyGAMgASgJEg0KBXN0ZGluGAYgASgJ",
            "Eg4KBnN0ZG91dBgEIAEoCRIOCgZzdGRlcnIYBSABKAkSJQoFcG9ydHMYByAD",
            "KAsyFi5nYTRnaF90YXNrX2V4ZWMuUG9ydHMiXAoGVm9sdW1lEgwKBG5hbWUY",
            "ASABKAkSDgoGc2l6ZUdiGAIgASgBEg4KBnNvdXJjZRgDIAEoCRISCgptb3Vu",
            "dFBvaW50GAYgASgJEhAKCHJlYWRvbmx5GAcgASgIIogBCglSZXNvdXJjZXMS",
            "FwoPbWluaW11bUNwdUNvcmVzGAEgASgNEhMKC3ByZWVtcHRpYmxlGAIgASgI",
            "EhQKDG1pbmltdW1SYW1HYhgDIAEoARIoCgd2b2x1bWVzGAQgAygLMhcuZ2E0",
            "Z2hfdGFza19leGVjLlZvbHVtZRINCgV6b25lcxgFIAMoCSL9AQoEVGFzaxIM",
            "CgRuYW1lGAEgASgJEhEKCXByb2plY3RJRBgCIAEoCRITCgtkZXNjcmlwdGlv",
            "bhgDIAEoCRIuCgZpbnB1dHMYBCADKAsyHi5nYTRnaF90YXNrX2V4ZWMuVGFz",
            "a1BhcmFtZXRlchIvCgdvdXRwdXRzGAUgAygLMh4uZ2E0Z2hfdGFza19leGVj",
            "LlRhc2tQYXJhbWV0ZXISLQoJcmVzb3VyY2VzGAYgASgLMhouZ2E0Z2hfdGFz",
            "a19leGVjLlJlc291cmNlcxIvCgZkb2NrZXIYCCADKAsyHy5nYTRnaF90YXNr",
            "X2V4ZWMuRG9ja2VyRXhlY3V0b3IiXAoOSm9iTGlzdFJlcXVlc3QSEQoJcHJv",
            "amVjdElEGAEgASgJEhIKCm5hbWVQcmVmaXgYAiABKAkSEAoIcGFnZVNpemUY",
            "AyABKA0SEQoJcGFnZVRva2VuGAQgASgJIj8KB0pvYkRlc2MSDQoFam9iSUQY",
            "ASABKAkSJQoFc3RhdGUYAiABKA4yFi5nYTRnaF90YXNrX2V4ZWMuU3RhdGUi",
            "UAoPSm9iTGlzdFJlc3BvbnNlEiYKBGpvYnMYASADKAsyGC5nYTRnaF90YXNr",
            "X2V4ZWMuSm9iRGVzYxIVCg1uZXh0UGFnZVRva2VuGAIgASgJIhYKBUpvYklE",
            "Eg0KBXZhbHVlGAEgASgJIqIBCgZKb2JMb2cSCwoDY21kGAEgAygJEhEKCXN0",
            "YXJ0VGltZRgCIAEoCRIPCgdlbmRUaW1lGAMgASgJEg4KBnN0ZG91dBgEIAEo",
            "CRIOCgZzdGRlcnIYBSABKAkSEAoIZXhpdENvZGUYBiABKAUSDgoGaG9zdElQ",
            "GAcgASgJEiUKBXBvcnRzGAggAygLMhYuZ2E0Z2hfdGFza19leGVjLlBvcnRz",
            "IjcKB0ZpbGVMb2cSEAoIbG9jYXRpb24YASABKAkSDAoEcGF0aBgCIAEoCRIM",
            "CgRzaXplGAMgASgDIpkCCgNKb2ISDQoFam9iSUQYASABKAkSNAoIbWV0YWRh",
            "dGEYAiADKAsyIi5nYTRnaF90YXNrX2V4ZWMuSm9iLk1ldGFkYXRhRW50cnkS",
            "IwoEdGFzaxgDIAEoCzIVLmdhNGdoX3Rhc2tfZXhlYy5UYXNrEiUKBXN0YXRl",
            "GAQgASgOMhYuZ2E0Z2hfdGFza19leGVjLlN0YXRlEiUKBGxvZ3MYBSADKAsy",
            "Fy5nYTRnaF90YXNrX2V4ZWMuSm9iTG9nEikKB291dHB1dHMYBiADKAsyGC5n",
            "YTRnaF90YXNrX2V4ZWMuRmlsZUxvZxovCg1NZXRhZGF0YUVudHJ5EgsKA2tl",
            "eRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiFAoSU2VydmljZUluZm9SZXF1",
            "ZXN0IosBCgtTZXJ2aWNlSW5mbxJGCg1zdG9yYWdlQ29uZmlnGAEgAygLMi8u",
            "Z2E0Z2hfdGFza19leGVjLlNlcnZpY2VJbmZvLlN0b3JhZ2VDb25maWdFbnRy",
            "eRo0ChJTdG9yYWdlQ29uZmlnRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVl",
            "GAIgASgJOgI4ASqDAQoFU3RhdGUSCwoHVW5rbm93bhAAEgoKBlF1ZXVlZBAB",
            "EgsKB1J1bm5pbmcQAhIKCgZQYXVzZWQQAxIMCghDb21wbGV0ZRAEEgkKBUVy",
            "cm9yEAUSDwoLU3lzdGVtRXJyb3IQBhIMCghDYW5jZWxlZBAHEhAKDEluaXRp",
            "YWxpemluZxAIMtUDCgtUYXNrU2VydmljZRJtCg5HZXRTZXJ2aWNlSW5mbxIj",
            "LmdhNGdoX3Rhc2tfZXhlYy5TZXJ2aWNlSW5mb1JlcXVlc3QaHC5nYTRnaF90",
            "YXNrX2V4ZWMuU2VydmljZUluZm8iGILT5JMCEhIQL3YxL2pvYnMtc2Vydmlj",
            "ZRJNCgdSdW5UYXNrEhUuZ2E0Z2hfdGFza19leGVjLlRhc2saFi5nYTRnaF90",
            "YXNrX2V4ZWMuSm9iSUQiE4LT5JMCDSIIL3YxL2pvYnM6ASoSXwoITGlzdEpv",
            "YnMSHy5nYTRnaF90YXNrX2V4ZWMuSm9iTGlzdFJlcXVlc3QaIC5nYTRnaF90",
            "YXNrX2V4ZWMuSm9iTGlzdFJlc3BvbnNlIhCC0+STAgoSCC92MS9qb2JzElAK",
            "BkdldEpvYhIWLmdhNGdoX3Rhc2tfZXhlYy5Kb2JJRBoULmdhNGdoX3Rhc2tf",
            "ZXhlYy5Kb2IiGILT5JMCEhIQL3YxL2pvYnMve3ZhbHVlfRJVCglDYW5jZWxK",
            "b2ISFi5nYTRnaF90YXNrX2V4ZWMuSm9iSUQaFi5nYTRnaF90YXNrX2V4ZWMu",
            "Sm9iSUQiGILT5JMCEioQL3YxL2pvYnMve3ZhbHVlfWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Ga4GhTaskExec.State), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.TaskParameter), global::Ga4GhTaskExec.TaskParameter.Parser, new[]{ "Name", "Description", "Location", "Path", "Class", "Create" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.Ports), global::Ga4GhTaskExec.Ports.Parser, new[]{ "Container", "Host" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.DockerExecutor), global::Ga4GhTaskExec.DockerExecutor.Parser, new[]{ "ImageName", "Cmd", "Workdir", "Stdin", "Stdout", "Stderr", "Ports" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.Volume), global::Ga4GhTaskExec.Volume.Parser, new[]{ "Name", "SizeGb", "Source", "MountPoint", "Readonly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.Resources), global::Ga4GhTaskExec.Resources.Parser, new[]{ "MinimumCpuCores", "Preemptible", "MinimumRamGb", "Volumes", "Zones" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.Task), global::Ga4GhTaskExec.Task.Parser, new[]{ "Name", "ProjectID", "Description", "Inputs", "Outputs", "Resources", "Docker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.JobListRequest), global::Ga4GhTaskExec.JobListRequest.Parser, new[]{ "ProjectID", "NamePrefix", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.JobDesc), global::Ga4GhTaskExec.JobDesc.Parser, new[]{ "JobID", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.JobListResponse), global::Ga4GhTaskExec.JobListResponse.Parser, new[]{ "Jobs", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.JobID), global::Ga4GhTaskExec.JobID.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.JobLog), global::Ga4GhTaskExec.JobLog.Parser, new[]{ "Cmd", "StartTime", "EndTime", "Stdout", "Stderr", "ExitCode", "HostIP", "Ports" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.FileLog), global::Ga4GhTaskExec.FileLog.Parser, new[]{ "Location", "Path", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.Job), global::Ga4GhTaskExec.Job.Parser, new[]{ "JobID", "Metadata", "Task", "State", "Logs", "Outputs" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.ServiceInfoRequest), global::Ga4GhTaskExec.ServiceInfoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ga4GhTaskExec.ServiceInfo), global::Ga4GhTaskExec.ServiceInfo.Parser, new[]{ "StorageConfig" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum State {
    [pbr::OriginalName("Unknown")] Unknown = 0,
    [pbr::OriginalName("Queued")] Queued = 1,
    [pbr::OriginalName("Running")] Running = 2,
    [pbr::OriginalName("Paused")] Paused = 3,
    [pbr::OriginalName("Complete")] Complete = 4,
    [pbr::OriginalName("Error")] Error = 5,
    [pbr::OriginalName("SystemError")] SystemError = 6,
    [pbr::OriginalName("Canceled")] Canceled = 7,
    [pbr::OriginalName("Initializing")] Initializing = 8,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Parameters for Task
  /// </summary>
  public sealed partial class TaskParameter : pb::IMessage<TaskParameter> {
    private static readonly pb::MessageParser<TaskParameter> _parser = new pb::MessageParser<TaskParameter>(() => new TaskParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskParameter(TaskParameter other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      location_ = other.location_;
      path_ = other.path_;
      class_ = other.class_;
      create_ = other.create_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskParameter Clone() {
      return new TaskParameter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// OPTIONAL
    /// name of the parameter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// OPTIONAL
    /// Text description
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private string location_ = "";
    /// <summary>
    /// REQUIRED
    /// location in long term storage, is a url specific to the implementing
    /// system. For example s3://my-object-store/file1 or gs://my-bucket/file2 or
    /// file:///path/to/my/file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 4;
    private string path_ = "";
    /// <summary>
    /// REQUIRED
    /// path in the machine file system. Note, this MUST be a path that exists
    /// within one of the defined volumes
    /// If the file is mounted in a volume that is mounted read/write the file must
    /// be accessable to processes in the container. Optimizations, suc as hard linking
    /// to a source file, or providing a streaming input from a FUSE mount should only
    /// be done if the volume is mounted as read only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class" field.</summary>
    public const int ClassFieldNumber = 5;
    private string class_ = "";
    /// <summary>
    /// REQUIRED
    /// Type of data, "File" or "Directory"
    /// if used for an output all the files in the directory
    /// will be copied to the storage location
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Class {
      get { return class_; }
      set {
        class_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 6;
    private bool create_;
    /// <summary>
    /// OPTIONAL: default false
    /// if the parameter is an output, should the element be created before executing
    /// the command. For example if saving the working directory as an output,
    /// the directory needs to exist before the command is called. If false, it is
    /// assumed that the user will create the element as a part of the operation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Create {
      get { return create_; }
      set {
        create_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Location != other.Location) return false;
      if (Path != other.Path) return false;
      if (Class != other.Class) return false;
      if (Create != other.Create) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Class.Length != 0) hash ^= Class.GetHashCode();
      if (Create != false) hash ^= Create.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Location);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Path);
      }
      if (Class.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Class);
      }
      if (Create != false) {
        output.WriteRawTag(48);
        output.WriteBool(Create);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Class.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Class);
      }
      if (Create != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskParameter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Class.Length != 0) {
        Class = other.Class;
      }
      if (other.Create != false) {
        Create = other.Create;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Location = input.ReadString();
            break;
          }
          case 34: {
            Path = input.ReadString();
            break;
          }
          case 42: {
            Class = input.ReadString();
            break;
          }
          case 48: {
            Create = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// host to container port mappings
  /// </summary>
  public sealed partial class Ports : pb::IMessage<Ports> {
    private static readonly pb::MessageParser<Ports> _parser = new pb::MessageParser<Ports>(() => new Ports());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ports> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ports() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ports(Ports other) : this() {
      container_ = other.container_;
      host_ = other.host_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ports Clone() {
      return new Ports(this);
    }

    /// <summary>Field number for the "container" field.</summary>
    public const int ContainerFieldNumber = 1;
    private int container_;
    /// <summary>
    /// REQUIRED 
    /// Exposed port on container
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Container {
      get { return container_; }
      set {
        container_ = value;
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 2;
    private int host_;
    /// <summary>
    /// OPTIONAL 
    /// Must be greater than 1024;
    /// Defaults to 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Host {
      get { return host_; }
      set {
        host_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ports);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ports other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Container != other.Container) return false;
      if (Host != other.Host) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Container != 0) hash ^= Container.GetHashCode();
      if (Host != 0) hash ^= Host.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Container != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Container);
      }
      if (Host != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Host);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Container != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Container);
      }
      if (Host != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Host);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ports other) {
      if (other == null) {
        return;
      }
      if (other.Container != 0) {
        Container = other.Container;
      }
      if (other.Host != 0) {
        Host = other.Host;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Container = input.ReadInt32();
            break;
          }
          case 16: {
            Host = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A command line to be executed and the docker container to run it
  /// </summary>
  public sealed partial class DockerExecutor : pb::IMessage<DockerExecutor> {
    private static readonly pb::MessageParser<DockerExecutor> _parser = new pb::MessageParser<DockerExecutor>(() => new DockerExecutor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DockerExecutor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockerExecutor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockerExecutor(DockerExecutor other) : this() {
      imageName_ = other.imageName_;
      cmd_ = other.cmd_.Clone();
      workdir_ = other.workdir_;
      stdin_ = other.stdin_;
      stdout_ = other.stdout_;
      stderr_ = other.stderr_;
      ports_ = other.ports_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockerExecutor Clone() {
      return new DockerExecutor(this);
    }

    /// <summary>Field number for the "imageName" field.</summary>
    public const int ImageNameFieldNumber = 1;
    private string imageName_ = "";
    /// <summary>
    /// REQUIRED
    /// Docker Image name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageName {
      get { return imageName_; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cmd_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cmd_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// REQUIRED
    /// The command to be executed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cmd {
      get { return cmd_; }
    }

    /// <summary>Field number for the "workdir" field.</summary>
    public const int WorkdirFieldNumber = 3;
    private string workdir_ = "";
    /// <summary>
    /// OPTIONAL: default docker image directory
    /// The working directory that the command will be executed in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Workdir {
      get { return workdir_; }
      set {
        workdir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stdin" field.</summary>
    public const int StdinFieldNumber = 6;
    private string stdin_ = "";
    /// <summary>
    /// OPTIONAL
    /// Path for supplying input to stdin, blank if none
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stdin {
      get { return stdin_; }
      set {
        stdin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stdout" field.</summary>
    public const int StdoutFieldNumber = 4;
    private string stdout_ = "";
    /// <summary>
    /// OPTIONAL
    /// Path for stdout recording, blank if not storing to file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stdout {
      get { return stdout_; }
      set {
        stdout_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stderr" field.</summary>
    public const int StderrFieldNumber = 5;
    private string stderr_ = "";
    /// <summary>
    /// OPTIONAL
    /// Path for stderr recording, blank if not storing to file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stderr {
      get { return stderr_; }
      set {
        stderr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Ga4GhTaskExec.Ports> _repeated_ports_codec
        = pb::FieldCodec.ForMessage(58, global::Ga4GhTaskExec.Ports.Parser);
    private readonly pbc::RepeatedField<global::Ga4GhTaskExec.Ports> ports_ = new pbc::RepeatedField<global::Ga4GhTaskExec.Ports>();
    /// <summary>
    /// OPTIONAL
    /// Port to expose from within the container, blank if none
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ga4GhTaskExec.Ports> Ports {
      get { return ports_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DockerExecutor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DockerExecutor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageName != other.ImageName) return false;
      if(!cmd_.Equals(other.cmd_)) return false;
      if (Workdir != other.Workdir) return false;
      if (Stdin != other.Stdin) return false;
      if (Stdout != other.Stdout) return false;
      if (Stderr != other.Stderr) return false;
      if(!ports_.Equals(other.ports_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageName.Length != 0) hash ^= ImageName.GetHashCode();
      hash ^= cmd_.GetHashCode();
      if (Workdir.Length != 0) hash ^= Workdir.GetHashCode();
      if (Stdin.Length != 0) hash ^= Stdin.GetHashCode();
      if (Stdout.Length != 0) hash ^= Stdout.GetHashCode();
      if (Stderr.Length != 0) hash ^= Stderr.GetHashCode();
      hash ^= ports_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageName);
      }
      cmd_.WriteTo(output, _repeated_cmd_codec);
      if (Workdir.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Workdir);
      }
      if (Stdout.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Stdout);
      }
      if (Stderr.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Stderr);
      }
      if (Stdin.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Stdin);
      }
      ports_.WriteTo(output, _repeated_ports_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      size += cmd_.CalculateSize(_repeated_cmd_codec);
      if (Workdir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Workdir);
      }
      if (Stdin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stdin);
      }
      if (Stdout.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stdout);
      }
      if (Stderr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stderr);
      }
      size += ports_.CalculateSize(_repeated_ports_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DockerExecutor other) {
      if (other == null) {
        return;
      }
      if (other.ImageName.Length != 0) {
        ImageName = other.ImageName;
      }
      cmd_.Add(other.cmd_);
      if (other.Workdir.Length != 0) {
        Workdir = other.Workdir;
      }
      if (other.Stdin.Length != 0) {
        Stdin = other.Stdin;
      }
      if (other.Stdout.Length != 0) {
        Stdout = other.Stdout;
      }
      if (other.Stderr.Length != 0) {
        Stderr = other.Stderr;
      }
      ports_.Add(other.ports_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ImageName = input.ReadString();
            break;
          }
          case 18: {
            cmd_.AddEntriesFrom(input, _repeated_cmd_codec);
            break;
          }
          case 26: {
            Workdir = input.ReadString();
            break;
          }
          case 34: {
            Stdout = input.ReadString();
            break;
          }
          case 42: {
            Stderr = input.ReadString();
            break;
          }
          case 50: {
            Stdin = input.ReadString();
            break;
          }
          case 58: {
            ports_.AddEntriesFrom(input, _repeated_ports_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Attached volume request.
  /// </summary>
  public sealed partial class Volume : pb::IMessage<Volume> {
    private static readonly pb::MessageParser<Volume> _parser = new pb::MessageParser<Volume>(() => new Volume());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Volume> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Volume() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Volume(Volume other) : this() {
      name_ = other.name_;
      sizeGb_ = other.sizeGb_;
      source_ = other.source_;
      mountPoint_ = other.mountPoint_;
      readonly_ = other.readonly_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Volume Clone() {
      return new Volume(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// OPTIONAL
    /// Name of attached volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sizeGb" field.</summary>
    public const int SizeGbFieldNumber = 2;
    private double sizeGb_;
    /// <summary>
    /// REQUIRED
    /// Minimum size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SizeGb {
      get { return sizeGb_; }
      set {
        sizeGb_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private string source_ = "";
    /// <summary>
    /// OPTIONAL
    /// Source volume, this would refer to an existing volume the execution engine
    /// could identify. Leave blank if is to be a newly created volume
    /// Volumes loaded from a source will be mounted as read only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mountPoint" field.</summary>
    public const int MountPointFieldNumber = 6;
    private string mountPoint_ = "";
    /// <summary>
    /// REQUIRED
    /// mount point for volume inside the docker container
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MountPoint {
      get { return mountPoint_; }
      set {
        mountPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "readonly" field.</summary>
    public const int ReadonlyFieldNumber = 7;
    private bool readonly_;
    /// <summary>
    /// OPTIONAL default False
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Readonly {
      get { return readonly_; }
      set {
        readonly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Volume);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Volume other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (SizeGb != other.SizeGb) return false;
      if (Source != other.Source) return false;
      if (MountPoint != other.MountPoint) return false;
      if (Readonly != other.Readonly) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SizeGb != 0D) hash ^= SizeGb.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (MountPoint.Length != 0) hash ^= MountPoint.GetHashCode();
      if (Readonly != false) hash ^= Readonly.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (SizeGb != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SizeGb);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (MountPoint.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MountPoint);
      }
      if (Readonly != false) {
        output.WriteRawTag(56);
        output.WriteBool(Readonly);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SizeGb != 0D) {
        size += 1 + 8;
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (MountPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MountPoint);
      }
      if (Readonly != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Volume other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SizeGb != 0D) {
        SizeGb = other.SizeGb;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.MountPoint.Length != 0) {
        MountPoint = other.MountPoint;
      }
      if (other.Readonly != false) {
        Readonly = other.Readonly;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 17: {
            SizeGb = input.ReadDouble();
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 50: {
            MountPoint = input.ReadString();
            break;
          }
          case 56: {
            Readonly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Resources : pb::IMessage<Resources> {
    private static readonly pb::MessageParser<Resources> _parser = new pb::MessageParser<Resources>(() => new Resources());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resources> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources(Resources other) : this() {
      minimumCpuCores_ = other.minimumCpuCores_;
      preemptible_ = other.preemptible_;
      minimumRamGb_ = other.minimumRamGb_;
      volumes_ = other.volumes_.Clone();
      zones_ = other.zones_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources Clone() {
      return new Resources(this);
    }

    /// <summary>Field number for the "minimumCpuCores" field.</summary>
    public const int MinimumCpuCoresFieldNumber = 1;
    private uint minimumCpuCores_;
    /// <summary>
    /// OPTIONAL default 1
    /// Minimum number of CPUs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinimumCpuCores {
      get { return minimumCpuCores_; }
      set {
        minimumCpuCores_ = value;
      }
    }

    /// <summary>Field number for the "preemptible" field.</summary>
    public const int PreemptibleFieldNumber = 2;
    private bool preemptible_;
    /// <summary>
    /// Can schedule on resource that resource that can be preempted, like AWS Spot Instances
    /// OPTIONAL default false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Preemptible {
      get { return preemptible_; }
      set {
        preemptible_ = value;
      }
    }

    /// <summary>Field number for the "minimumRamGb" field.</summary>
    public const int MinimumRamGbFieldNumber = 3;
    private double minimumRamGb_;
    /// <summary>
    /// REQUIRED
    /// Minimum RAM required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinimumRamGb {
      get { return minimumRamGb_; }
      set {
        minimumRamGb_ = value;
      }
    }

    /// <summary>Field number for the "volumes" field.</summary>
    public const int VolumesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Ga4GhTaskExec.Volume> _repeated_volumes_codec
        = pb::FieldCodec.ForMessage(34, global::Ga4GhTaskExec.Volume.Parser);
    private readonly pbc::RepeatedField<global::Ga4GhTaskExec.Volume> volumes_ = new pbc::RepeatedField<global::Ga4GhTaskExec.Volume>();
    /// <summary>
    /// REQUIRED
    /// Volumes to be mounted into the docker container
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ga4GhTaskExec.Volume> Volumes {
      get { return volumes_; }
    }

    /// <summary>Field number for the "zones" field.</summary>
    public const int ZonesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_zones_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> zones_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// OPTIONAL
    /// optional scheduling information for systems where multiple compute zones are avalible
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Zones {
      get { return zones_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resources);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resources other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinimumCpuCores != other.MinimumCpuCores) return false;
      if (Preemptible != other.Preemptible) return false;
      if (MinimumRamGb != other.MinimumRamGb) return false;
      if(!volumes_.Equals(other.volumes_)) return false;
      if(!zones_.Equals(other.zones_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinimumCpuCores != 0) hash ^= MinimumCpuCores.GetHashCode();
      if (Preemptible != false) hash ^= Preemptible.GetHashCode();
      if (MinimumRamGb != 0D) hash ^= MinimumRamGb.GetHashCode();
      hash ^= volumes_.GetHashCode();
      hash ^= zones_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinimumCpuCores != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MinimumCpuCores);
      }
      if (Preemptible != false) {
        output.WriteRawTag(16);
        output.WriteBool(Preemptible);
      }
      if (MinimumRamGb != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MinimumRamGb);
      }
      volumes_.WriteTo(output, _repeated_volumes_codec);
      zones_.WriteTo(output, _repeated_zones_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinimumCpuCores != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinimumCpuCores);
      }
      if (Preemptible != false) {
        size += 1 + 1;
      }
      if (MinimumRamGb != 0D) {
        size += 1 + 8;
      }
      size += volumes_.CalculateSize(_repeated_volumes_codec);
      size += zones_.CalculateSize(_repeated_zones_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resources other) {
      if (other == null) {
        return;
      }
      if (other.MinimumCpuCores != 0) {
        MinimumCpuCores = other.MinimumCpuCores;
      }
      if (other.Preemptible != false) {
        Preemptible = other.Preemptible;
      }
      if (other.MinimumRamGb != 0D) {
        MinimumRamGb = other.MinimumRamGb;
      }
      volumes_.Add(other.volumes_);
      zones_.Add(other.zones_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MinimumCpuCores = input.ReadUInt32();
            break;
          }
          case 16: {
            Preemptible = input.ReadBool();
            break;
          }
          case 25: {
            MinimumRamGb = input.ReadDouble();
            break;
          }
          case 34: {
            volumes_.AddEntriesFrom(input, _repeated_volumes_codec);
            break;
          }
          case 42: {
            zones_.AddEntriesFrom(input, _repeated_zones_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The description of a task to be run
  /// </summary>
  public sealed partial class Task : pb::IMessage<Task> {
    private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task(Task other) : this() {
      name_ = other.name_;
      projectID_ = other.projectID_;
      description_ = other.description_;
      inputs_ = other.inputs_.Clone();
      outputs_ = other.outputs_.Clone();
      Resources = other.resources_ != null ? other.Resources.Clone() : null;
      docker_ = other.docker_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task Clone() {
      return new Task(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// OPTIONAL
    /// user name for task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "projectID" field.</summary>
    public const int ProjectIDFieldNumber = 2;
    private string projectID_ = "";
    /// <summary>
    /// OPTIONAL
    /// parameter for execution engine to define/store group information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectID {
      get { return projectID_; }
      set {
        projectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// OPTIONAL
    /// free text description of task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Ga4GhTaskExec.TaskParameter> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(34, global::Ga4GhTaskExec.TaskParameter.Parser);
    private readonly pbc::RepeatedField<global::Ga4GhTaskExec.TaskParameter> inputs_ = new pbc::RepeatedField<global::Ga4GhTaskExec.TaskParameter>();
    /// <summary>
    /// REQUIRED
    /// Files to be copied into system before tasks
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ga4GhTaskExec.TaskParameter> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Ga4GhTaskExec.TaskParameter> _repeated_outputs_codec
        = pb::FieldCodec.ForMessage(42, global::Ga4GhTaskExec.TaskParameter.Parser);
    private readonly pbc::RepeatedField<global::Ga4GhTaskExec.TaskParameter> outputs_ = new pbc::RepeatedField<global::Ga4GhTaskExec.TaskParameter>();
    /// <summary>
    /// REQUIRED
    /// Files to be copied out of the system after tasks
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ga4GhTaskExec.TaskParameter> Outputs {
      get { return outputs_; }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 6;
    private global::Ga4GhTaskExec.Resources resources_;
    /// <summary>
    /// REQUIRED
    /// Define required system resources to run job
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ga4GhTaskExec.Resources Resources {
      get { return resources_; }
      set {
        resources_ = value;
      }
    }

    /// <summary>Field number for the "docker" field.</summary>
    public const int DockerFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Ga4GhTaskExec.DockerExecutor> _repeated_docker_codec
        = pb::FieldCodec.ForMessage(66, global::Ga4GhTaskExec.DockerExecutor.Parser);
    private readonly pbc::RepeatedField<global::Ga4GhTaskExec.DockerExecutor> docker_ = new pbc::RepeatedField<global::Ga4GhTaskExec.DockerExecutor>();
    /// <summary>
    /// REQUIRED
    /// An array of docker executions that will be run sequentially
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ga4GhTaskExec.DockerExecutor> Docker {
      get { return docker_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ProjectID != other.ProjectID) return false;
      if (Description != other.Description) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      if(!outputs_.Equals(other.outputs_)) return false;
      if (!object.Equals(Resources, other.Resources)) return false;
      if(!docker_.Equals(other.docker_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ProjectID.Length != 0) hash ^= ProjectID.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= inputs_.GetHashCode();
      hash ^= outputs_.GetHashCode();
      if (resources_ != null) hash ^= Resources.GetHashCode();
      hash ^= docker_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ProjectID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProjectID);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      inputs_.WriteTo(output, _repeated_inputs_codec);
      outputs_.WriteTo(output, _repeated_outputs_codec);
      if (resources_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Resources);
      }
      docker_.WriteTo(output, _repeated_docker_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ProjectID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectID);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      if (resources_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
      }
      size += docker_.CalculateSize(_repeated_docker_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ProjectID.Length != 0) {
        ProjectID = other.ProjectID;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      inputs_.Add(other.inputs_);
      outputs_.Add(other.outputs_);
      if (other.resources_ != null) {
        if (resources_ == null) {
          resources_ = new global::Ga4GhTaskExec.Resources();
        }
        Resources.MergeFrom(other.Resources);
      }
      docker_.Add(other.docker_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ProjectID = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 42: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
          case 50: {
            if (resources_ == null) {
              resources_ = new global::Ga4GhTaskExec.Resources();
            }
            input.ReadMessage(resources_);
            break;
          }
          case 66: {
            docker_.AddEntriesFrom(input, _repeated_docker_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request listing of jobs tracked by server
  /// </summary>
  public sealed partial class JobListRequest : pb::IMessage<JobListRequest> {
    private static readonly pb::MessageParser<JobListRequest> _parser = new pb::MessageParser<JobListRequest>(() => new JobListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobListRequest(JobListRequest other) : this() {
      projectID_ = other.projectID_;
      namePrefix_ = other.namePrefix_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobListRequest Clone() {
      return new JobListRequest(this);
    }

    /// <summary>Field number for the "projectID" field.</summary>
    public const int ProjectIDFieldNumber = 1;
    private string projectID_ = "";
    /// <summary>
    /// OPTIONAL
    /// The name of the project to search for pipelines. Caller must have READ access to this project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectID {
      get { return projectID_; }
      set {
        projectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namePrefix" field.</summary>
    public const int NamePrefixFieldNumber = 2;
    private string namePrefix_ = "";
    /// <summary>
    /// OPTIONAL
    /// Pipelines with names that match this prefix should be returned. If unspecified, all pipelines in the project, up to pageSize, will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamePrefix {
      get { return namePrefix_; }
      set {
        namePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private uint pageSize_;
    /// <summary>
    /// OPTIONAL
    /// Number of pipelines to return at once. Defaults to 256, and max is 2048.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "pageToken" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// OPTIONAL
    /// Token to use to indicate where to start getting results. If unspecified, returns the first page of results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectID != other.ProjectID) return false;
      if (NamePrefix != other.NamePrefix) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectID.Length != 0) hash ^= ProjectID.GetHashCode();
      if (NamePrefix.Length != 0) hash ^= NamePrefix.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectID);
      }
      if (NamePrefix.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NamePrefix);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectID);
      }
      if (NamePrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamePrefix);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobListRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectID.Length != 0) {
        ProjectID = other.ProjectID;
      }
      if (other.NamePrefix.Length != 0) {
        NamePrefix = other.NamePrefix;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectID = input.ReadString();
            break;
          }
          case 18: {
            NamePrefix = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadUInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Small description of jobs, returned by server during listing
  /// </summary>
  public sealed partial class JobDesc : pb::IMessage<JobDesc> {
    private static readonly pb::MessageParser<JobDesc> _parser = new pb::MessageParser<JobDesc>(() => new JobDesc());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobDesc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobDesc(JobDesc other) : this() {
      jobID_ = other.jobID_;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobDesc Clone() {
      return new JobDesc(this);
    }

    /// <summary>Field number for the "jobID" field.</summary>
    public const int JobIDFieldNumber = 1;
    private string jobID_ = "";
    /// <summary>
    /// REQUIRED
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobID {
      get { return jobID_; }
      set {
        jobID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Ga4GhTaskExec.State state_ = 0;
    /// <summary>
    /// REQUIRED
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ga4GhTaskExec.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobDesc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JobID != other.JobID) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JobID.Length != 0) hash ^= JobID.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JobID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(JobID);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JobID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobID);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobDesc other) {
      if (other == null) {
        return;
      }
      if (other.JobID.Length != 0) {
        JobID = other.JobID;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            JobID = input.ReadString();
            break;
          }
          case 16: {
            state_ = (global::Ga4GhTaskExec.State) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Return envelope
  /// </summary>
  public sealed partial class JobListResponse : pb::IMessage<JobListResponse> {
    private static readonly pb::MessageParser<JobListResponse> _parser = new pb::MessageParser<JobListResponse>(() => new JobListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobListResponse(JobListResponse other) : this() {
      jobs_ = other.jobs_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobListResponse Clone() {
      return new JobListResponse(this);
    }

    /// <summary>Field number for the "jobs" field.</summary>
    public const int JobsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Ga4GhTaskExec.JobDesc> _repeated_jobs_codec
        = pb::FieldCodec.ForMessage(10, global::Ga4GhTaskExec.JobDesc.Parser);
    private readonly pbc::RepeatedField<global::Ga4GhTaskExec.JobDesc> jobs_ = new pbc::RepeatedField<global::Ga4GhTaskExec.JobDesc>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ga4GhTaskExec.JobDesc> Jobs {
      get { return jobs_; }
    }

    /// <summary>Field number for the "nextPageToken" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!jobs_.Equals(other.jobs_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= jobs_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      jobs_.WriteTo(output, _repeated_jobs_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += jobs_.CalculateSize(_repeated_jobs_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobListResponse other) {
      if (other == null) {
        return;
      }
      jobs_.Add(other.jobs_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            jobs_.AddEntriesFrom(input, _repeated_jobs_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ID of an instance of a Task
  /// </summary>
  public sealed partial class JobID : pb::IMessage<JobID> {
    private static readonly pb::MessageParser<JobID> _parser = new pb::MessageParser<JobID>(() => new JobID());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobID(JobID other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobID Clone() {
      return new JobID(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobID other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JobLog : pb::IMessage<JobLog> {
    private static readonly pb::MessageParser<JobLog> _parser = new pb::MessageParser<JobLog>(() => new JobLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobLog(JobLog other) : this() {
      cmd_ = other.cmd_.Clone();
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      stdout_ = other.stdout_;
      stderr_ = other.stderr_;
      exitCode_ = other.exitCode_;
      hostIP_ = other.hostIP_;
      ports_ = other.ports_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobLog Clone() {
      return new JobLog(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_cmd_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> cmd_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The command line that was run
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cmd {
      get { return cmd_; }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private string startTime_ = "";
    /// <summary>
    /// When the command was executed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private string endTime_ = "";
    /// <summary>
    /// When the command completed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stdout" field.</summary>
    public const int StdoutFieldNumber = 4;
    private string stdout_ = "";
    /// <summary>
    /// Sample of stdout (not guaranteed to be entire log)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stdout {
      get { return stdout_; }
      set {
        stdout_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stderr" field.</summary>
    public const int StderrFieldNumber = 5;
    private string stderr_ = "";
    /// <summary>
    /// Sample of stderr (not guaranteed to be entire log)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stderr {
      get { return stderr_; }
      set {
        stderr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exitCode" field.</summary>
    public const int ExitCodeFieldNumber = 6;
    private int exitCode_;
    /// <summary>
    /// Exit code of the program
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExitCode {
      get { return exitCode_; }
      set {
        exitCode_ = value;
      }
    }

    /// <summary>Field number for the "hostIP" field.</summary>
    public const int HostIPFieldNumber = 7;
    private string hostIP_ = "";
    /// <summary>
    ///  ip of worker host
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostIP {
      get { return hostIP_; }
      set {
        hostIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Ga4GhTaskExec.Ports> _repeated_ports_codec
        = pb::FieldCodec.ForMessage(66, global::Ga4GhTaskExec.Ports.Parser);
    private readonly pbc::RepeatedField<global::Ga4GhTaskExec.Ports> ports_ = new pbc::RepeatedField<global::Ga4GhTaskExec.Ports>();
    /// <summary>
    ///  ports bound from container to host
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ga4GhTaskExec.Ports> Ports {
      get { return ports_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cmd_.Equals(other.cmd_)) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Stdout != other.Stdout) return false;
      if (Stderr != other.Stderr) return false;
      if (ExitCode != other.ExitCode) return false;
      if (HostIP != other.HostIP) return false;
      if(!ports_.Equals(other.ports_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cmd_.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (Stdout.Length != 0) hash ^= Stdout.GetHashCode();
      if (Stderr.Length != 0) hash ^= Stderr.GetHashCode();
      if (ExitCode != 0) hash ^= ExitCode.GetHashCode();
      if (HostIP.Length != 0) hash ^= HostIP.GetHashCode();
      hash ^= ports_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cmd_.WriteTo(output, _repeated_cmd_codec);
      if (StartTime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StartTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EndTime);
      }
      if (Stdout.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Stdout);
      }
      if (Stderr.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Stderr);
      }
      if (ExitCode != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ExitCode);
      }
      if (HostIP.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(HostIP);
      }
      ports_.WriteTo(output, _repeated_ports_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cmd_.CalculateSize(_repeated_cmd_codec);
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (Stdout.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stdout);
      }
      if (Stderr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stderr);
      }
      if (ExitCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExitCode);
      }
      if (HostIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostIP);
      }
      size += ports_.CalculateSize(_repeated_ports_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobLog other) {
      if (other == null) {
        return;
      }
      cmd_.Add(other.cmd_);
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      if (other.Stdout.Length != 0) {
        Stdout = other.Stdout;
      }
      if (other.Stderr.Length != 0) {
        Stderr = other.Stderr;
      }
      if (other.ExitCode != 0) {
        ExitCode = other.ExitCode;
      }
      if (other.HostIP.Length != 0) {
        HostIP = other.HostIP;
      }
      ports_.Add(other.ports_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cmd_.AddEntriesFrom(input, _repeated_cmd_codec);
            break;
          }
          case 18: {
            StartTime = input.ReadString();
            break;
          }
          case 26: {
            EndTime = input.ReadString();
            break;
          }
          case 34: {
            Stdout = input.ReadString();
            break;
          }
          case 42: {
            Stderr = input.ReadString();
            break;
          }
          case 48: {
            ExitCode = input.ReadInt32();
            break;
          }
          case 58: {
            HostIP = input.ReadString();
            break;
          }
          case 66: {
            ports_.AddEntriesFrom(input, _repeated_ports_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Log of file output by workflow
  /// </summary>
  public sealed partial class FileLog : pb::IMessage<FileLog> {
    private static readonly pb::MessageParser<FileLog> _parser = new pb::MessageParser<FileLog>(() => new FileLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileLog(FileLog other) : this() {
      location_ = other.location_;
      path_ = other.path_;
      size_ = other.size_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileLog Clone() {
      return new FileLog(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private string location_ = "";
    /// <summary>
    /// REQUIRED
    /// location in long term storage that the output file was copied to
    /// is a url specific to the implementing
    /// system. For example s3://my-object-store/file1 or gs://my-bucket/file2 or
    /// file:///path/to/my/file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    /// <summary>
    /// REQUIRED
    /// path in the machine file system that originated the file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private long size_;
    /// <summary>
    /// REQUIRED
    /// Size of produced file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Location != other.Location) return false;
      if (Path != other.Path) return false;
      if (Size != other.Size) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Location.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Location);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (Size != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Size);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileLog other) {
      if (other == null) {
        return;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Location = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 24: {
            Size = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The description of the running instance of a task
  /// </summary>
  public sealed partial class Job : pb::IMessage<Job> {
    private static readonly pb::MessageParser<Job> _parser = new pb::MessageParser<Job>(() => new Job());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Job> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Job() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Job(Job other) : this() {
      jobID_ = other.jobID_;
      metadata_ = other.metadata_.Clone();
      Task = other.task_ != null ? other.Task.Clone() : null;
      state_ = other.state_;
      logs_ = other.logs_.Clone();
      outputs_ = other.outputs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Job Clone() {
      return new Job(this);
    }

    /// <summary>Field number for the "jobID" field.</summary>
    public const int JobIDFieldNumber = 1;
    private string jobID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobID {
      get { return jobID_; }
      set {
        jobID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 3;
    private global::Ga4GhTaskExec.Task task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ga4GhTaskExec.Task Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private global::Ga4GhTaskExec.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ga4GhTaskExec.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Ga4GhTaskExec.JobLog> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(42, global::Ga4GhTaskExec.JobLog.Parser);
    private readonly pbc::RepeatedField<global::Ga4GhTaskExec.JobLog> logs_ = new pbc::RepeatedField<global::Ga4GhTaskExec.JobLog>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ga4GhTaskExec.JobLog> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Ga4GhTaskExec.FileLog> _repeated_outputs_codec
        = pb::FieldCodec.ForMessage(50, global::Ga4GhTaskExec.FileLog.Parser);
    private readonly pbc::RepeatedField<global::Ga4GhTaskExec.FileLog> outputs_ = new pbc::RepeatedField<global::Ga4GhTaskExec.FileLog>();
    /// <summary>
    /// List of all files copied out to the object store as well as some basic
    /// meta-data about them. This is an expanded list, if the task outputs 
    /// list directories, this record details every individual file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ga4GhTaskExec.FileLog> Outputs {
      get { return outputs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Job);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Job other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JobID != other.JobID) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (!object.Equals(Task, other.Task)) return false;
      if (State != other.State) return false;
      if(!logs_.Equals(other.logs_)) return false;
      if(!outputs_.Equals(other.outputs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JobID.Length != 0) hash ^= JobID.GetHashCode();
      hash ^= Metadata.GetHashCode();
      if (task_ != null) hash ^= Task.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= logs_.GetHashCode();
      hash ^= outputs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JobID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(JobID);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (task_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Task);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) State);
      }
      logs_.WriteTo(output, _repeated_logs_codec);
      outputs_.WriteTo(output, _repeated_outputs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JobID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobID);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += logs_.CalculateSize(_repeated_logs_codec);
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Job other) {
      if (other == null) {
        return;
      }
      if (other.JobID.Length != 0) {
        JobID = other.JobID;
      }
      metadata_.Add(other.metadata_);
      if (other.task_ != null) {
        if (task_ == null) {
          task_ = new global::Ga4GhTaskExec.Task();
        }
        Task.MergeFrom(other.Task);
      }
      if (other.State != 0) {
        State = other.State;
      }
      logs_.Add(other.logs_);
      outputs_.Add(other.outputs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            JobID = input.ReadString();
            break;
          }
          case 18: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 26: {
            if (task_ == null) {
              task_ = new global::Ga4GhTaskExec.Task();
            }
            input.ReadMessage(task_);
            break;
          }
          case 32: {
            state_ = (global::Ga4GhTaskExec.State) input.ReadEnum();
            break;
          }
          case 42: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 50: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Blank request message for service request
  /// </summary>
  public sealed partial class ServiceInfoRequest : pb::IMessage<ServiceInfoRequest> {
    private static readonly pb::MessageParser<ServiceInfoRequest> _parser = new pb::MessageParser<ServiceInfoRequest>(() => new ServiceInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInfoRequest(ServiceInfoRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInfoRequest Clone() {
      return new ServiceInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceInfoRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Information about Task Execution Service
  /// May include information related (but not limited to)
  /// resource availability and storage system information
  /// </summary>
  public sealed partial class ServiceInfo : pb::IMessage<ServiceInfo> {
    private static readonly pb::MessageParser<ServiceInfo> _parser = new pb::MessageParser<ServiceInfo>(() => new ServiceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ga4GhTaskExec.TaskExecutionReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInfo(ServiceInfo other) : this() {
      storageConfig_ = other.storageConfig_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInfo Clone() {
      return new ServiceInfo(this);
    }

    /// <summary>Field number for the "storageConfig" field.</summary>
    public const int StorageConfigFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_storageConfig_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 10);
    private readonly pbc::MapField<string, string> storageConfig_ = new pbc::MapField<string, string>();
    /// <summary>
    /// System specific key/value pairs
    /// Example for a shared file system based storage system:
    /// storageType=sharedFile, baseDir=/path/to/shared/directory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> StorageConfig {
      get { return storageConfig_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!StorageConfig.Equals(other.StorageConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= StorageConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      storageConfig_.WriteTo(output, _map_storageConfig_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += storageConfig_.CalculateSize(_map_storageConfig_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceInfo other) {
      if (other == null) {
        return;
      }
      storageConfig_.Add(other.storageConfig_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            storageConfig_.AddEntriesFrom(input, _map_storageConfig_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
